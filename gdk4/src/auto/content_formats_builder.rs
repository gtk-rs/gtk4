// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::ContentFormats;
use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ContentFormatsBuilder(Shared<ffi::GdkContentFormatsBuilder>);

    match fn {
        ref => |ptr| ffi::gdk_content_formats_builder_ref(ptr),
        unref => |ptr| ffi::gdk_content_formats_builder_unref(ptr),
        type_ => || ffi::gdk_content_formats_builder_get_type(),
    }
}

impl ContentFormatsBuilder {
    #[doc(alias = "gdk_content_formats_builder_new")]
    pub fn new() -> ContentFormatsBuilder {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::gdk_content_formats_builder_new()) }
    }

    #[doc(alias = "gdk_content_formats_builder_add_formats")]
    pub fn add_formats(&self, formats: &ContentFormats) {
        unsafe {
            ffi::gdk_content_formats_builder_add_formats(
                self.to_glib_none().0,
                formats.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gdk_content_formats_builder_add_gtype")]
    pub fn add_type(&self, type_: glib::types::Type) {
        unsafe {
            ffi::gdk_content_formats_builder_add_gtype(self.to_glib_none().0, type_.to_glib());
        }
    }

    #[doc(alias = "gdk_content_formats_builder_add_mime_type")]
    pub fn add_mime_type(&self, mime_type: &str) {
        unsafe {
            ffi::gdk_content_formats_builder_add_mime_type(
                self.to_glib_none().0,
                mime_type.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gdk_content_formats_builder_free_to_formats")]
    pub fn free_to_formats(&self) -> Option<ContentFormats> {
        unsafe {
            from_glib_full(ffi::gdk_content_formats_builder_free_to_formats(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gdk_content_formats_builder_to_formats")]
    pub fn to_formats(&self) -> Option<ContentFormats> {
        unsafe {
            from_glib_full(ffi::gdk_content_formats_builder_to_formats(
                self.to_glib_none().0,
            ))
        }
    }
}

impl Default for ContentFormatsBuilder {
    fn default() -> Self {
        Self::new()
    }
}
