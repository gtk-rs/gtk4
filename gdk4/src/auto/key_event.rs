// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Event;
use crate::KeyMatch;
use crate::ModifierType;
use glib::translate::*;
use std::fmt;
use std::mem;

glib::wrapper! {
    pub struct KeyEvent(Object<ffi::GdkKeyEvent>) @extends Event;

    match fn {
        get_type => || ffi::gdk_key_event_get_type(),
    }
}

impl KeyEvent {
    #[doc(alias = "gdk_key_event_get_consumed_modifiers")]
    pub fn get_consumed_modifiers(&self) -> ModifierType {
        unsafe {
            from_glib(ffi::gdk_key_event_get_consumed_modifiers(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gdk_key_event_get_keycode")]
    pub fn get_keycode(&self) -> u32 {
        unsafe { ffi::gdk_key_event_get_keycode(self.to_glib_none().0) }
    }

    #[doc(alias = "gdk_key_event_get_layout")]
    pub fn get_layout(&self) -> u32 {
        unsafe { ffi::gdk_key_event_get_layout(self.to_glib_none().0) }
    }

    #[doc(alias = "gdk_key_event_get_level")]
    pub fn get_level(&self) -> u32 {
        unsafe { ffi::gdk_key_event_get_level(self.to_glib_none().0) }
    }

    #[doc(alias = "gdk_key_event_get_match")]
    pub fn get_match(&self) -> Option<(u32, ModifierType)> {
        unsafe {
            let mut keyval = mem::MaybeUninit::uninit();
            let mut modifiers = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gdk_key_event_get_match(
                self.to_glib_none().0,
                keyval.as_mut_ptr(),
                modifiers.as_mut_ptr(),
            ));
            let keyval = keyval.assume_init();
            let modifiers = modifiers.assume_init();
            if ret {
                Some((keyval, from_glib(modifiers)))
            } else {
                None
            }
        }
    }

    #[doc(alias = "gdk_key_event_is_modifier")]
    pub fn is_modifier(&self) -> bool {
        unsafe { from_glib(ffi::gdk_key_event_is_modifier(self.to_glib_none().0)) }
    }

    #[doc(alias = "gdk_key_event_matches")]
    pub fn matches(&self, keyval: u32, modifiers: ModifierType) -> KeyMatch {
        unsafe {
            from_glib(ffi::gdk_key_event_matches(
                self.to_glib_none().0,
                keyval,
                modifiers.to_glib(),
            ))
        }
    }
}

impl fmt::Display for KeyEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("KeyEvent")
    }
}
