// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::AxisUse;
use crate::Device;
use crate::Display;
use crate::EventType;
use crate::ModifierType;
use crate::Seat;
use crate::Surface;
use crate::TimeCoord;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::mem;

glib::wrapper! {
    pub struct Event(Object<ffi::GdkEvent>);

    match fn {
        get_type => || ffi::gdk_event_get_type(),
    }
}

pub const NONE_EVENT: Option<&Event> = None;

pub trait EventExt: 'static {
    #[doc(alias = "gdk_event_get_axis")]
    fn get_axis(&self, axis_use: AxisUse) -> Option<f64>;

    #[doc(alias = "gdk_event_get_device")]
    fn get_device(&self) -> Option<Device>;

    #[doc(alias = "gdk_event_get_display")]
    fn get_display(&self) -> Option<Display>;

    #[doc(alias = "gdk_event_get_event_type")]
    fn get_event_type(&self) -> EventType;

    #[doc(alias = "gdk_event_get_history")]
    fn get_history(&self) -> Vec<TimeCoord>;

    #[doc(alias = "gdk_event_get_modifier_state")]
    fn get_modifier_state(&self) -> ModifierType;

    #[doc(alias = "gdk_event_get_pointer_emulated")]
    fn get_pointer_emulated(&self) -> bool;

    #[doc(alias = "gdk_event_get_position")]
    fn get_position(&self) -> Option<(f64, f64)>;

    #[doc(alias = "gdk_event_get_seat")]
    fn get_seat(&self) -> Option<Seat>;

    #[doc(alias = "gdk_event_get_surface")]
    fn get_surface(&self) -> Option<Surface>;

    #[doc(alias = "gdk_event_get_time")]
    fn get_time(&self) -> u32;

    #[doc(alias = "gdk_event_triggers_context_menu")]
    fn triggers_context_menu(&self) -> bool;
}

impl<O: IsA<Event>> EventExt for O {
    fn get_axis(&self, axis_use: AxisUse) -> Option<f64> {
        unsafe {
            let mut value = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gdk_event_get_axis(
                self.as_ref().to_glib_none().0,
                axis_use.to_glib(),
                value.as_mut_ptr(),
            ));
            let value = value.assume_init();
            if ret {
                Some(value)
            } else {
                None
            }
        }
    }

    fn get_device(&self) -> Option<Device> {
        unsafe { from_glib_none(ffi::gdk_event_get_device(self.as_ref().to_glib_none().0)) }
    }

    fn get_display(&self) -> Option<Display> {
        unsafe { from_glib_none(ffi::gdk_event_get_display(self.as_ref().to_glib_none().0)) }
    }

    fn get_event_type(&self) -> EventType {
        unsafe {
            from_glib(ffi::gdk_event_get_event_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_history(&self) -> Vec<TimeCoord> {
        unsafe {
            let mut out_n_coords = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_container_num(
                ffi::gdk_event_get_history(
                    self.as_ref().to_glib_none().0,
                    out_n_coords.as_mut_ptr(),
                ),
                out_n_coords.assume_init() as usize,
            );
            ret
        }
    }

    fn get_modifier_state(&self) -> ModifierType {
        unsafe {
            from_glib(ffi::gdk_event_get_modifier_state(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_pointer_emulated(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_event_get_pointer_emulated(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_position(&self) -> Option<(f64, f64)> {
        unsafe {
            let mut x = mem::MaybeUninit::uninit();
            let mut y = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gdk_event_get_position(
                self.as_ref().to_glib_none().0,
                x.as_mut_ptr(),
                y.as_mut_ptr(),
            ));
            let x = x.assume_init();
            let y = y.assume_init();
            if ret {
                Some((x, y))
            } else {
                None
            }
        }
    }

    fn get_seat(&self) -> Option<Seat> {
        unsafe { from_glib_none(ffi::gdk_event_get_seat(self.as_ref().to_glib_none().0)) }
    }

    fn get_surface(&self) -> Option<Surface> {
        unsafe { from_glib_none(ffi::gdk_event_get_surface(self.as_ref().to_glib_none().0)) }
    }

    fn get_time(&self) -> u32 {
        unsafe { ffi::gdk_event_get_time(self.as_ref().to_glib_none().0) }
    }

    fn triggers_context_menu(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_event_triggers_context_menu(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for Event {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Event")
    }
}
