// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::RenderNode;
use glib::translate::*;
use std::fmt;

glib::glib_wrapper! {
    pub struct ContainerNode(Object<ffi::GskContainerNode>) @extends RenderNode;

    match fn {
        get_type => || ffi::gsk_container_node_get_type(),
    }
}

impl ContainerNode {
    pub fn new(children: &[RenderNode]) -> ContainerNode {
        assert_initialized_main_thread!();
        let n_children = children.len() as u32;
        unsafe {
            from_glib_full(ffi::gsk_container_node_new(
                children.to_glib_none().0,
                n_children,
            ))
        }
    }

    pub fn get_child(&self, idx: u32) -> Option<RenderNode> {
        unsafe {
            from_glib_none(ffi::gsk_container_node_get_child(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    pub fn get_n_children(&self) -> u32 {
        unsafe { ffi::gsk_container_node_get_n_children(self.to_glib_none().0) }
    }
}

impl fmt::Display for ContainerNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ContainerNode")
    }
}
