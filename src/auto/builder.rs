// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Builder(Object<gtk_sys::GtkBuilder, gtk_sys::GtkBuilderClass, BuilderClass>);

    match fn {
        get_type => || gtk_sys::gtk_builder_get_type(),
    }
}

impl Builder {
    pub fn new() -> Builder {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(gtk_sys::gtk_builder_new()) }
    }

    pub fn from_resource(resource_path: &str) -> Builder {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_builder_new_from_resource(
                resource_path.to_glib_none().0,
            ))
        }
    }

    pub fn from_string(string: &str) -> Builder {
        assert_initialized_main_thread!();
        let length = string.len() as isize;
        unsafe {
            from_glib_full(gtk_sys::gtk_builder_new_from_string(
                string.to_glib_none().0,
                length,
            ))
        }
    }

    //pub fn add_from_resource(&self, resource_path: &str, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_add_from_resource() }
    //}

    //pub fn add_from_string(&self, buffer: &str, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_add_from_string() }
    //}

    //pub fn add_objects_from_resource(&self, resource_path: &str, object_ids: &[&str], error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_add_objects_from_resource() }
    //}

    //pub fn add_objects_from_string(&self, buffer: &str, object_ids: &[&str], error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_add_objects_from_string() }
    //}

    //pub fn create_closure(&self, function_name: &str, flags: /*Ignored*/BuilderClosureFlags, object: /*Ignored*/Option<&glib::Object>, error: /*Ignored*/Option<glib::Error>) -> /*Ignored*/Option<glib::Closure> {
    //    unsafe { TODO: call gtk_sys:gtk_builder_create_closure() }
    //}

    //pub fn expose_object(&self, name: &str, object: /*Ignored*/&glib::Object) {
    //    unsafe { TODO: call gtk_sys:gtk_builder_expose_object() }
    //}

    //pub fn extend_with_template<P: IsA<Widget>>(&self, widget: &P, template_type: glib::types::Type, buffer: &str, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_extend_with_template() }
    //}

    //pub fn get_current_object(&self) -> /*Ignored*/Option<glib::Object> {
    //    unsafe { TODO: call gtk_sys:gtk_builder_get_current_object() }
    //}

    //pub fn get_objects(&self) -> /*Ignored*/Vec<glib::Object> {
    //    unsafe { TODO: call gtk_sys:gtk_builder_get_objects() }
    //}

    //pub fn get_scope(&self) -> /*Ignored*/Option<BuilderScope> {
    //    unsafe { TODO: call gtk_sys:gtk_builder_get_scope() }
    //}

    pub fn get_translation_domain(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_builder_get_translation_domain(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_type_from_name(&self, type_name: &str) -> glib::types::Type {
        unsafe {
            from_glib(gtk_sys::gtk_builder_get_type_from_name(
                self.to_glib_none().0,
                type_name.to_glib_none().0,
            ))
        }
    }

    //pub fn set_current_object(&self, current_object: /*Ignored*/Option<&glib::Object>) {
    //    unsafe { TODO: call gtk_sys:gtk_builder_set_current_object() }
    //}

    //pub fn set_scope(&self, scope: /*Ignored*/Option<&BuilderScope>) {
    //    unsafe { TODO: call gtk_sys:gtk_builder_set_scope() }
    //}

    pub fn set_translation_domain(&self, domain: Option<&str>) {
        unsafe {
            gtk_sys::gtk_builder_set_translation_domain(
                self.to_glib_none().0,
                domain.to_glib_none().0,
            );
        }
    }

    //pub fn value_from_string(&self, pspec: /*Ignored*/&glib::ParamSpec, string: &str, value: /*Ignored*/glib::Value, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_value_from_string() }
    //}

    //pub fn value_from_string_type(&self, type_: glib::types::Type, string: &str, value: /*Ignored*/glib::Value, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_builder_value_from_string_type() }
    //}

    pub fn connect_property_current_object_notify<F: Fn(&Builder) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_object_trampoline<F: Fn(&Builder) + 'static>(
            this: *mut gtk_sys::GtkBuilder,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-object\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_object_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_scope_notify<F: Fn(&Builder) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_scope_trampoline<F: Fn(&Builder) + 'static>(
            this: *mut gtk_sys::GtkBuilder,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scope\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scope_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_translation_domain_notify<F: Fn(&Builder) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_translation_domain_trampoline<F: Fn(&Builder) + 'static>(
            this: *mut gtk_sys::GtkBuilder,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::translation-domain\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_translation_domain_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for Builder {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Builder {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Builder")
    }
}
