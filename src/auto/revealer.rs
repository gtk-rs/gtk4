// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Bin;
use Buildable;
use Container;
use RevealerTransitionType;
use Widget;

glib_wrapper! {
    pub struct Revealer(Object<gtk_sys::GtkRevealer, RevealerClass>) @extends Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_revealer_get_type(),
    }
}

impl Revealer {
    pub fn new() -> Revealer {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_revealer_new()).unsafe_cast() }
    }

    pub fn get_child_revealed(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_revealer_get_child_revealed(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_reveal_child(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_revealer_get_reveal_child(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_transition_duration(&self) -> u32 {
        unsafe { gtk_sys::gtk_revealer_get_transition_duration(self.to_glib_none().0) }
    }

    pub fn get_transition_type(&self) -> RevealerTransitionType {
        unsafe {
            from_glib(gtk_sys::gtk_revealer_get_transition_type(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_reveal_child(&self, reveal_child: bool) {
        unsafe {
            gtk_sys::gtk_revealer_set_reveal_child(self.to_glib_none().0, reveal_child.to_glib());
        }
    }

    pub fn set_transition_duration(&self, duration: u32) {
        unsafe {
            gtk_sys::gtk_revealer_set_transition_duration(self.to_glib_none().0, duration);
        }
    }

    pub fn set_transition_type(&self, transition: RevealerTransitionType) {
        unsafe {
            gtk_sys::gtk_revealer_set_transition_type(self.to_glib_none().0, transition.to_glib());
        }
    }

    pub fn connect_property_child_revealed_notify<F: Fn(&Revealer) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_revealed_trampoline<F: Fn(&Revealer) + 'static>(
            this: *mut gtk_sys::GtkRevealer,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child-revealed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_revealed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_reveal_child_notify<F: Fn(&Revealer) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_reveal_child_trampoline<F: Fn(&Revealer) + 'static>(
            this: *mut gtk_sys::GtkRevealer,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::reveal-child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_reveal_child_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_transition_duration_notify<F: Fn(&Revealer) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_transition_duration_trampoline<F: Fn(&Revealer) + 'static>(
            this: *mut gtk_sys::GtkRevealer,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::transition-duration\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_transition_duration_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_transition_type_notify<F: Fn(&Revealer) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_transition_type_trampoline<F: Fn(&Revealer) + 'static>(
            this: *mut gtk_sys::GtkRevealer,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::transition-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_transition_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for Revealer {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Revealer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Revealer")
    }
}
