// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use CellArea;
use CellLayout;
use TreeIter;
use TreeModel;

glib_wrapper! {
    pub struct EntryCompletion(Object<gtk_sys::GtkEntryCompletion, EntryCompletionClass>) @implements Buildable, CellLayout;

    match fn {
        get_type => || gtk_sys::gtk_entry_completion_get_type(),
    }
}

impl EntryCompletion {
    pub fn new() -> EntryCompletion {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(gtk_sys::gtk_entry_completion_new()) }
    }

    pub fn with_area<P: IsA<CellArea>>(area: &P) -> EntryCompletion {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(gtk_sys::gtk_entry_completion_new_with_area(
                area.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn complete(&self) {
        unsafe {
            gtk_sys::gtk_entry_completion_complete(self.to_glib_none().0);
        }
    }

    pub fn compute_prefix(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_entry_completion_compute_prefix(
                self.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    pub fn delete_action(&self, index_: i32) {
        unsafe {
            gtk_sys::gtk_entry_completion_delete_action(self.to_glib_none().0, index_);
        }
    }

    pub fn get_completion_prefix(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_completion_get_completion_prefix(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_inline_completion(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_completion_get_inline_completion(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_inline_selection(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_completion_get_inline_selection(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_minimum_key_length(&self) -> i32 {
        unsafe { gtk_sys::gtk_entry_completion_get_minimum_key_length(self.to_glib_none().0) }
    }

    pub fn get_model(&self) -> Option<TreeModel> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_completion_get_model(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_popup_completion(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_completion_get_popup_completion(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_popup_set_width(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_completion_get_popup_set_width(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_popup_single_match(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_completion_get_popup_single_match(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_text_column(&self) -> i32 {
        unsafe { gtk_sys::gtk_entry_completion_get_text_column(self.to_glib_none().0) }
    }

    pub fn insert_action_markup(&self, index_: i32, markup: &str) {
        unsafe {
            gtk_sys::gtk_entry_completion_insert_action_markup(
                self.to_glib_none().0,
                index_,
                markup.to_glib_none().0,
            );
        }
    }

    pub fn insert_action_text(&self, index_: i32, text: &str) {
        unsafe {
            gtk_sys::gtk_entry_completion_insert_action_text(
                self.to_glib_none().0,
                index_,
                text.to_glib_none().0,
            );
        }
    }

    pub fn insert_prefix(&self) {
        unsafe {
            gtk_sys::gtk_entry_completion_insert_prefix(self.to_glib_none().0);
        }
    }

    pub fn set_inline_completion(&self, inline_completion: bool) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_inline_completion(
                self.to_glib_none().0,
                inline_completion.to_glib(),
            );
        }
    }

    pub fn set_inline_selection(&self, inline_selection: bool) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_inline_selection(
                self.to_glib_none().0,
                inline_selection.to_glib(),
            );
        }
    }

    pub fn set_match_func<P: Fn(&EntryCompletion, &str, &TreeIter) -> bool + 'static>(
        &self,
        func: P,
    ) {
        let func_data: Box_<P> = Box_::new(func);
        unsafe extern "C" fn func_func<
            P: Fn(&EntryCompletion, &str, &TreeIter) -> bool + 'static,
        >(
            completion: *mut gtk_sys::GtkEntryCompletion,
            key: *const libc::c_char,
            iter: *mut gtk_sys::GtkTreeIter,
            user_data: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let completion = from_glib_borrow(completion);
            let key: Borrowed<GString> = from_glib_borrow(key);
            let iter = from_glib_borrow(iter);
            let callback: &P = &*(user_data as *mut _);
            let res = (*callback)(&completion, key.as_str(), &iter);
            res.to_glib()
        }
        let func = Some(func_func::<P> as _);
        unsafe extern "C" fn func_notify_func<
            P: Fn(&EntryCompletion, &str, &TreeIter) -> bool + 'static,
        >(
            data: glib_sys::gpointer,
        ) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(func_notify_func::<P> as _);
        let super_callback0: Box_<P> = func_data;
        unsafe {
            gtk_sys::gtk_entry_completion_set_match_func(
                self.to_glib_none().0,
                func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_minimum_key_length(&self, length: i32) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_minimum_key_length(self.to_glib_none().0, length);
        }
    }

    pub fn set_model<P: IsA<TreeModel>>(&self, model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_model(
                self.to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_popup_completion(&self, popup_completion: bool) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_popup_completion(
                self.to_glib_none().0,
                popup_completion.to_glib(),
            );
        }
    }

    pub fn set_popup_set_width(&self, popup_set_width: bool) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_popup_set_width(
                self.to_glib_none().0,
                popup_set_width.to_glib(),
            );
        }
    }

    pub fn set_popup_single_match(&self, popup_single_match: bool) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_popup_single_match(
                self.to_glib_none().0,
                popup_single_match.to_glib(),
            );
        }
    }

    pub fn set_text_column(&self, column: i32) {
        unsafe {
            gtk_sys::gtk_entry_completion_set_text_column(self.to_glib_none().0, column);
        }
    }

    pub fn get_property_cell_area(&self) -> Option<CellArea> {
        unsafe {
            let mut value = Value::from_type(<CellArea as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"cell-area\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `cell-area` getter")
        }
    }

    pub fn connect_action_activated<F: Fn(&EntryCompletion, i32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn action_activated_trampoline<F: Fn(&EntryCompletion, i32) + 'static>(
            this: *mut gtk_sys::GtkEntryCompletion,
            index: libc::c_int,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), index)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"action-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    action_activated_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_cursor_on_match<
        F: Fn(&EntryCompletion, &TreeModel, &TreeIter) -> glib::signal::Inhibit + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn cursor_on_match_trampoline<
            F: Fn(&EntryCompletion, &TreeModel, &TreeIter) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            model: *mut gtk_sys::GtkTreeModel,
            iter: *mut gtk_sys::GtkTreeIter,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(model),
                &from_glib_borrow(iter),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"cursor-on-match\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    cursor_on_match_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_insert_prefix<
        F: Fn(&EntryCompletion, &str) -> glib::signal::Inhibit + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn insert_prefix_trampoline<
            F: Fn(&EntryCompletion, &str) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            prefix: *mut libc::c_char,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &GString::from_glib_borrow(prefix)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"insert-prefix\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    insert_prefix_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_match_selected<
        F: Fn(&EntryCompletion, &TreeModel, &TreeIter) -> glib::signal::Inhibit + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn match_selected_trampoline<
            F: Fn(&EntryCompletion, &TreeModel, &TreeIter) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            model: *mut gtk_sys::GtkTreeModel,
            iter: *mut gtk_sys::GtkTreeIter,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(model),
                &from_glib_borrow(iter),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"match-selected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    match_selected_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_no_matches<F: Fn(&EntryCompletion) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn no_matches_trampoline<F: Fn(&EntryCompletion) + 'static>(
            this: *mut gtk_sys::GtkEntryCompletion,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"no-matches\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    no_matches_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_inline_completion_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_inline_completion_trampoline<
            F: Fn(&EntryCompletion) + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::inline-completion\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_inline_completion_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_inline_selection_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_inline_selection_trampoline<
            F: Fn(&EntryCompletion) + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::inline-selection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_inline_selection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_minimum_key_length_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_minimum_key_length_trampoline<
            F: Fn(&EntryCompletion) + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::minimum-key-length\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_minimum_key_length_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_model_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<F: Fn(&EntryCompletion) + 'static>(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_popup_completion_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_popup_completion_trampoline<
            F: Fn(&EntryCompletion) + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::popup-completion\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_popup_completion_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_popup_set_width_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_popup_set_width_trampoline<
            F: Fn(&EntryCompletion) + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::popup-set-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_popup_set_width_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_popup_single_match_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_popup_single_match_trampoline<
            F: Fn(&EntryCompletion) + 'static,
        >(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::popup-single-match\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_popup_single_match_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_text_column_notify<F: Fn(&EntryCompletion) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_column_trampoline<F: Fn(&EntryCompletion) + 'static>(
            this: *mut gtk_sys::GtkEntryCompletion,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::text-column\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_text_column_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for EntryCompletion {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for EntryCompletion {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EntryCompletion")
    }
}
