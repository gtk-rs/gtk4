// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use atk;
use cairo;
use gdk;
use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use graphene;
use gsk;
use gtk_sys;
use libc;
use pango;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use Align;
use Allocation;
use Buildable;
use DirectionType;
use EventController;
use LayoutManager;
use Orientation;
use Overflow;
use PickFlags;
use Requisition;
use Root;
use Settings;
use SizeRequestMode;
use Snapshot;
use StateFlags;
use StyleContext;
use TextDirection;
use Tooltip;

glib_wrapper! {
    pub struct Widget(Object<gtk_sys::GtkWidget, gtk_sys::GtkWidgetClass, WidgetClass>) @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_widget_get_type(),
    }
}

impl Widget {
    //pub fn new(type_: glib::types::Type, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Widget {
    //    unsafe { TODO: call gtk_sys:gtk_widget_new() }
    //}

    pub fn get_default_direction() -> TextDirection {
        assert_initialized_main_thread!();
        unsafe { from_glib(gtk_sys::gtk_widget_get_default_direction()) }
    }

    pub fn set_default_direction(dir: TextDirection) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_widget_set_default_direction(dir.to_glib());
        }
    }
}

pub const NONE_WIDGET: Option<&Widget> = None;

pub trait WidgetExt: 'static {
    fn action_set_enabled(&self, action_name: &str, enabled: bool);

    fn activate(&self) -> bool;

    //fn activate_action(&self, name: &str, format_string: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> bool;

    fn activate_action_variant(&self, name: &str, args: Option<&glib::Variant>) -> bool;

    fn activate_default(&self);

    fn add_controller<P: IsA<EventController>>(&self, controller: &P);

    fn add_css_class(&self, css_class: &str);

    fn add_mnemonic_label<P: IsA<Widget>>(&self, label: &P);

    fn allocate(&self, width: i32, height: i32, baseline: i32, transform: Option<&gsk::Transform>);

    fn can_activate_accel(&self, signal_id: u32) -> bool;

    fn child_focus(&self, direction: DirectionType) -> bool;

    fn compute_bounds<P: IsA<Widget>>(&self, target: &P) -> Option<graphene::Rect>;

    fn compute_expand(&self, orientation: Orientation) -> bool;

    fn compute_point<P: IsA<Widget>>(
        &self,
        target: &P,
        point: &graphene::Point,
    ) -> Option<graphene::Point>;

    fn compute_transform<P: IsA<Widget>>(&self, target: &P) -> Option<graphene::Matrix>;

    fn contains(&self, x: f64, y: f64) -> bool;

    fn create_pango_context(&self) -> Option<pango::Context>;

    fn create_pango_layout(&self, text: Option<&str>) -> Option<pango::Layout>;

    fn destroy(&self);

    //fn destroyed<P: IsA<Widget>>(&self, widget_pointer: &P);

    fn device_is_shadowed(&self, device: &gdk::Device) -> bool;

    fn drag_check_threshold(
        &self,
        start_x: i32,
        start_y: i32,
        current_x: i32,
        current_y: i32,
    ) -> bool;

    fn error_bell(&self);

    fn get_accessible(&self) -> Option<atk::Object>;

    fn get_allocated_baseline(&self) -> i32;

    fn get_allocated_height(&self) -> i32;

    fn get_allocated_width(&self) -> i32;

    fn get_allocation(&self) -> Allocation;

    fn get_ancestor(&self, widget_type: glib::types::Type) -> Option<Widget>;

    fn get_can_focus(&self) -> bool;

    fn get_can_target(&self) -> bool;

    fn get_child_visible(&self) -> bool;

    fn get_clipboard(&self) -> gdk::Clipboard;

    fn get_css_classes(&self) -> Vec<GString>;

    fn get_css_name(&self) -> Option<GString>;

    fn get_cursor(&self) -> Option<gdk::Cursor>;

    fn get_direction(&self) -> TextDirection;

    fn get_display(&self) -> Option<gdk::Display>;

    fn get_first_child(&self) -> Option<Widget>;

    fn get_focus_child(&self) -> Option<Widget>;

    fn get_focus_on_click(&self) -> bool;

    fn get_font_map(&self) -> Option<pango::FontMap>;

    fn get_font_options(&self) -> Option<cairo::FontOptions>;

    fn get_frame_clock(&self) -> Option<gdk::FrameClock>;

    fn get_halign(&self) -> Align;

    fn get_has_tooltip(&self) -> bool;

    fn get_height(&self) -> i32;

    fn get_hexpand(&self) -> bool;

    fn get_hexpand_set(&self) -> bool;

    fn get_last_child(&self) -> Option<Widget>;

    fn get_layout_manager(&self) -> Option<LayoutManager>;

    fn get_mapped(&self) -> bool;

    fn get_margin_bottom(&self) -> i32;

    fn get_margin_end(&self) -> i32;

    fn get_margin_start(&self) -> i32;

    fn get_margin_top(&self) -> i32;

    fn get_modifier_mask(&self, intent: gdk::ModifierIntent) -> gdk::ModifierType;

    //fn get_native(&self) -> /*Ignored*/Option<Native>;

    fn get_next_sibling(&self) -> Option<Widget>;

    fn get_opacity(&self) -> f64;

    fn get_overflow(&self) -> Overflow;

    fn get_pango_context(&self) -> Option<pango::Context>;

    fn get_parent(&self) -> Option<Widget>;

    fn get_preferred_size(&self) -> (Requisition, Requisition);

    fn get_prev_sibling(&self) -> Option<Widget>;

    fn get_primary_clipboard(&self) -> Option<gdk::Clipboard>;

    fn get_realized(&self) -> bool;

    fn get_receives_default(&self) -> bool;

    fn get_request_mode(&self) -> SizeRequestMode;

    fn get_root(&self) -> Option<Root>;

    fn get_scale_factor(&self) -> i32;

    fn get_sensitive(&self) -> bool;

    fn get_settings(&self) -> Option<Settings>;

    fn get_size_request(&self) -> (i32, i32);

    fn get_state_flags(&self) -> StateFlags;

    fn get_style_context(&self) -> StyleContext;

    fn get_support_multidevice(&self) -> bool;

    fn get_template_child(
        &self,
        widget_type: glib::types::Type,
        name: &str,
    ) -> Option<glib::Object>;

    fn get_tooltip_markup(&self) -> Option<GString>;

    fn get_tooltip_text(&self) -> Option<GString>;

    fn get_valign(&self) -> Align;

    fn get_vexpand(&self) -> bool;

    fn get_vexpand_set(&self) -> bool;

    fn get_visible(&self) -> bool;

    fn get_width(&self) -> i32;

    fn grab_focus(&self) -> bool;

    fn has_css_class(&self, css_class: &str) -> bool;

    fn has_default(&self) -> bool;

    fn has_focus(&self) -> bool;

    fn has_grab(&self) -> bool;

    fn has_visible_focus(&self) -> bool;

    fn hide(&self);

    fn in_destruction(&self) -> bool;

    fn init_template(&self);

    fn insert_action_group<P: IsA<gio::ActionGroup>>(&self, name: &str, group: Option<&P>);

    fn insert_after<P: IsA<Widget>, Q: IsA<Widget>>(
        &self,
        parent: &P,
        previous_sibling: Option<&Q>,
    );

    fn insert_before<P: IsA<Widget>, Q: IsA<Widget>>(&self, parent: &P, next_sibling: Option<&Q>);

    fn is_ancestor<P: IsA<Widget>>(&self, ancestor: &P) -> bool;

    fn is_drawable(&self) -> bool;

    fn is_focus(&self) -> bool;

    fn is_sensitive(&self) -> bool;

    fn is_visible(&self) -> bool;

    fn keynav_failed(&self, direction: DirectionType) -> bool;

    fn list_mnemonic_labels(&self) -> Vec<Widget>;

    fn map(&self);

    fn measure(&self, orientation: Orientation, for_size: i32) -> (i32, i32, i32, i32);

    fn mnemonic_activate(&self, group_cycling: bool) -> bool;

    fn observe_children(&self) -> Option<gio::ListModel>;

    fn observe_controllers(&self) -> Option<gio::ListModel>;

    fn pick(&self, x: f64, y: f64, flags: PickFlags) -> Option<Widget>;

    fn queue_allocate(&self);

    fn queue_draw(&self);

    fn queue_resize(&self);

    fn realize(&self);

    fn remove_controller<P: IsA<EventController>>(&self, controller: &P);

    fn remove_css_class(&self, css_class: &str);

    fn remove_mnemonic_label<P: IsA<Widget>>(&self, label: &P);

    fn reset_style(&self);

    fn set_can_focus(&self, can_focus: bool);

    fn set_can_target(&self, can_target: bool);

    fn set_child_visible(&self, child_visible: bool);

    fn set_css_classes(&self, classes: &str);

    fn set_cursor(&self, cursor: Option<&gdk::Cursor>);

    fn set_cursor_from_name(&self, name: Option<&str>);

    fn set_direction(&self, dir: TextDirection);

    fn set_focus_child<P: IsA<Widget>>(&self, child: Option<&P>);

    fn set_focus_on_click(&self, focus_on_click: bool);

    fn set_font_map<P: IsA<pango::FontMap>>(&self, font_map: Option<&P>);

    fn set_font_options(&self, options: Option<&cairo::FontOptions>);

    fn set_halign(&self, align: Align);

    fn set_has_tooltip(&self, has_tooltip: bool);

    fn set_hexpand(&self, expand: bool);

    fn set_hexpand_set(&self, set: bool);

    fn set_layout_manager<P: IsA<LayoutManager>>(&self, layout_manager: Option<&P>);

    fn set_margin_bottom(&self, margin: i32);

    fn set_margin_end(&self, margin: i32);

    fn set_margin_start(&self, margin: i32);

    fn set_margin_top(&self, margin: i32);

    fn set_opacity(&self, opacity: f64);

    fn set_overflow(&self, overflow: Overflow);

    fn set_parent<P: IsA<Widget>>(&self, parent: &P);

    fn set_receives_default(&self, receives_default: bool);

    fn set_sensitive(&self, sensitive: bool);

    fn set_size_request(&self, width: i32, height: i32);

    fn set_state_flags(&self, flags: StateFlags, clear: bool);

    fn set_support_multidevice(&self, support_multidevice: bool);

    fn set_tooltip_markup(&self, markup: Option<&str>);

    fn set_tooltip_text(&self, text: Option<&str>);

    fn set_valign(&self, align: Align);

    fn set_vexpand(&self, expand: bool);

    fn set_vexpand_set(&self, set: bool);

    fn set_visible(&self, visible: bool);

    fn should_layout(&self) -> bool;

    fn show(&self);

    fn size_allocate(&self, allocation: &Allocation, baseline: i32);

    fn snapshot_child<P: IsA<Widget>>(&self, child: &P, snapshot: &Snapshot);

    fn translate_coordinates<P: IsA<Widget>>(
        &self,
        dest_widget: &P,
        src_x: i32,
        src_y: i32,
    ) -> Option<(i32, i32)>;

    fn trigger_tooltip_query(&self);

    fn unmap(&self);

    fn unparent(&self);

    fn unrealize(&self);

    fn unset_state_flags(&self, flags: StateFlags);

    fn get_property_has_default(&self) -> bool;

    fn get_property_has_focus(&self) -> bool;

    fn set_property_has_focus(&self, has_focus: bool);

    fn get_property_height_request(&self) -> i32;

    fn set_property_height_request(&self, height_request: i32);

    fn get_property_is_focus(&self) -> bool;

    fn set_property_is_focus(&self, is_focus: bool);

    fn get_property_width_request(&self) -> i32;

    fn set_property_width_request(&self, width_request: i32);

    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_direction_changed<F: Fn(&Self, TextDirection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_grab_notify<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_hide<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_keynav_failed<F: Fn(&Self, DirectionType) -> glib::signal::Inhibit + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_map<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_mnemonic_activate<F: Fn(&Self, bool) -> glib::signal::Inhibit + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_move_focus<F: Fn(&Self, DirectionType) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_move_focus(&self, direction: DirectionType);

    fn connect_query_tooltip<F: Fn(&Self, i32, i32, bool, &Tooltip) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_realize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_size_allocate<F: Fn(&Self, i32, i32, i32) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_state_flags_changed<F: Fn(&Self, StateFlags) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_unmap<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_unrealize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_can_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_can_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_css_classes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cursor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_focus_on_click_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_halign_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_height_request_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_hexpand_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hexpand_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_layout_manager_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_margin_bottom_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_margin_end_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_margin_start_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_margin_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_opacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_overflow_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_receives_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_root_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scale_factor_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_sensitive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tooltip_markup_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_tooltip_text_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_valign_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vexpand_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vexpand_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_width_request_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<Widget>> WidgetExt for O {
    fn action_set_enabled(&self, action_name: &str, enabled: bool) {
        unsafe {
            gtk_sys::gtk_widget_action_set_enabled(
                self.as_ref().to_glib_none().0,
                action_name.to_glib_none().0,
                enabled.to_glib(),
            );
        }
    }

    fn activate(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_widget_activate(self.as_ref().to_glib_none().0)) }
    }

    //fn activate_action(&self, name: &str, format_string: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_widget_activate_action() }
    //}

    fn activate_action_variant(&self, name: &str, args: Option<&glib::Variant>) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_activate_action_variant(
                self.as_ref().to_glib_none().0,
                name.to_glib_none().0,
                args.to_glib_none().0,
            ))
        }
    }

    fn activate_default(&self) {
        unsafe {
            gtk_sys::gtk_widget_activate_default(self.as_ref().to_glib_none().0);
        }
    }

    fn add_controller<P: IsA<EventController>>(&self, controller: &P) {
        unsafe {
            gtk_sys::gtk_widget_add_controller(
                self.as_ref().to_glib_none().0,
                controller.as_ref().to_glib_full(),
            );
        }
    }

    fn add_css_class(&self, css_class: &str) {
        unsafe {
            gtk_sys::gtk_widget_add_css_class(
                self.as_ref().to_glib_none().0,
                css_class.to_glib_none().0,
            );
        }
    }

    fn add_mnemonic_label<P: IsA<Widget>>(&self, label: &P) {
        unsafe {
            gtk_sys::gtk_widget_add_mnemonic_label(
                self.as_ref().to_glib_none().0,
                label.as_ref().to_glib_none().0,
            );
        }
    }

    fn allocate(&self, width: i32, height: i32, baseline: i32, transform: Option<&gsk::Transform>) {
        unsafe {
            gtk_sys::gtk_widget_allocate(
                self.as_ref().to_glib_none().0,
                width,
                height,
                baseline,
                transform.to_glib_full(),
            );
        }
    }

    fn can_activate_accel(&self, signal_id: u32) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_can_activate_accel(
                self.as_ref().to_glib_none().0,
                signal_id,
            ))
        }
    }

    fn child_focus(&self, direction: DirectionType) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_child_focus(
                self.as_ref().to_glib_none().0,
                direction.to_glib(),
            ))
        }
    }

    fn compute_bounds<P: IsA<Widget>>(&self, target: &P) -> Option<graphene::Rect> {
        unsafe {
            let mut out_bounds = graphene::Rect::uninitialized();
            let ret = from_glib(gtk_sys::gtk_widget_compute_bounds(
                self.as_ref().to_glib_none().0,
                target.as_ref().to_glib_none().0,
                out_bounds.to_glib_none_mut().0,
            ));
            if ret {
                Some(out_bounds)
            } else {
                None
            }
        }
    }

    fn compute_expand(&self, orientation: Orientation) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_compute_expand(
                self.as_ref().to_glib_none().0,
                orientation.to_glib(),
            ))
        }
    }

    fn compute_point<P: IsA<Widget>>(
        &self,
        target: &P,
        point: &graphene::Point,
    ) -> Option<graphene::Point> {
        unsafe {
            let mut out_point = graphene::Point::uninitialized();
            let ret = from_glib(gtk_sys::gtk_widget_compute_point(
                self.as_ref().to_glib_none().0,
                target.as_ref().to_glib_none().0,
                point.to_glib_none().0,
                out_point.to_glib_none_mut().0,
            ));
            if ret {
                Some(out_point)
            } else {
                None
            }
        }
    }

    fn compute_transform<P: IsA<Widget>>(&self, target: &P) -> Option<graphene::Matrix> {
        unsafe {
            let mut out_transform = graphene::Matrix::uninitialized();
            let ret = from_glib(gtk_sys::gtk_widget_compute_transform(
                self.as_ref().to_glib_none().0,
                target.as_ref().to_glib_none().0,
                out_transform.to_glib_none_mut().0,
            ));
            if ret {
                Some(out_transform)
            } else {
                None
            }
        }
    }

    fn contains(&self, x: f64, y: f64) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_contains(
                self.as_ref().to_glib_none().0,
                x,
                y,
            ))
        }
    }

    fn create_pango_context(&self) -> Option<pango::Context> {
        unsafe {
            from_glib_full(gtk_sys::gtk_widget_create_pango_context(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn create_pango_layout(&self, text: Option<&str>) -> Option<pango::Layout> {
        unsafe {
            from_glib_full(gtk_sys::gtk_widget_create_pango_layout(
                self.as_ref().to_glib_none().0,
                text.to_glib_none().0,
            ))
        }
    }

    fn destroy(&self) {
        unsafe {
            gtk_sys::gtk_widget_destroy(self.as_ref().to_glib_none().0);
        }
    }

    //fn destroyed<P: IsA<Widget>>(&self, widget_pointer: &P) {
    //    unsafe { TODO: call gtk_sys:gtk_widget_destroyed() }
    //}

    fn device_is_shadowed(&self, device: &gdk::Device) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_device_is_shadowed(
                self.as_ref().to_glib_none().0,
                device.to_glib_none().0,
            ))
        }
    }

    fn drag_check_threshold(
        &self,
        start_x: i32,
        start_y: i32,
        current_x: i32,
        current_y: i32,
    ) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_drag_check_threshold(
                self.as_ref().to_glib_none().0,
                start_x,
                start_y,
                current_x,
                current_y,
            ))
        }
    }

    fn error_bell(&self) {
        unsafe {
            gtk_sys::gtk_widget_error_bell(self.as_ref().to_glib_none().0);
        }
    }

    fn get_accessible(&self) -> Option<atk::Object> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_accessible(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_allocated_baseline(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_allocated_baseline(self.as_ref().to_glib_none().0) }
    }

    fn get_allocated_height(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_allocated_height(self.as_ref().to_glib_none().0) }
    }

    fn get_allocated_width(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_allocated_width(self.as_ref().to_glib_none().0) }
    }

    fn get_allocation(&self) -> Allocation {
        unsafe {
            let mut allocation = Allocation::uninitialized();
            gtk_sys::gtk_widget_get_allocation(
                self.as_ref().to_glib_none().0,
                allocation.to_glib_none_mut().0,
            );
            allocation
        }
    }

    fn get_ancestor(&self, widget_type: glib::types::Type) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_ancestor(
                self.as_ref().to_glib_none().0,
                widget_type.to_glib(),
            ))
        }
    }

    fn get_can_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_can_focus(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_can_target(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_can_target(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_child_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_child_visible(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_clipboard(&self) -> gdk::Clipboard {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_clipboard(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_css_classes(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_sys::gtk_widget_get_css_classes(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_css_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_css_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_cursor(&self) -> Option<gdk::Cursor> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_cursor(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_direction(&self) -> TextDirection {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_direction(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_display(&self) -> Option<gdk::Display> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_display(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_first_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_first_child(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_focus_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_focus_child(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_focus_on_click(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_focus_on_click(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_font_map(&self) -> Option<pango::FontMap> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_font_map(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_font_options(&self) -> Option<cairo::FontOptions> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_font_options(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_frame_clock(&self) -> Option<gdk::FrameClock> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_frame_clock(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_halign(&self) -> Align {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_halign(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_has_tooltip(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_has_tooltip(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_height(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_height(self.as_ref().to_glib_none().0) }
    }

    fn get_hexpand(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_hexpand(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_hexpand_set(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_hexpand_set(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_last_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_last_child(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_layout_manager(&self) -> Option<LayoutManager> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_layout_manager(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_mapped(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_mapped(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_margin_bottom(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_margin_bottom(self.as_ref().to_glib_none().0) }
    }

    fn get_margin_end(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_margin_end(self.as_ref().to_glib_none().0) }
    }

    fn get_margin_start(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_margin_start(self.as_ref().to_glib_none().0) }
    }

    fn get_margin_top(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_margin_top(self.as_ref().to_glib_none().0) }
    }

    fn get_modifier_mask(&self, intent: gdk::ModifierIntent) -> gdk::ModifierType {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_modifier_mask(
                self.as_ref().to_glib_none().0,
                intent.to_glib(),
            ))
        }
    }

    //fn get_native(&self) -> /*Ignored*/Option<Native> {
    //    unsafe { TODO: call gtk_sys:gtk_widget_get_native() }
    //}

    fn get_next_sibling(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_next_sibling(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_opacity(&self) -> f64 {
        unsafe { gtk_sys::gtk_widget_get_opacity(self.as_ref().to_glib_none().0) }
    }

    fn get_overflow(&self) -> Overflow {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_overflow(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_pango_context(&self) -> Option<pango::Context> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_pango_context(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_parent(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_parent(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_preferred_size(&self) -> (Requisition, Requisition) {
        unsafe {
            let mut minimum_size = Requisition::uninitialized();
            let mut natural_size = Requisition::uninitialized();
            gtk_sys::gtk_widget_get_preferred_size(
                self.as_ref().to_glib_none().0,
                minimum_size.to_glib_none_mut().0,
                natural_size.to_glib_none_mut().0,
            );
            (minimum_size, natural_size)
        }
    }

    fn get_prev_sibling(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_prev_sibling(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_primary_clipboard(&self) -> Option<gdk::Clipboard> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_primary_clipboard(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_realized(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_realized(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_receives_default(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_receives_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_request_mode(&self) -> SizeRequestMode {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_request_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_root(&self) -> Option<Root> {
        unsafe { from_glib_none(gtk_sys::gtk_widget_get_root(self.as_ref().to_glib_none().0)) }
    }

    fn get_scale_factor(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_scale_factor(self.as_ref().to_glib_none().0) }
    }

    fn get_sensitive(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_sensitive(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_settings(&self) -> Option<Settings> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_settings(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_size_request(&self) -> (i32, i32) {
        unsafe {
            let mut width = mem::MaybeUninit::uninit();
            let mut height = mem::MaybeUninit::uninit();
            gtk_sys::gtk_widget_get_size_request(
                self.as_ref().to_glib_none().0,
                width.as_mut_ptr(),
                height.as_mut_ptr(),
            );
            let width = width.assume_init();
            let height = height.assume_init();
            (width, height)
        }
    }

    fn get_state_flags(&self) -> StateFlags {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_state_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_style_context(&self) -> StyleContext {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_style_context(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_support_multidevice(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_support_multidevice(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_template_child(
        &self,
        widget_type: glib::types::Type,
        name: &str,
    ) -> Option<glib::Object> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_get_template_child(
                self.as_ref().to_glib_none().0,
                widget_type.to_glib(),
                name.to_glib_none().0,
            ))
        }
    }

    fn get_tooltip_markup(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_widget_get_tooltip_markup(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_tooltip_text(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_widget_get_tooltip_text(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_valign(&self) -> Align {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_valign(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_vexpand(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_vexpand(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_vexpand_set(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_vexpand_set(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_get_visible(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_width(&self) -> i32 {
        unsafe { gtk_sys::gtk_widget_get_width(self.as_ref().to_glib_none().0) }
    }

    fn grab_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_grab_focus(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn has_css_class(&self, css_class: &str) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_has_css_class(
                self.as_ref().to_glib_none().0,
                css_class.to_glib_none().0,
            ))
        }
    }

    fn has_default(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_has_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn has_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_has_focus(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn has_grab(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_widget_has_grab(self.as_ref().to_glib_none().0)) }
    }

    fn has_visible_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_has_visible_focus(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn hide(&self) {
        unsafe {
            gtk_sys::gtk_widget_hide(self.as_ref().to_glib_none().0);
        }
    }

    fn in_destruction(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_in_destruction(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn init_template(&self) {
        unsafe {
            gtk_sys::gtk_widget_init_template(self.as_ref().to_glib_none().0);
        }
    }

    fn insert_action_group<P: IsA<gio::ActionGroup>>(&self, name: &str, group: Option<&P>) {
        unsafe {
            gtk_sys::gtk_widget_insert_action_group(
                self.as_ref().to_glib_none().0,
                name.to_glib_none().0,
                group.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn insert_after<P: IsA<Widget>, Q: IsA<Widget>>(
        &self,
        parent: &P,
        previous_sibling: Option<&Q>,
    ) {
        unsafe {
            gtk_sys::gtk_widget_insert_after(
                self.as_ref().to_glib_none().0,
                parent.as_ref().to_glib_none().0,
                previous_sibling.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn insert_before<P: IsA<Widget>, Q: IsA<Widget>>(&self, parent: &P, next_sibling: Option<&Q>) {
        unsafe {
            gtk_sys::gtk_widget_insert_before(
                self.as_ref().to_glib_none().0,
                parent.as_ref().to_glib_none().0,
                next_sibling.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn is_ancestor<P: IsA<Widget>>(&self, ancestor: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_is_ancestor(
                self.as_ref().to_glib_none().0,
                ancestor.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_drawable(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_is_drawable(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_focus(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_widget_is_focus(self.as_ref().to_glib_none().0)) }
    }

    fn is_sensitive(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_is_sensitive(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_is_visible(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn keynav_failed(&self, direction: DirectionType) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_keynav_failed(
                self.as_ref().to_glib_none().0,
                direction.to_glib(),
            ))
        }
    }

    fn list_mnemonic_labels(&self) -> Vec<Widget> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(gtk_sys::gtk_widget_list_mnemonic_labels(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn map(&self) {
        unsafe {
            gtk_sys::gtk_widget_map(self.as_ref().to_glib_none().0);
        }
    }

    fn measure(&self, orientation: Orientation, for_size: i32) -> (i32, i32, i32, i32) {
        unsafe {
            let mut minimum = mem::MaybeUninit::uninit();
            let mut natural = mem::MaybeUninit::uninit();
            let mut minimum_baseline = mem::MaybeUninit::uninit();
            let mut natural_baseline = mem::MaybeUninit::uninit();
            gtk_sys::gtk_widget_measure(
                self.as_ref().to_glib_none().0,
                orientation.to_glib(),
                for_size,
                minimum.as_mut_ptr(),
                natural.as_mut_ptr(),
                minimum_baseline.as_mut_ptr(),
                natural_baseline.as_mut_ptr(),
            );
            let minimum = minimum.assume_init();
            let natural = natural.assume_init();
            let minimum_baseline = minimum_baseline.assume_init();
            let natural_baseline = natural_baseline.assume_init();
            (minimum, natural, minimum_baseline, natural_baseline)
        }
    }

    fn mnemonic_activate(&self, group_cycling: bool) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_mnemonic_activate(
                self.as_ref().to_glib_none().0,
                group_cycling.to_glib(),
            ))
        }
    }

    fn observe_children(&self) -> Option<gio::ListModel> {
        unsafe {
            from_glib_full(gtk_sys::gtk_widget_observe_children(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn observe_controllers(&self) -> Option<gio::ListModel> {
        unsafe {
            from_glib_full(gtk_sys::gtk_widget_observe_controllers(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn pick(&self, x: f64, y: f64, flags: PickFlags) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_widget_pick(
                self.as_ref().to_glib_none().0,
                x,
                y,
                flags.to_glib(),
            ))
        }
    }

    fn queue_allocate(&self) {
        unsafe {
            gtk_sys::gtk_widget_queue_allocate(self.as_ref().to_glib_none().0);
        }
    }

    fn queue_draw(&self) {
        unsafe {
            gtk_sys::gtk_widget_queue_draw(self.as_ref().to_glib_none().0);
        }
    }

    fn queue_resize(&self) {
        unsafe {
            gtk_sys::gtk_widget_queue_resize(self.as_ref().to_glib_none().0);
        }
    }

    fn realize(&self) {
        unsafe {
            gtk_sys::gtk_widget_realize(self.as_ref().to_glib_none().0);
        }
    }

    fn remove_controller<P: IsA<EventController>>(&self, controller: &P) {
        unsafe {
            gtk_sys::gtk_widget_remove_controller(
                self.as_ref().to_glib_none().0,
                controller.as_ref().to_glib_none().0,
            );
        }
    }

    fn remove_css_class(&self, css_class: &str) {
        unsafe {
            gtk_sys::gtk_widget_remove_css_class(
                self.as_ref().to_glib_none().0,
                css_class.to_glib_none().0,
            );
        }
    }

    fn remove_mnemonic_label<P: IsA<Widget>>(&self, label: &P) {
        unsafe {
            gtk_sys::gtk_widget_remove_mnemonic_label(
                self.as_ref().to_glib_none().0,
                label.as_ref().to_glib_none().0,
            );
        }
    }

    fn reset_style(&self) {
        unsafe {
            gtk_sys::gtk_widget_reset_style(self.as_ref().to_glib_none().0);
        }
    }

    fn set_can_focus(&self, can_focus: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_can_focus(self.as_ref().to_glib_none().0, can_focus.to_glib());
        }
    }

    fn set_can_target(&self, can_target: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_can_target(
                self.as_ref().to_glib_none().0,
                can_target.to_glib(),
            );
        }
    }

    fn set_child_visible(&self, child_visible: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_child_visible(
                self.as_ref().to_glib_none().0,
                child_visible.to_glib(),
            );
        }
    }

    fn set_css_classes(&self, classes: &str) {
        unsafe {
            gtk_sys::gtk_widget_set_css_classes(
                self.as_ref().to_glib_none().0,
                classes.to_glib_none().0,
            );
        }
    }

    fn set_cursor(&self, cursor: Option<&gdk::Cursor>) {
        unsafe {
            gtk_sys::gtk_widget_set_cursor(self.as_ref().to_glib_none().0, cursor.to_glib_none().0);
        }
    }

    fn set_cursor_from_name(&self, name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_widget_set_cursor_from_name(
                self.as_ref().to_glib_none().0,
                name.to_glib_none().0,
            );
        }
    }

    fn set_direction(&self, dir: TextDirection) {
        unsafe {
            gtk_sys::gtk_widget_set_direction(self.as_ref().to_glib_none().0, dir.to_glib());
        }
    }

    fn set_focus_child<P: IsA<Widget>>(&self, child: Option<&P>) {
        unsafe {
            gtk_sys::gtk_widget_set_focus_child(
                self.as_ref().to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_focus_on_click(&self, focus_on_click: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_focus_on_click(
                self.as_ref().to_glib_none().0,
                focus_on_click.to_glib(),
            );
        }
    }

    fn set_font_map<P: IsA<pango::FontMap>>(&self, font_map: Option<&P>) {
        unsafe {
            gtk_sys::gtk_widget_set_font_map(
                self.as_ref().to_glib_none().0,
                font_map.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_font_options(&self, options: Option<&cairo::FontOptions>) {
        unsafe {
            gtk_sys::gtk_widget_set_font_options(
                self.as_ref().to_glib_none().0,
                options.to_glib_none().0,
            );
        }
    }

    fn set_halign(&self, align: Align) {
        unsafe {
            gtk_sys::gtk_widget_set_halign(self.as_ref().to_glib_none().0, align.to_glib());
        }
    }

    fn set_has_tooltip(&self, has_tooltip: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_has_tooltip(
                self.as_ref().to_glib_none().0,
                has_tooltip.to_glib(),
            );
        }
    }

    fn set_hexpand(&self, expand: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_hexpand(self.as_ref().to_glib_none().0, expand.to_glib());
        }
    }

    fn set_hexpand_set(&self, set: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_hexpand_set(self.as_ref().to_glib_none().0, set.to_glib());
        }
    }

    fn set_layout_manager<P: IsA<LayoutManager>>(&self, layout_manager: Option<&P>) {
        unsafe {
            gtk_sys::gtk_widget_set_layout_manager(
                self.as_ref().to_glib_none().0,
                layout_manager.map(|p| p.as_ref()).to_glib_full(),
            );
        }
    }

    fn set_margin_bottom(&self, margin: i32) {
        unsafe {
            gtk_sys::gtk_widget_set_margin_bottom(self.as_ref().to_glib_none().0, margin);
        }
    }

    fn set_margin_end(&self, margin: i32) {
        unsafe {
            gtk_sys::gtk_widget_set_margin_end(self.as_ref().to_glib_none().0, margin);
        }
    }

    fn set_margin_start(&self, margin: i32) {
        unsafe {
            gtk_sys::gtk_widget_set_margin_start(self.as_ref().to_glib_none().0, margin);
        }
    }

    fn set_margin_top(&self, margin: i32) {
        unsafe {
            gtk_sys::gtk_widget_set_margin_top(self.as_ref().to_glib_none().0, margin);
        }
    }

    fn set_opacity(&self, opacity: f64) {
        unsafe {
            gtk_sys::gtk_widget_set_opacity(self.as_ref().to_glib_none().0, opacity);
        }
    }

    fn set_overflow(&self, overflow: Overflow) {
        unsafe {
            gtk_sys::gtk_widget_set_overflow(self.as_ref().to_glib_none().0, overflow.to_glib());
        }
    }

    fn set_parent<P: IsA<Widget>>(&self, parent: &P) {
        unsafe {
            gtk_sys::gtk_widget_set_parent(
                self.as_ref().to_glib_none().0,
                parent.as_ref().to_glib_none().0,
            );
        }
    }

    fn set_receives_default(&self, receives_default: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_receives_default(
                self.as_ref().to_glib_none().0,
                receives_default.to_glib(),
            );
        }
    }

    fn set_sensitive(&self, sensitive: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_sensitive(self.as_ref().to_glib_none().0, sensitive.to_glib());
        }
    }

    fn set_size_request(&self, width: i32, height: i32) {
        unsafe {
            gtk_sys::gtk_widget_set_size_request(self.as_ref().to_glib_none().0, width, height);
        }
    }

    fn set_state_flags(&self, flags: StateFlags, clear: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_state_flags(
                self.as_ref().to_glib_none().0,
                flags.to_glib(),
                clear.to_glib(),
            );
        }
    }

    fn set_support_multidevice(&self, support_multidevice: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_support_multidevice(
                self.as_ref().to_glib_none().0,
                support_multidevice.to_glib(),
            );
        }
    }

    fn set_tooltip_markup(&self, markup: Option<&str>) {
        unsafe {
            gtk_sys::gtk_widget_set_tooltip_markup(
                self.as_ref().to_glib_none().0,
                markup.to_glib_none().0,
            );
        }
    }

    fn set_tooltip_text(&self, text: Option<&str>) {
        unsafe {
            gtk_sys::gtk_widget_set_tooltip_text(
                self.as_ref().to_glib_none().0,
                text.to_glib_none().0,
            );
        }
    }

    fn set_valign(&self, align: Align) {
        unsafe {
            gtk_sys::gtk_widget_set_valign(self.as_ref().to_glib_none().0, align.to_glib());
        }
    }

    fn set_vexpand(&self, expand: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_vexpand(self.as_ref().to_glib_none().0, expand.to_glib());
        }
    }

    fn set_vexpand_set(&self, set: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_vexpand_set(self.as_ref().to_glib_none().0, set.to_glib());
        }
    }

    fn set_visible(&self, visible: bool) {
        unsafe {
            gtk_sys::gtk_widget_set_visible(self.as_ref().to_glib_none().0, visible.to_glib());
        }
    }

    fn should_layout(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_widget_should_layout(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn show(&self) {
        unsafe {
            gtk_sys::gtk_widget_show(self.as_ref().to_glib_none().0);
        }
    }

    fn size_allocate(&self, allocation: &Allocation, baseline: i32) {
        unsafe {
            gtk_sys::gtk_widget_size_allocate(
                self.as_ref().to_glib_none().0,
                allocation.to_glib_none().0,
                baseline,
            );
        }
    }

    fn snapshot_child<P: IsA<Widget>>(&self, child: &P, snapshot: &Snapshot) {
        unsafe {
            gtk_sys::gtk_widget_snapshot_child(
                self.as_ref().to_glib_none().0,
                child.as_ref().to_glib_none().0,
                snapshot.to_glib_none().0,
            );
        }
    }

    fn translate_coordinates<P: IsA<Widget>>(
        &self,
        dest_widget: &P,
        src_x: i32,
        src_y: i32,
    ) -> Option<(i32, i32)> {
        unsafe {
            let mut dest_x = mem::MaybeUninit::uninit();
            let mut dest_y = mem::MaybeUninit::uninit();
            let ret = from_glib(gtk_sys::gtk_widget_translate_coordinates(
                self.as_ref().to_glib_none().0,
                dest_widget.as_ref().to_glib_none().0,
                src_x,
                src_y,
                dest_x.as_mut_ptr(),
                dest_y.as_mut_ptr(),
            ));
            let dest_x = dest_x.assume_init();
            let dest_y = dest_y.assume_init();
            if ret {
                Some((dest_x, dest_y))
            } else {
                None
            }
        }
    }

    fn trigger_tooltip_query(&self) {
        unsafe {
            gtk_sys::gtk_widget_trigger_tooltip_query(self.as_ref().to_glib_none().0);
        }
    }

    fn unmap(&self) {
        unsafe {
            gtk_sys::gtk_widget_unmap(self.as_ref().to_glib_none().0);
        }
    }

    fn unparent(&self) {
        unsafe {
            gtk_sys::gtk_widget_unparent(self.as_ref().to_glib_none().0);
        }
    }

    fn unrealize(&self) {
        unsafe {
            gtk_sys::gtk_widget_unrealize(self.as_ref().to_glib_none().0);
        }
    }

    fn unset_state_flags(&self, flags: StateFlags) {
        unsafe {
            gtk_sys::gtk_widget_unset_state_flags(self.as_ref().to_glib_none().0, flags.to_glib());
        }
    }

    fn get_property_has_default(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"has-default\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `has-default` getter")
                .unwrap()
        }
    }

    fn get_property_has_focus(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"has-focus\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `has-focus` getter")
                .unwrap()
        }
    }

    fn set_property_has_focus(&self, has_focus: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"has-focus\0".as_ptr() as *const _,
                Value::from(&has_focus).to_glib_none().0,
            );
        }
    }

    fn get_property_height_request(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"height-request\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `height-request` getter")
                .unwrap()
        }
    }

    fn set_property_height_request(&self, height_request: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"height-request\0".as_ptr() as *const _,
                Value::from(&height_request).to_glib_none().0,
            );
        }
    }

    fn get_property_is_focus(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"is-focus\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `is-focus` getter")
                .unwrap()
        }
    }

    fn set_property_is_focus(&self, is_focus: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"is-focus\0".as_ptr() as *const _,
                Value::from(&is_focus).to_glib_none().0,
            );
        }
    }

    fn get_property_width_request(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"width-request\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `width-request` getter")
                .unwrap()
        }
    }

    fn set_property_width_request(&self, width_request: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"width-request\0".as_ptr() as *const _,
                Value::from(&width_request).to_glib_none().0,
            );
        }
    }

    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn destroy_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"destroy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    destroy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_direction_changed<F: Fn(&Self, TextDirection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn direction_changed_trampoline<P, F: Fn(&P, TextDirection) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            previous_direction: gtk_sys::GtkTextDirection,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(previous_direction),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"direction-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    direction_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_grab_notify<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn grab_notify_trampoline<P, F: Fn(&P, bool) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            was_grabbed: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(was_grabbed),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"grab-notify\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    grab_notify_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_hide<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"hide\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    hide_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_keynav_failed<F: Fn(&Self, DirectionType) -> glib::signal::Inhibit + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn keynav_failed_trampoline<
            P,
            F: Fn(&P, DirectionType) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkWidget,
            direction: gtk_sys::GtkDirectionType,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean
        where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(direction),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"keynav-failed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    keynav_failed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_map<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn map_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"map\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    map_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_mnemonic_activate<F: Fn(&Self, bool) -> glib::signal::Inhibit + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn mnemonic_activate_trampoline<
            P,
            F: Fn(&P, bool) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkWidget,
            group_cycling: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean
        where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(group_cycling),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"mnemonic-activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    mnemonic_activate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_move_focus<F: Fn(&Self, DirectionType) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn move_focus_trampoline<P, F: Fn(&P, DirectionType) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            direction: gtk_sys::GtkDirectionType,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(direction),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"move-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    move_focus_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_move_focus(&self, direction: DirectionType) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("move-focus", &[&direction])
                .unwrap()
        };
    }

    fn connect_query_tooltip<F: Fn(&Self, i32, i32, bool, &Tooltip) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn query_tooltip_trampoline<
            P,
            F: Fn(&P, i32, i32, bool, &Tooltip) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkWidget,
            x: libc::c_int,
            y: libc::c_int,
            keyboard_mode: glib_sys::gboolean,
            tooltip: *mut gtk_sys::GtkTooltip,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean
        where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                x,
                y,
                from_glib(keyboard_mode),
                &from_glib_borrow(tooltip),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"query-tooltip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    query_tooltip_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_realize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn realize_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"realize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    realize_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    show_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_size_allocate<F: Fn(&Self, i32, i32, i32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn size_allocate_trampoline<P, F: Fn(&P, i32, i32, i32) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            width: libc::c_int,
            height: libc::c_int,
            baseline: libc::c_int,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                width,
                height,
                baseline,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"size-allocate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    size_allocate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_state_flags_changed<F: Fn(&Self, StateFlags) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn state_flags_changed_trampoline<P, F: Fn(&P, StateFlags) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            flags: gtk_sys::GtkStateFlags,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Widget::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(flags),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"state-flags-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    state_flags_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_unmap<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn unmap_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"unmap\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    unmap_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_unrealize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn unrealize_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"unrealize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    unrealize_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_can_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_focus_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_focus_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_can_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_target_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-target\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_target_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_css_classes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_css_classes_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::css-classes\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_css_classes_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_cursor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cursor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cursor_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_focus_on_click_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_focus_on_click_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::focus-on-click\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_focus_on_click_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_halign_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_halign_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::halign\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_halign_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_has_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_default_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_default_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_has_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_focus_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_focus_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_has_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_tooltip_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-tooltip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_tooltip_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_height_request_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_request_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::height-request\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_height_request_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_hexpand_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hexpand_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hexpand\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hexpand_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_hexpand_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hexpand_set_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hexpand-set\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hexpand_set_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_is_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_focus_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_is_focus_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_layout_manager_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_layout_manager_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::layout-manager\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_layout_manager_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_margin_bottom_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_margin_bottom_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::margin-bottom\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_margin_bottom_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_margin_end_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_margin_end_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::margin-end\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_margin_end_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_margin_start_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_margin_start_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::margin-start\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_margin_start_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_margin_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_margin_top_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::margin-top\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_margin_top_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_opacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_opacity_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::opacity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_opacity_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_overflow_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_overflow_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::overflow\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_overflow_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_receives_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_receives_default_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::receives-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_receives_default_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_root_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_root_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::root\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_root_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_scale_factor_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_scale_factor_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scale-factor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scale_factor_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_sensitive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sensitive_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sensitive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sensitive_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_tooltip_markup_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_markup_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tooltip-markup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tooltip_markup_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_tooltip_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_text_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tooltip-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tooltip_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_valign_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_valign_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::valign\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_valign_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_vexpand_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vexpand_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vexpand\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vexpand_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_vexpand_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vexpand_set_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vexpand-set\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vexpand_set_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_visible_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_width_request_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_request_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Widget>,
        {
            let f: &F = &*(f as *const F);
            f(&Widget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::width-request\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_width_request_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Widget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Widget")
    }
}
