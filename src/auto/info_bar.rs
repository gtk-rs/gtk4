// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use Button;
use Container;
use MessageType;
use ResponseType;
use Widget;

glib_wrapper! {
    pub struct InfoBar(Object<gtk_sys::GtkInfoBar, InfoBarClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_info_bar_get_type(),
    }
}

impl InfoBar {
    pub fn new() -> InfoBar {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_info_bar_new()).unsafe_cast() }
    }

    //pub fn with_buttons(first_button_text: Option<&str>, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> InfoBar {
    //    unsafe { TODO: call gtk_sys:gtk_info_bar_new_with_buttons() }
    //}

    pub fn add_action_widget<P: IsA<Widget>>(&self, child: &P, response_id: ResponseType) {
        unsafe {
            gtk_sys::gtk_info_bar_add_action_widget(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                response_id.to_glib(),
            );
        }
    }

    pub fn add_button(&self, button_text: &str, response_id: ResponseType) -> Option<Button> {
        unsafe {
            from_glib_none(gtk_sys::gtk_info_bar_add_button(
                self.to_glib_none().0,
                button_text.to_glib_none().0,
                response_id.to_glib(),
            ))
        }
    }

    //pub fn add_buttons(&self, first_button_text: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call gtk_sys:gtk_info_bar_add_buttons() }
    //}

    pub fn get_message_type(&self) -> MessageType {
        unsafe {
            from_glib(gtk_sys::gtk_info_bar_get_message_type(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_revealed(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_info_bar_get_revealed(self.to_glib_none().0)) }
    }

    pub fn get_show_close_button(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_info_bar_get_show_close_button(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn response(&self, response_id: ResponseType) {
        unsafe {
            gtk_sys::gtk_info_bar_response(self.to_glib_none().0, response_id.to_glib());
        }
    }

    pub fn set_default_response(&self, response_id: ResponseType) {
        unsafe {
            gtk_sys::gtk_info_bar_set_default_response(
                self.to_glib_none().0,
                response_id.to_glib(),
            );
        }
    }

    pub fn set_message_type(&self, message_type: MessageType) {
        unsafe {
            gtk_sys::gtk_info_bar_set_message_type(self.to_glib_none().0, message_type.to_glib());
        }
    }

    pub fn set_response_sensitive(&self, response_id: ResponseType, setting: bool) {
        unsafe {
            gtk_sys::gtk_info_bar_set_response_sensitive(
                self.to_glib_none().0,
                response_id.to_glib(),
                setting.to_glib(),
            );
        }
    }

    pub fn set_revealed(&self, revealed: bool) {
        unsafe {
            gtk_sys::gtk_info_bar_set_revealed(self.to_glib_none().0, revealed.to_glib());
        }
    }

    pub fn set_show_close_button(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_info_bar_set_show_close_button(self.to_glib_none().0, setting.to_glib());
        }
    }

    pub fn connect_close<F: Fn(&InfoBar) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn close_trampoline<F: Fn(&InfoBar) + 'static>(
            this: *mut gtk_sys::GtkInfoBar,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"close\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    close_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_close(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("close", &[])
                .unwrap()
        };
    }

    pub fn connect_response<F: Fn(&InfoBar, ResponseType) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn response_trampoline<F: Fn(&InfoBar, ResponseType) + 'static>(
            this: *mut gtk_sys::GtkInfoBar,
            response_id: gtk_sys::GtkResponseType,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(response_id))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"response\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    response_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_message_type_notify<F: Fn(&InfoBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_message_type_trampoline<F: Fn(&InfoBar) + 'static>(
            this: *mut gtk_sys::GtkInfoBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::message-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_message_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_revealed_notify<F: Fn(&InfoBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_revealed_trampoline<F: Fn(&InfoBar) + 'static>(
            this: *mut gtk_sys::GtkInfoBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::revealed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_revealed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_close_button_notify<F: Fn(&InfoBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_close_button_trampoline<F: Fn(&InfoBar) + 'static>(
            this: *mut gtk_sys::GtkInfoBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-close-button\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_close_button_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for InfoBar {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for InfoBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InfoBar")
    }
}
