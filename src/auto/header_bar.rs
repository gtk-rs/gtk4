// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use Container;
use Widget;

glib_wrapper! {
    pub struct HeaderBar(Object<gtk_sys::GtkHeaderBar, HeaderBarClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_header_bar_get_type(),
    }
}

impl HeaderBar {
    pub fn new() -> HeaderBar {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_header_bar_new()).unsafe_cast() }
    }

    pub fn get_custom_title(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_header_bar_get_custom_title(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_decoration_layout(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_header_bar_get_decoration_layout(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_has_subtitle(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_header_bar_get_has_subtitle(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_title_buttons(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_header_bar_get_show_title_buttons(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_subtitle(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_header_bar_get_subtitle(self.to_glib_none().0)) }
    }

    pub fn get_title(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_header_bar_get_title(self.to_glib_none().0)) }
    }

    pub fn pack_end<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_header_bar_pack_end(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn pack_start<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_header_bar_pack_start(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn set_custom_title<P: IsA<Widget>>(&self, title_widget: Option<&P>) {
        unsafe {
            gtk_sys::gtk_header_bar_set_custom_title(
                self.to_glib_none().0,
                title_widget.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_decoration_layout(&self, layout: Option<&str>) {
        unsafe {
            gtk_sys::gtk_header_bar_set_decoration_layout(
                self.to_glib_none().0,
                layout.to_glib_none().0,
            );
        }
    }

    pub fn set_has_subtitle(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_header_bar_set_has_subtitle(self.to_glib_none().0, setting.to_glib());
        }
    }

    pub fn set_show_title_buttons(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_header_bar_set_show_title_buttons(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn set_subtitle(&self, subtitle: Option<&str>) {
        unsafe {
            gtk_sys::gtk_header_bar_set_subtitle(self.to_glib_none().0, subtitle.to_glib_none().0);
        }
    }

    pub fn set_title(&self, title: Option<&str>) {
        unsafe {
            gtk_sys::gtk_header_bar_set_title(self.to_glib_none().0, title.to_glib_none().0);
        }
    }

    pub fn get_property_decoration_layout_set(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"decoration-layout-set\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `decoration-layout-set` getter")
                .unwrap()
        }
    }

    pub fn set_property_decoration_layout_set(&self, decoration_layout_set: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"decoration-layout-set\0".as_ptr() as *const _,
                Value::from(&decoration_layout_set).to_glib_none().0,
            );
        }
    }

    pub fn connect_property_custom_title_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_custom_title_trampoline<F: Fn(&HeaderBar) + 'static>(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::custom-title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_custom_title_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_decoration_layout_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_decoration_layout_trampoline<F: Fn(&HeaderBar) + 'static>(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::decoration-layout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_decoration_layout_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_decoration_layout_set_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_decoration_layout_set_trampoline<
            F: Fn(&HeaderBar) + 'static,
        >(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::decoration-layout-set\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_decoration_layout_set_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_has_subtitle_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_subtitle_trampoline<F: Fn(&HeaderBar) + 'static>(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-subtitle\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_subtitle_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_title_buttons_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_title_buttons_trampoline<F: Fn(&HeaderBar) + 'static>(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-title-buttons\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_title_buttons_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_subtitle_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_subtitle_trampoline<F: Fn(&HeaderBar) + 'static>(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::subtitle\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_subtitle_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_title_notify<F: Fn(&HeaderBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<F: Fn(&HeaderBar) + 'static>(
            this: *mut gtk_sys::GtkHeaderBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_title_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for HeaderBar {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for HeaderBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "HeaderBar")
    }
}
