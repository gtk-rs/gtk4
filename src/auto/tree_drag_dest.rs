// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct TreeDragDest(Interface<gtk_sys::GtkTreeDragDest>);

    match fn {
        get_type => || gtk_sys::gtk_tree_drag_dest_get_type(),
    }
}

pub const NONE_TREE_DRAG_DEST: Option<&TreeDragDest> = None;

pub trait TreeDragDestExt: 'static {
    //fn drag_data_received(&self, dest: &mut TreePath, value: /*Ignored*/&glib::Value) -> bool;

    //fn row_drop_possible(&self, dest_path: &mut TreePath, value: /*Ignored*/&glib::Value) -> bool;
}

impl<O: IsA<TreeDragDest>> TreeDragDestExt for O {
    //fn drag_data_received(&self, dest: &mut TreePath, value: /*Ignored*/&glib::Value) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_tree_drag_dest_drag_data_received() }
    //}

    //fn row_drop_possible(&self, dest_path: &mut TreePath, value: /*Ignored*/&glib::Value) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_tree_drag_dest_row_drop_possible() }
    //}
}

impl fmt::Display for TreeDragDest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TreeDragDest")
    }
}
