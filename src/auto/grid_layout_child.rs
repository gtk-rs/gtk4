// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use LayoutChild;

glib_wrapper! {
    pub struct GridLayoutChild(Object<gtk_sys::GtkGridLayoutChild, gtk_sys::GtkGridLayoutChildClass, GridLayoutChildClass>) @extends LayoutChild;

    match fn {
        get_type => || gtk_sys::gtk_grid_layout_child_get_type(),
    }
}

pub const NONE_GRID_LAYOUT_CHILD: Option<&GridLayoutChild> = None;

pub trait GridLayoutChildExt: 'static {
    fn get_column_span(&self) -> i32;

    fn get_left_attach(&self) -> i32;

    fn get_row_span(&self) -> i32;

    fn get_top_attach(&self) -> i32;

    fn set_column_span(&self, span: i32);

    fn set_left_attach(&self, attach: i32);

    fn set_row_span(&self, span: i32);

    fn set_top_attach(&self, attach: i32);

    fn connect_property_column_span_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_left_attach_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_row_span_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_top_attach_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<GridLayoutChild>> GridLayoutChildExt for O {
    fn get_column_span(&self) -> i32 {
        unsafe { gtk_sys::gtk_grid_layout_child_get_column_span(self.as_ref().to_glib_none().0) }
    }

    fn get_left_attach(&self) -> i32 {
        unsafe { gtk_sys::gtk_grid_layout_child_get_left_attach(self.as_ref().to_glib_none().0) }
    }

    fn get_row_span(&self) -> i32 {
        unsafe { gtk_sys::gtk_grid_layout_child_get_row_span(self.as_ref().to_glib_none().0) }
    }

    fn get_top_attach(&self) -> i32 {
        unsafe { gtk_sys::gtk_grid_layout_child_get_top_attach(self.as_ref().to_glib_none().0) }
    }

    fn set_column_span(&self, span: i32) {
        unsafe {
            gtk_sys::gtk_grid_layout_child_set_column_span(self.as_ref().to_glib_none().0, span);
        }
    }

    fn set_left_attach(&self, attach: i32) {
        unsafe {
            gtk_sys::gtk_grid_layout_child_set_left_attach(self.as_ref().to_glib_none().0, attach);
        }
    }

    fn set_row_span(&self, span: i32) {
        unsafe {
            gtk_sys::gtk_grid_layout_child_set_row_span(self.as_ref().to_glib_none().0, span);
        }
    }

    fn set_top_attach(&self, attach: i32) {
        unsafe {
            gtk_sys::gtk_grid_layout_child_set_top_attach(self.as_ref().to_glib_none().0, attach);
        }
    }

    fn connect_property_column_span_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_column_span_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkGridLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<GridLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&GridLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::column-span\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_column_span_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_left_attach_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_left_attach_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkGridLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<GridLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&GridLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::left-attach\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_left_attach_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_row_span_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_row_span_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkGridLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<GridLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&GridLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::row-span\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_row_span_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_top_attach_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_top_attach_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkGridLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<GridLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&GridLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::top-attach\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_top_attach_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for GridLayoutChild {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GridLayoutChild")
    }
}
