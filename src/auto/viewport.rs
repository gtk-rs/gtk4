// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Adjustment;
use Bin;
use Buildable;
use Container;
use Scrollable;
use ShadowType;
use Widget;

glib_wrapper! {
    pub struct Viewport(Object<gtk_sys::GtkViewport, ViewportClass>) @extends Bin, Container, Widget, @implements Buildable, Scrollable;

    match fn {
        get_type => || gtk_sys::gtk_viewport_get_type(),
    }
}

impl Viewport {
    pub fn new<P: IsA<Adjustment>, Q: IsA<Adjustment>>(
        hadjustment: Option<&P>,
        vadjustment: Option<&Q>,
    ) -> Viewport {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_viewport_new(
                hadjustment.map(|p| p.as_ref()).to_glib_none().0,
                vadjustment.map(|p| p.as_ref()).to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_shadow_type(&self) -> ShadowType {
        unsafe { from_glib(gtk_sys::gtk_viewport_get_shadow_type(self.to_glib_none().0)) }
    }

    pub fn set_shadow_type(&self, type_: ShadowType) {
        unsafe {
            gtk_sys::gtk_viewport_set_shadow_type(self.to_glib_none().0, type_.to_glib());
        }
    }

    pub fn connect_property_shadow_type_notify<F: Fn(&Viewport) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_shadow_type_trampoline<F: Fn(&Viewport) + 'static>(
            this: *mut gtk_sys::GtkViewport,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::shadow-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_shadow_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Viewport {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Viewport")
    }
}
