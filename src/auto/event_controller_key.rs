// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use EventController;
use IMContext;
use Widget;

glib_wrapper! {
    pub struct EventControllerKey(Object<gtk_sys::GtkEventControllerKey, gtk_sys::GtkEventControllerKeyClass, EventControllerKeyClass>) @extends EventController;

    match fn {
        get_type => || gtk_sys::gtk_event_controller_key_get_type(),
    }
}

impl EventControllerKey {
    pub fn new() -> EventControllerKey {
        assert_initialized_main_thread!();
        unsafe {
            EventController::from_glib_full(gtk_sys::gtk_event_controller_key_new()).unsafe_cast()
        }
    }

    pub fn forward<P: IsA<Widget>>(&self, widget: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_event_controller_key_forward(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_group(&self) -> u32 {
        unsafe { gtk_sys::gtk_event_controller_key_get_group(self.to_glib_none().0) }
    }

    pub fn get_im_context(&self) -> Option<IMContext> {
        unsafe {
            from_glib_none(gtk_sys::gtk_event_controller_key_get_im_context(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_im_context<P: IsA<IMContext>>(&self, im_context: &P) {
        unsafe {
            gtk_sys::gtk_event_controller_key_set_im_context(
                self.to_glib_none().0,
                im_context.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn connect_im_update<F: Fn(&EventControllerKey) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn im_update_trampoline<F: Fn(&EventControllerKey) + 'static>(
            this: *mut gtk_sys::GtkEventControllerKey,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"im-update\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    im_update_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    //pub fn connect_key_pressed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored state: Gdk.ModifierType
    //}

    //pub fn connect_key_released<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored state: Gdk.ModifierType
    //}

    //pub fn connect_modifiers<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored keyval: Gdk.ModifierType
    //}
}

impl Default for EventControllerKey {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for EventControllerKey {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EventControllerKey")
    }
}
