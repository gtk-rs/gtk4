// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Actionable;
use Bin;
use Buildable;
use Button;
use CheckButton;
use Container;
use ToggleButton;
use Widget;

glib_wrapper! {
    pub struct RadioButton(Object<gtk_sys::GtkRadioButton, RadioButtonClass>) @extends CheckButton, ToggleButton, Button, Bin, Container, Widget, @implements Buildable, Actionable;

    match fn {
        get_type => || gtk_sys::gtk_radio_button_get_type(),
    }
}

impl RadioButton {
    pub fn from_widget(radio_group_member: &RadioButton) -> RadioButton {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_radio_button_new_from_widget(
                radio_group_member.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn with_label_from_widget(radio_group_member: &RadioButton, label: &str) -> RadioButton {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_radio_button_new_with_label_from_widget(
                radio_group_member.to_glib_none().0,
                label.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn with_mnemonic_from_widget(radio_group_member: &RadioButton, label: &str) -> RadioButton {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_radio_button_new_with_mnemonic_from_widget(
                radio_group_member.to_glib_none().0,
                label.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_group(&self) -> Vec<RadioButton> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_sys::gtk_radio_button_get_group(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn join_group(&self, group_source: Option<&RadioButton>) {
        unsafe {
            gtk_sys::gtk_radio_button_join_group(
                self.to_glib_none().0,
                group_source.to_glib_none().0,
            );
        }
    }

    pub fn set_property_group(&self, group: Option<&RadioButton>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"group\0".as_ptr() as *const _,
                Value::from(group).to_glib_none().0,
            );
        }
    }

    pub fn connect_group_changed<F: Fn(&RadioButton) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn group_changed_trampoline<F: Fn(&RadioButton) + 'static>(
            this: *mut gtk_sys::GtkRadioButton,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"group-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    group_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_group_notify<F: Fn(&RadioButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_trampoline<F: Fn(&RadioButton) + 'static>(
            this: *mut gtk_sys::GtkRadioButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::group\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_group_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for RadioButton {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RadioButton")
    }
}
