// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use ArrowType;
use Buildable;
use Popover;
use ReliefStyle;
use Widget;

glib_wrapper! {
    pub struct MenuButton(Object<gtk_sys::GtkMenuButton, MenuButtonClass>) @extends Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_menu_button_get_type(),
    }
}

impl MenuButton {
    pub fn new() -> MenuButton {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_menu_button_new()).unsafe_cast() }
    }

    pub fn get_align_widget(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_menu_button_get_align_widget(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_direction(&self) -> ArrowType {
        unsafe {
            from_glib(gtk_sys::gtk_menu_button_get_direction(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_icon_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_menu_button_get_icon_name(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_label(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_menu_button_get_label(self.to_glib_none().0)) }
    }

    pub fn get_menu_model(&self) -> Option<gio::MenuModel> {
        unsafe {
            from_glib_none(gtk_sys::gtk_menu_button_get_menu_model(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_popover(&self) -> Option<Popover> {
        unsafe { from_glib_none(gtk_sys::gtk_menu_button_get_popover(self.to_glib_none().0)) }
    }

    pub fn get_relief(&self) -> ReliefStyle {
        unsafe { from_glib(gtk_sys::gtk_menu_button_get_relief(self.to_glib_none().0)) }
    }

    pub fn get_use_underline(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_menu_button_get_use_underline(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn popdown(&self) {
        unsafe {
            gtk_sys::gtk_menu_button_popdown(self.to_glib_none().0);
        }
    }

    pub fn popup(&self) {
        unsafe {
            gtk_sys::gtk_menu_button_popup(self.to_glib_none().0);
        }
    }

    pub fn set_align_widget<P: IsA<Widget>>(&self, align_widget: Option<&P>) {
        unsafe {
            gtk_sys::gtk_menu_button_set_align_widget(
                self.to_glib_none().0,
                align_widget.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_create_popup_func(&self, func: Option<Box_<dyn Fn(&MenuButton) + 'static>>) {
        let func_data: Box_<Option<Box_<dyn Fn(&MenuButton) + 'static>>> = Box_::new(func);
        unsafe extern "C" fn func_func(
            menu_button: *mut gtk_sys::GtkMenuButton,
            user_data: glib_sys::gpointer,
        ) {
            let menu_button = from_glib_borrow(menu_button);
            let callback: &Option<Box_<dyn Fn(&MenuButton) + 'static>> = &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback(&menu_button)
            } else {
                panic!("cannot get closure...")
            };
        }
        let func = if func_data.is_some() {
            Some(func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_notify_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&MenuButton) + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_notify_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&MenuButton) + 'static>>> = func_data;
        unsafe {
            gtk_sys::gtk_menu_button_set_create_popup_func(
                self.to_glib_none().0,
                func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_direction(&self, direction: ArrowType) {
        unsafe {
            gtk_sys::gtk_menu_button_set_direction(self.to_glib_none().0, direction.to_glib());
        }
    }

    pub fn set_icon_name(&self, icon_name: &str) {
        unsafe {
            gtk_sys::gtk_menu_button_set_icon_name(
                self.to_glib_none().0,
                icon_name.to_glib_none().0,
            );
        }
    }

    pub fn set_label(&self, label: &str) {
        unsafe {
            gtk_sys::gtk_menu_button_set_label(self.to_glib_none().0, label.to_glib_none().0);
        }
    }

    pub fn set_menu_model<P: IsA<gio::MenuModel>>(&self, menu_model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_menu_button_set_menu_model(
                self.to_glib_none().0,
                menu_model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_popover<P: IsA<Widget>>(&self, popover: Option<&P>) {
        unsafe {
            gtk_sys::gtk_menu_button_set_popover(
                self.to_glib_none().0,
                popover.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_relief(&self, relief: ReliefStyle) {
        unsafe {
            gtk_sys::gtk_menu_button_set_relief(self.to_glib_none().0, relief.to_glib());
        }
    }

    pub fn set_use_underline(&self, use_underline: bool) {
        unsafe {
            gtk_sys::gtk_menu_button_set_use_underline(
                self.to_glib_none().0,
                use_underline.to_glib(),
            );
        }
    }

    pub fn connect_property_align_widget_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_align_widget_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::align-widget\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_align_widget_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_direction_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_direction_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::direction\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_direction_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_icon_name_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_label_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_label_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_menu_model_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::menu-model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_menu_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_popover_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_popover_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::popover\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_popover_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_relief_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_relief_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::relief\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_relief_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_use_underline_notify<F: Fn(&MenuButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_use_underline_trampoline<F: Fn(&MenuButton) + 'static>(
            this: *mut gtk_sys::GtkMenuButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::use-underline\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_use_underline_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for MenuButton {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for MenuButton {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MenuButton")
    }
}
