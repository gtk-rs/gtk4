// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use glib::GString;
use gtk_sys;
use std::fmt;
use StyleProvider;

glib_wrapper! {
    pub struct CssProvider(Object<gtk_sys::GtkCssProvider, gtk_sys::GtkCssProviderClass, CssProviderClass>) @implements StyleProvider;

    match fn {
        get_type => || gtk_sys::gtk_css_provider_get_type(),
    }
}

impl CssProvider {
    pub fn new() -> CssProvider {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(gtk_sys::gtk_css_provider_new()) }
    }

    pub fn load_from_data(&self, data: &[u8]) {
        let length = data.len() as isize;
        unsafe {
            gtk_sys::gtk_css_provider_load_from_data(
                self.to_glib_none().0,
                data.to_glib_none().0,
                length,
            );
        }
    }

    //pub fn load_from_file(&self, file: /*Ignored*/&gio::File) {
    //    unsafe { TODO: call gtk_sys:gtk_css_provider_load_from_file() }
    //}

    pub fn load_from_path(&self, path: &str) {
        unsafe {
            gtk_sys::gtk_css_provider_load_from_path(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    pub fn load_from_resource(&self, resource_path: &str) {
        unsafe {
            gtk_sys::gtk_css_provider_load_from_resource(
                self.to_glib_none().0,
                resource_path.to_glib_none().0,
            );
        }
    }

    pub fn load_named(&self, name: &str, variant: Option<&str>) {
        unsafe {
            gtk_sys::gtk_css_provider_load_named(
                self.to_glib_none().0,
                name.to_glib_none().0,
                variant.to_glib_none().0,
            );
        }
    }

    pub fn to_string(&self) -> GString {
        unsafe { from_glib_full(gtk_sys::gtk_css_provider_to_string(self.to_glib_none().0)) }
    }

    //pub fn connect_parsing_error<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored error: GLib.Error
    //}
}

impl Default for CssProvider {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for CssProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CssProvider")
    }
}
