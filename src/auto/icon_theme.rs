// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct IconTheme(Object<gtk_sys::GtkIconTheme, IconThemeClass>);

    match fn {
        get_type => || gtk_sys::gtk_icon_theme_get_type(),
    }
}

impl IconTheme {
    pub fn new() -> IconTheme {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(gtk_sys::gtk_icon_theme_new()) }
    }

    pub fn add_resource_path(&self, path: &str) {
        unsafe {
            gtk_sys::gtk_icon_theme_add_resource_path(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    pub fn add_search_path<P: AsRef<std::path::Path>>(&self, path: P) {
        unsafe {
            gtk_sys::gtk_icon_theme_add_search_path(
                self.to_glib_none().0,
                path.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn get_icon_names(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_sys::gtk_icon_theme_get_icon_names(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_resource_path(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_sys::gtk_icon_theme_get_resource_path(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_search_path(&self) -> Vec<std::path::PathBuf> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_sys::gtk_icon_theme_get_search_path(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_theme_name(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_icon_theme_get_theme_name(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn has_icon(&self, icon_name: &str) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_icon_theme_has_icon(
                self.to_glib_none().0,
                icon_name.to_glib_none().0,
            ))
        }
    }

    //pub fn lookup_by_gicon(&self, icon: /*Ignored*/&gio::Icon, size: i32, scale: i32, direction: TextDirection, flags: IconLookupFlags) -> /*Ignored*/Option<IconPaintable> {
    //    unsafe { TODO: call gtk_sys:gtk_icon_theme_lookup_by_gicon() }
    //}

    //pub fn lookup_icon(&self, icon_name: &str, fallbacks: &[&str], size: i32, scale: i32, direction: TextDirection, flags: IconLookupFlags) -> /*Ignored*/Option<IconPaintable> {
    //    unsafe { TODO: call gtk_sys:gtk_icon_theme_lookup_icon() }
    //}

    pub fn set_resource_path(&self, path: &str) {
        unsafe {
            gtk_sys::gtk_icon_theme_set_resource_path(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    pub fn set_search_path(&self, path: &[&std::path::Path]) {
        unsafe {
            gtk_sys::gtk_icon_theme_set_search_path(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    pub fn set_theme_name(&self, theme_name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_icon_theme_set_theme_name(
                self.to_glib_none().0,
                theme_name.to_glib_none().0,
            );
        }
    }

    //pub fn get_property_display(&self) -> /*Ignored*/Option<gdk::Display> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.as_ptr() as *mut gobject_sys::GObject, b"display\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `display` getter")
    //    }
    //}

    //pub fn set_property_display(&self, display: /*Ignored*/Option<&gdk::Display>) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.as_ptr() as *mut gobject_sys::GObject, b"display\0".as_ptr() as *const _, Value::from(display).to_glib_none().0);
    //    }
    //}

    //pub fn get_for_display(display: /*Ignored*/&gdk::Display) -> Option<IconTheme> {
    //    unsafe { TODO: call gtk_sys:gtk_icon_theme_get_for_display() }
    //}

    pub fn connect_changed<F: Fn(&IconTheme) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&IconTheme) + 'static>(
            this: *mut gtk_sys::GtkIconTheme,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_display_notify<F: Fn(&IconTheme) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_trampoline<F: Fn(&IconTheme) + 'static>(
            this: *mut gtk_sys::GtkIconTheme,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::display\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_display_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_icon_names_notify<F: Fn(&IconTheme) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_names_trampoline<F: Fn(&IconTheme) + 'static>(
            this: *mut gtk_sys::GtkIconTheme,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon-names\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_names_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_resource_path_notify<F: Fn(&IconTheme) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_resource_path_trampoline<F: Fn(&IconTheme) + 'static>(
            this: *mut gtk_sys::GtkIconTheme,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::resource-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_resource_path_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_search_path_notify<F: Fn(&IconTheme) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_search_path_trampoline<F: Fn(&IconTheme) + 'static>(
            this: *mut gtk_sys::GtkIconTheme,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::search-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_search_path_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_theme_name_notify<F: Fn(&IconTheme) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_theme_name_trampoline<F: Fn(&IconTheme) + 'static>(
            this: *mut gtk_sys::GtkIconTheme,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::theme-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_theme_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for IconTheme {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for IconTheme {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "IconTheme")
    }
}
