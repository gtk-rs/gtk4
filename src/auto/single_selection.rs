// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use SelectionModel;

glib_wrapper! {
    pub struct SingleSelection(Object<gtk_sys::GtkSingleSelection, gtk_sys::GtkSingleSelectionClass, SingleSelectionClass>) @implements gio::ListModel, SelectionModel;

    match fn {
        get_type => || gtk_sys::gtk_single_selection_get_type(),
    }
}

impl SingleSelection {
    pub fn new<P: IsA<gio::ListModel>>(model: &P) -> SingleSelection {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_single_selection_new(
                model.as_ref().to_glib_none().0,
            ))
        }
    }
}

pub const NONE_SINGLE_SELECTION: Option<&SingleSelection> = None;

pub trait SingleSelectionExt: 'static {
    fn get_autoselect(&self) -> bool;

    fn get_can_unselect(&self) -> bool;

    fn get_model(&self) -> Option<gio::ListModel>;

    fn get_selected(&self) -> u32;

    //fn get_selected_item(&self) -> /*Unimplemented*/Option<Fundamental: Pointer>;

    fn set_autoselect(&self, autoselect: bool);

    fn set_can_unselect(&self, can_unselect: bool);

    fn set_selected(&self, position: u32);

    fn connect_property_autoselect_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_can_unselect_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_selected_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_selected_item_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<SingleSelection>> SingleSelectionExt for O {
    fn get_autoselect(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_single_selection_get_autoselect(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_can_unselect(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_single_selection_get_can_unselect(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_model(&self) -> Option<gio::ListModel> {
        unsafe {
            from_glib_none(gtk_sys::gtk_single_selection_get_model(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_selected(&self) -> u32 {
        unsafe { gtk_sys::gtk_single_selection_get_selected(self.as_ref().to_glib_none().0) }
    }

    //fn get_selected_item(&self) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call gtk_sys:gtk_single_selection_get_selected_item() }
    //}

    fn set_autoselect(&self, autoselect: bool) {
        unsafe {
            gtk_sys::gtk_single_selection_set_autoselect(
                self.as_ref().to_glib_none().0,
                autoselect.to_glib(),
            );
        }
    }

    fn set_can_unselect(&self, can_unselect: bool) {
        unsafe {
            gtk_sys::gtk_single_selection_set_can_unselect(
                self.as_ref().to_glib_none().0,
                can_unselect.to_glib(),
            );
        }
    }

    fn set_selected(&self, position: u32) {
        unsafe {
            gtk_sys::gtk_single_selection_set_selected(self.as_ref().to_glib_none().0, position);
        }
    }

    fn connect_property_autoselect_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoselect_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSingleSelection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SingleSelection>,
        {
            let f: &F = &*(f as *const F);
            f(&SingleSelection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::autoselect\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_autoselect_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_can_unselect_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_unselect_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSingleSelection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SingleSelection>,
        {
            let f: &F = &*(f as *const F);
            f(&SingleSelection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-unselect\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_unselect_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_selected_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_selected_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSingleSelection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SingleSelection>,
        {
            let f: &F = &*(f as *const F);
            f(&SingleSelection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::selected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_selected_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_selected_item_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_selected_item_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSingleSelection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SingleSelection>,
        {
            let f: &F = &*(f as *const F);
            f(&SingleSelection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::selected-item\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_selected_item_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SingleSelection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SingleSelection")
    }
}
