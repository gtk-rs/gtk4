// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::boxed::Box as Box_;
use std::mem;
use PageSetup;
use PrintSettings;
use TextDirection;
use Widget;
use Window;

//pub fn accelerator_get_default_mod_mask() -> /*Ignored*/gdk::ModifierType {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_get_default_mod_mask() }
//}

//pub fn accelerator_get_label(accelerator_key: u32, accelerator_mods: /*Ignored*/gdk::ModifierType) -> Option<GString> {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_get_label() }
//}

//pub fn accelerator_get_label_with_keycode(display: /*Ignored*/Option<&gdk::Display>, accelerator_key: u32, keycode: u32, accelerator_mods: /*Ignored*/gdk::ModifierType) -> Option<GString> {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_get_label_with_keycode() }
//}

//pub fn accelerator_name(accelerator_key: u32, accelerator_mods: /*Ignored*/gdk::ModifierType) -> Option<GString> {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_name() }
//}

//pub fn accelerator_name_with_keycode(display: /*Ignored*/Option<&gdk::Display>, accelerator_key: u32, keycode: u32, accelerator_mods: /*Ignored*/gdk::ModifierType) -> Option<GString> {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_name_with_keycode() }
//}

//pub fn accelerator_parse(accelerator: &str) -> Option<(u32, /*Ignored*/gdk::ModifierType)> {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_parse() }
//}

//pub fn accelerator_parse_with_keycode(accelerator: &str, display: /*Ignored*/Option<&gdk::Display>, accelerator_codes: Vec<u32>) -> Option<(u32, /*Ignored*/gdk::ModifierType)> {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_parse_with_keycode() }
//}

//pub fn accelerator_set_default_mod_mask(default_mod_mask: /*Ignored*/gdk::ModifierType) {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_set_default_mod_mask() }
//}

//pub fn accelerator_valid(keyval: u32, modifiers: /*Ignored*/gdk::ModifierType) -> bool {
//    unsafe { TODO: call gtk_sys:gtk_accelerator_valid() }
//}

//pub fn css_parser_error_quark() -> /*Ignored*/glib::Quark {
//    unsafe { TODO: call gtk_sys:gtk_css_parser_error_quark() }
//}

//pub fn css_parser_warning_quark() -> /*Ignored*/glib::Quark {
//    unsafe { TODO: call gtk_sys:gtk_css_parser_warning_quark() }
//}

pub fn disable_setlocale() {
    assert_initialized_main_thread!();
    unsafe {
        gtk_sys::gtk_disable_setlocale();
    }
}

//pub fn distribute_natural_allocation(extra_space: i32, n_requested_sizes: u32, sizes: /*Ignored*/&mut RequestedSize) -> i32 {
//    unsafe { TODO: call gtk_sys:gtk_distribute_natural_allocation() }
//}

//pub fn get_current_event() -> /*Ignored*/Option<gdk::Event> {
//    unsafe { TODO: call gtk_sys:gtk_get_current_event() }
//}

//pub fn get_current_event_device() -> /*Ignored*/Option<gdk::Device> {
//    unsafe { TODO: call gtk_sys:gtk_get_current_event_device() }
//}

//pub fn get_current_event_state() -> Option</*Ignored*/gdk::ModifierType> {
//    unsafe { TODO: call gtk_sys:gtk_get_current_event_state() }
//}

pub fn get_current_event_time() -> u32 {
    assert_initialized_main_thread!();
    unsafe { gtk_sys::gtk_get_current_event_time() }
}

pub fn get_debug_flags() -> u32 {
    assert_initialized_main_thread!();
    unsafe { gtk_sys::gtk_get_debug_flags() }
}

//pub fn get_default_language() -> /*Ignored*/Option<pango::Language> {
//    unsafe { TODO: call gtk_sys:gtk_get_default_language() }
//}

pub fn get_locale_direction() -> TextDirection {
    assert_initialized_main_thread!();
    unsafe { from_glib(gtk_sys::gtk_get_locale_direction()) }
}

pub fn hsv_to_rgb(h: f32, s: f32, v: f32) -> (f32, f32, f32) {
    assert_initialized_main_thread!();
    unsafe {
        let mut r = mem::MaybeUninit::uninit();
        let mut g = mem::MaybeUninit::uninit();
        let mut b = mem::MaybeUninit::uninit();
        gtk_sys::gtk_hsv_to_rgb(h, s, v, r.as_mut_ptr(), g.as_mut_ptr(), b.as_mut_ptr());
        let r = r.assume_init();
        let g = g.assume_init();
        let b = b.assume_init();
        (r, g, b)
    }
}

pub fn im_modules_init() {
    assert_initialized_main_thread!();
    unsafe {
        gtk_sys::gtk_im_modules_init();
    }
}

pub fn print_run_page_setup_dialog<P: IsA<Window>>(
    parent: Option<&P>,
    page_setup: Option<&PageSetup>,
    settings: &PrintSettings,
) -> Option<PageSetup> {
    skip_assert_initialized!();
    unsafe {
        from_glib_full(gtk_sys::gtk_print_run_page_setup_dialog(
            parent.map(|p| p.as_ref()).to_glib_none().0,
            page_setup.to_glib_none().0,
            settings.to_glib_none().0,
        ))
    }
}

pub fn print_run_page_setup_dialog_async<
    P: IsA<Window>,
    Q: FnOnce(&PageSetup) + Send + Sync + 'static,
>(
    parent: Option<&P>,
    page_setup: Option<&PageSetup>,
    settings: &PrintSettings,
    done_cb: Q,
) {
    skip_assert_initialized!();
    let done_cb_data: Box_<Q> = Box_::new(done_cb);
    unsafe extern "C" fn done_cb_func<
        P: IsA<Window>,
        Q: FnOnce(&PageSetup) + Send + Sync + 'static,
    >(
        page_setup: *mut gtk_sys::GtkPageSetup,
        data: glib_sys::gpointer,
    ) {
        let page_setup = from_glib_borrow(page_setup);
        let callback: Box_<Q> = Box_::from_raw(data as *mut _);
        (*callback)(&page_setup);
    }
    let done_cb = Some(done_cb_func::<P, Q> as _);
    let super_callback0: Box_<Q> = done_cb_data;
    unsafe {
        gtk_sys::gtk_print_run_page_setup_dialog_async(
            parent.map(|p| p.as_ref()).to_glib_none().0,
            page_setup.to_glib_none().0,
            settings.to_glib_none().0,
            done_cb,
            Box_::into_raw(super_callback0) as *mut _,
        );
    }
}

//pub fn render_activity<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_activity() }
//}

//pub fn render_arrow<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, angle: f64, x: f64, y: f64, size: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_arrow() }
//}

//pub fn render_background<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_background() }
//}

//pub fn render_check<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_check() }
//}

//pub fn render_expander<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_expander() }
//}

//pub fn render_focus<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_focus() }
//}

//pub fn render_frame<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_frame() }
//}

//pub fn render_handle<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_handle() }
//}

//pub fn render_icon<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, texture: /*Ignored*/&gdk::Texture, x: f64, y: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_icon() }
//}

//pub fn render_insertion_cursor<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, layout: /*Ignored*/&pango::Layout, index: i32, direction: /*Ignored*/pango::Direction) {
//    unsafe { TODO: call gtk_sys:gtk_render_insertion_cursor() }
//}

//pub fn render_layout<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, layout: /*Ignored*/&pango::Layout) {
//    unsafe { TODO: call gtk_sys:gtk_render_layout() }
//}

//pub fn render_line<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x0: f64, y0: f64, x1: f64, y1: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_line() }
//}

//pub fn render_option<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64) {
//    unsafe { TODO: call gtk_sys:gtk_render_option() }
//}

//pub fn render_slider<P: IsA<StyleContext>>(context: &P, cr: /*Ignored*/&cairo::Context, x: f64, y: f64, width: f64, height: f64, orientation: Orientation) {
//    unsafe { TODO: call gtk_sys:gtk_render_slider() }
//}

pub fn rgb_to_hsv(r: f32, g: f32, b: f32) -> (f32, f32, f32) {
    assert_initialized_main_thread!();
    unsafe {
        let mut h = mem::MaybeUninit::uninit();
        let mut s = mem::MaybeUninit::uninit();
        let mut v = mem::MaybeUninit::uninit();
        gtk_sys::gtk_rgb_to_hsv(r, g, b, h.as_mut_ptr(), s.as_mut_ptr(), v.as_mut_ptr());
        let h = h.assume_init();
        let s = s.assume_init();
        let v = v.assume_init();
        (h, s, v)
    }
}

pub fn set_debug_flags(flags: u32) {
    assert_initialized_main_thread!();
    unsafe {
        gtk_sys::gtk_set_debug_flags(flags);
    }
}

//pub fn show_about_dialog<P: IsA<Window>>(parent: Option<&P>, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
//    unsafe { TODO: call gtk_sys:gtk_show_about_dialog() }
//}

//pub fn show_uri_on_window<P: IsA<Window>>(parent: Option<&P>, uri: &str, timestamp: u32, error: /*Ignored*/Option<glib::Error>) -> bool {
//    unsafe { TODO: call gtk_sys:gtk_show_uri_on_window() }
//}

//pub fn test_init(argvp: /*Unimplemented*/Vec<GString>, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
//    unsafe { TODO: call gtk_sys:gtk_test_init() }
//}

//pub fn test_list_all_types() -> /*Unimplemented*/CArray TypeId { ns_id: 0, id: 30 } {
//    unsafe { TODO: call gtk_sys:gtk_test_list_all_types() }
//}

pub fn test_register_all_types() {
    assert_initialized_main_thread!();
    unsafe {
        gtk_sys::gtk_test_register_all_types();
    }
}

pub fn test_widget_wait_for_draw<P: IsA<Widget>>(widget: &P) {
    skip_assert_initialized!();
    unsafe {
        gtk_sys::gtk_test_widget_wait_for_draw(widget.as_ref().to_glib_none().0);
    }
}

//pub fn tree_create_row_drag_content<P: IsA<TreeModel>>(tree_model: &P, path: &mut TreePath) -> /*Ignored*/Option<gdk::ContentProvider> {
//    unsafe { TODO: call gtk_sys:gtk_tree_create_row_drag_content() }
//}

//pub fn tree_get_row_drag_data(value: /*Ignored*/&glib::Value) -> Option<(Option<TreeModel>, Option<TreePath>)> {
//    unsafe { TODO: call gtk_sys:gtk_tree_get_row_drag_data() }
//}
