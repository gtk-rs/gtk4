// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use gio_sys;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use AppChooser;
use Buildable;
use Widget;

glib_wrapper! {
    pub struct AppChooserWidget(Object<gtk_sys::GtkAppChooserWidget, AppChooserWidgetClass>) @extends Widget, @implements Buildable, AppChooser;

    match fn {
        get_type => || gtk_sys::gtk_app_chooser_widget_get_type(),
    }
}

impl AppChooserWidget {
    pub fn new(content_type: &str) -> AppChooserWidget {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_app_chooser_widget_new(
                content_type.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_default_text(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_app_chooser_widget_get_default_text(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_all(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_widget_get_show_all(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_default(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_widget_get_show_default(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_fallback(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_widget_get_show_fallback(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_other(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_widget_get_show_other(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_recommended(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_widget_get_show_recommended(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_default_text(&self, text: &str) {
        unsafe {
            gtk_sys::gtk_app_chooser_widget_set_default_text(
                self.to_glib_none().0,
                text.to_glib_none().0,
            );
        }
    }

    pub fn set_show_all(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_widget_set_show_all(self.to_glib_none().0, setting.to_glib());
        }
    }

    pub fn set_show_default(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_widget_set_show_default(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn set_show_fallback(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_widget_set_show_fallback(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn set_show_other(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_widget_set_show_other(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn set_show_recommended(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_widget_set_show_recommended(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn connect_application_activated<F: Fn(&AppChooserWidget, &gio::AppInfo) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn application_activated_trampoline<
            F: Fn(&AppChooserWidget, &gio::AppInfo) + 'static,
        >(
            this: *mut gtk_sys::GtkAppChooserWidget,
            application: *mut gio_sys::GAppInfo,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(application))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"application-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    application_activated_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_application_selected<F: Fn(&AppChooserWidget, &gio::AppInfo) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn application_selected_trampoline<
            F: Fn(&AppChooserWidget, &gio::AppInfo) + 'static,
        >(
            this: *mut gtk_sys::GtkAppChooserWidget,
            application: *mut gio_sys::GAppInfo,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(application))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"application-selected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    application_selected_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_default_text_notify<F: Fn(&AppChooserWidget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_text_trampoline<F: Fn(&AppChooserWidget) + 'static>(
            this: *mut gtk_sys::GtkAppChooserWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::default-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_default_text_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_all_notify<F: Fn(&AppChooserWidget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_all_trampoline<F: Fn(&AppChooserWidget) + 'static>(
            this: *mut gtk_sys::GtkAppChooserWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-all\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_all_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_default_notify<F: Fn(&AppChooserWidget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_default_trampoline<F: Fn(&AppChooserWidget) + 'static>(
            this: *mut gtk_sys::GtkAppChooserWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_default_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_fallback_notify<F: Fn(&AppChooserWidget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_fallback_trampoline<F: Fn(&AppChooserWidget) + 'static>(
            this: *mut gtk_sys::GtkAppChooserWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-fallback\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_fallback_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_other_notify<F: Fn(&AppChooserWidget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_other_trampoline<F: Fn(&AppChooserWidget) + 'static>(
            this: *mut gtk_sys::GtkAppChooserWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-other\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_other_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_recommended_notify<F: Fn(&AppChooserWidget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_recommended_trampoline<
            F: Fn(&AppChooserWidget) + 'static,
        >(
            this: *mut gtk_sys::GtkAppChooserWidget,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-recommended\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_recommended_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AppChooserWidget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AppChooserWidget")
    }
}
