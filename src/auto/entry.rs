// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::value::SetValueOptional;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use pango;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use CellEditable;
use Editable;
use EntryBuffer;
use EntryCompletion;
use EntryIconPosition;
use ImageType;
use InputHints;
use InputPurpose;
use Widget;

glib_wrapper! {
    pub struct Entry(Object<gtk_sys::GtkEntry, gtk_sys::GtkEntryClass, EntryClass>) @extends Widget, @implements Buildable, CellEditable, Editable;

    match fn {
        get_type => || gtk_sys::gtk_entry_get_type(),
    }
}

impl Entry {
    pub fn new() -> Entry {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_entry_new()).unsafe_cast() }
    }

    pub fn with_buffer<P: IsA<EntryBuffer>>(buffer: &P) -> Entry {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_entry_new_with_buffer(
                buffer.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }
}

impl Default for Entry {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_ENTRY: Option<&Entry> = None;

pub trait EntryExt: 'static {
    fn get_activates_default(&self) -> bool;

    fn get_attributes(&self) -> Option<pango::AttrList>;

    fn get_buffer(&self) -> EntryBuffer;

    fn get_completion(&self) -> Option<EntryCompletion>;

    fn get_current_icon_drag_source(&self) -> i32;

    fn get_extra_menu(&self) -> Option<gio::MenuModel>;

    fn get_has_frame(&self) -> bool;

    fn get_icon_activatable(&self, icon_pos: EntryIconPosition) -> bool;

    fn get_icon_area(&self, icon_pos: EntryIconPosition) -> gdk::Rectangle;

    fn get_icon_at_pos(&self, x: i32, y: i32) -> i32;

    fn get_icon_gicon(&self, icon_pos: EntryIconPosition) -> Option<gio::Icon>;

    fn get_icon_name(&self, icon_pos: EntryIconPosition) -> Option<GString>;

    fn get_icon_paintable(&self, icon_pos: EntryIconPosition) -> Option<gdk::Paintable>;

    fn get_icon_sensitive(&self, icon_pos: EntryIconPosition) -> bool;

    fn get_icon_storage_type(&self, icon_pos: EntryIconPosition) -> ImageType;

    fn get_icon_tooltip_markup(&self, icon_pos: EntryIconPosition) -> Option<GString>;

    fn get_icon_tooltip_text(&self, icon_pos: EntryIconPosition) -> Option<GString>;

    fn get_input_hints(&self) -> InputHints;

    fn get_input_purpose(&self) -> InputPurpose;

    fn get_invisible_char(&self) -> Option<char>;

    fn get_max_length(&self) -> i32;

    fn get_overwrite_mode(&self) -> bool;

    fn get_placeholder_text(&self) -> Option<GString>;

    fn get_progress_fraction(&self) -> f64;

    fn get_progress_pulse_step(&self) -> f64;

    fn get_tabs(&self) -> Option<pango::TabArray>;

    fn get_text_length(&self) -> u16;

    fn get_visibility(&self) -> bool;

    fn grab_focus_without_selecting(&self) -> bool;

    fn progress_pulse(&self);

    fn reset_im_context(&self);

    fn set_activates_default(&self, setting: bool);

    fn set_attributes(&self, attrs: &pango::AttrList);

    fn set_buffer<P: IsA<EntryBuffer>>(&self, buffer: &P);

    fn set_completion(&self, completion: Option<&EntryCompletion>);

    fn set_extra_menu<P: IsA<gio::MenuModel>>(&self, model: Option<&P>);

    fn set_has_frame(&self, setting: bool);

    fn set_icon_activatable(&self, icon_pos: EntryIconPosition, activatable: bool);

    //fn set_icon_drag_source(&self, icon_pos: EntryIconPosition, provider: /*Ignored*/&gdk::ContentProvider, actions: gdk::DragAction);

    fn set_icon_from_gicon<P: IsA<gio::Icon>>(&self, icon_pos: EntryIconPosition, icon: Option<&P>);

    fn set_icon_from_icon_name(&self, icon_pos: EntryIconPosition, icon_name: Option<&str>);

    fn set_icon_from_paintable<P: IsA<gdk::Paintable>>(
        &self,
        icon_pos: EntryIconPosition,
        paintable: Option<&P>,
    );

    fn set_icon_sensitive(&self, icon_pos: EntryIconPosition, sensitive: bool);

    fn set_icon_tooltip_markup(&self, icon_pos: EntryIconPosition, tooltip: Option<&str>);

    fn set_icon_tooltip_text(&self, icon_pos: EntryIconPosition, tooltip: Option<&str>);

    fn set_input_hints(&self, hints: InputHints);

    fn set_input_purpose(&self, purpose: InputPurpose);

    fn set_invisible_char(&self, ch: Option<char>);

    fn set_max_length(&self, max: i32);

    fn set_overwrite_mode(&self, overwrite: bool);

    fn set_placeholder_text(&self, text: Option<&str>);

    fn set_progress_fraction(&self, fraction: f64);

    fn set_progress_pulse_step(&self, fraction: f64);

    fn set_tabs(&self, tabs: Option<&pango::TabArray>);

    fn set_visibility(&self, visible: bool);

    fn unset_invisible_char(&self);

    fn get_property_enable_emoji_completion(&self) -> bool;

    fn set_property_enable_emoji_completion(&self, enable_emoji_completion: bool);

    fn get_property_im_module(&self) -> Option<GString>;

    fn set_property_im_module(&self, im_module: Option<&str>);

    fn get_property_invisible_char_set(&self) -> bool;

    fn set_property_invisible_char_set(&self, invisible_char_set: bool);

    fn get_property_primary_icon_activatable(&self) -> bool;

    fn set_property_primary_icon_activatable(&self, primary_icon_activatable: bool);

    fn get_property_primary_icon_gicon(&self) -> Option<gio::Icon>;

    fn set_property_primary_icon_gicon<P: IsA<gio::Icon> + SetValueOptional>(
        &self,
        primary_icon_gicon: Option<&P>,
    );

    fn get_property_primary_icon_name(&self) -> Option<GString>;

    fn set_property_primary_icon_name(&self, primary_icon_name: Option<&str>);

    fn get_property_primary_icon_paintable(&self) -> Option<gdk::Paintable>;

    fn set_property_primary_icon_paintable<P: IsA<gdk::Paintable> + SetValueOptional>(
        &self,
        primary_icon_paintable: Option<&P>,
    );

    fn get_property_primary_icon_sensitive(&self) -> bool;

    fn set_property_primary_icon_sensitive(&self, primary_icon_sensitive: bool);

    fn get_property_primary_icon_storage_type(&self) -> ImageType;

    fn get_property_primary_icon_tooltip_markup(&self) -> Option<GString>;

    fn set_property_primary_icon_tooltip_markup(&self, primary_icon_tooltip_markup: Option<&str>);

    fn get_property_primary_icon_tooltip_text(&self) -> Option<GString>;

    fn set_property_primary_icon_tooltip_text(&self, primary_icon_tooltip_text: Option<&str>);

    fn get_property_scroll_offset(&self) -> i32;

    fn get_property_secondary_icon_activatable(&self) -> bool;

    fn set_property_secondary_icon_activatable(&self, secondary_icon_activatable: bool);

    fn get_property_secondary_icon_gicon(&self) -> Option<gio::Icon>;

    fn set_property_secondary_icon_gicon<P: IsA<gio::Icon> + SetValueOptional>(
        &self,
        secondary_icon_gicon: Option<&P>,
    );

    fn get_property_secondary_icon_name(&self) -> Option<GString>;

    fn set_property_secondary_icon_name(&self, secondary_icon_name: Option<&str>);

    fn get_property_secondary_icon_paintable(&self) -> Option<gdk::Paintable>;

    fn set_property_secondary_icon_paintable<P: IsA<gdk::Paintable> + SetValueOptional>(
        &self,
        secondary_icon_paintable: Option<&P>,
    );

    fn get_property_secondary_icon_sensitive(&self) -> bool;

    fn set_property_secondary_icon_sensitive(&self, secondary_icon_sensitive: bool);

    fn get_property_secondary_icon_storage_type(&self) -> ImageType;

    fn get_property_secondary_icon_tooltip_markup(&self) -> Option<GString>;

    fn set_property_secondary_icon_tooltip_markup(
        &self,
        secondary_icon_tooltip_markup: Option<&str>,
    );

    fn get_property_secondary_icon_tooltip_text(&self) -> Option<GString>;

    fn set_property_secondary_icon_tooltip_text(&self, secondary_icon_tooltip_text: Option<&str>);

    fn get_property_show_emoji_icon(&self) -> bool;

    fn set_property_show_emoji_icon(&self, show_emoji_icon: bool);

    fn get_property_truncate_multiline(&self) -> bool;

    fn set_property_truncate_multiline(&self, truncate_multiline: bool);

    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_activate(&self);

    fn connect_icon_press<F: Fn(&Self, EntryIconPosition) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_icon_release<F: Fn(&Self, EntryIconPosition) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_activates_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_attributes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_completion_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_emoji_completion_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_extra_menu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_frame_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_im_module_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_hints_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_purpose_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_invisible_char_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_invisible_char_set_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_max_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_overwrite_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_placeholder_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_activatable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_gicon_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_name_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_paintable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_sensitive_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_storage_type_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_tooltip_markup_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_primary_icon_tooltip_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_progress_fraction_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_progress_pulse_step_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_scroll_offset_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_activatable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_gicon_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_name_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_paintable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_sensitive_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_storage_type_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_tooltip_markup_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_secondary_icon_tooltip_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_show_emoji_icon_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_tabs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_text_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_truncate_multiline_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_visibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Entry>> EntryExt for O {
    fn get_activates_default(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_activates_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_attributes(&self) -> Option<pango::AttrList> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_attributes(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_buffer(&self) -> EntryBuffer {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_buffer(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_completion(&self) -> Option<EntryCompletion> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_completion(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_current_icon_drag_source(&self) -> i32 {
        unsafe { gtk_sys::gtk_entry_get_current_icon_drag_source(self.as_ref().to_glib_none().0) }
    }

    fn get_extra_menu(&self) -> Option<gio::MenuModel> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_extra_menu(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_has_frame(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_has_frame(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_icon_activatable(&self, icon_pos: EntryIconPosition) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_icon_activatable(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_area(&self, icon_pos: EntryIconPosition) -> gdk::Rectangle {
        unsafe {
            let mut icon_area = gdk::Rectangle::uninitialized();
            gtk_sys::gtk_entry_get_icon_area(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                icon_area.to_glib_none_mut().0,
            );
            icon_area
        }
    }

    fn get_icon_at_pos(&self, x: i32, y: i32) -> i32 {
        unsafe { gtk_sys::gtk_entry_get_icon_at_pos(self.as_ref().to_glib_none().0, x, y) }
    }

    fn get_icon_gicon(&self, icon_pos: EntryIconPosition) -> Option<gio::Icon> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_icon_gicon(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_name(&self, icon_pos: EntryIconPosition) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_icon_name(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_paintable(&self, icon_pos: EntryIconPosition) -> Option<gdk::Paintable> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_icon_paintable(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_sensitive(&self, icon_pos: EntryIconPosition) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_icon_sensitive(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_storage_type(&self, icon_pos: EntryIconPosition) -> ImageType {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_icon_storage_type(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_tooltip_markup(&self, icon_pos: EntryIconPosition) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_entry_get_icon_tooltip_markup(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_icon_tooltip_text(&self, icon_pos: EntryIconPosition) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_entry_get_icon_tooltip_text(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
            ))
        }
    }

    fn get_input_hints(&self) -> InputHints {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_input_hints(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_input_purpose(&self) -> InputPurpose {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_input_purpose(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_invisible_char(&self) -> Option<char> {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_invisible_char(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_max_length(&self) -> i32 {
        unsafe { gtk_sys::gtk_entry_get_max_length(self.as_ref().to_glib_none().0) }
    }

    fn get_overwrite_mode(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_overwrite_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_placeholder_text(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_entry_get_placeholder_text(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_progress_fraction(&self) -> f64 {
        unsafe { gtk_sys::gtk_entry_get_progress_fraction(self.as_ref().to_glib_none().0) }
    }

    fn get_progress_pulse_step(&self) -> f64 {
        unsafe { gtk_sys::gtk_entry_get_progress_pulse_step(self.as_ref().to_glib_none().0) }
    }

    fn get_tabs(&self) -> Option<pango::TabArray> {
        unsafe { from_glib_none(gtk_sys::gtk_entry_get_tabs(self.as_ref().to_glib_none().0)) }
    }

    fn get_text_length(&self) -> u16 {
        unsafe { gtk_sys::gtk_entry_get_text_length(self.as_ref().to_glib_none().0) }
    }

    fn get_visibility(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_get_visibility(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn grab_focus_without_selecting(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_entry_grab_focus_without_selecting(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn progress_pulse(&self) {
        unsafe {
            gtk_sys::gtk_entry_progress_pulse(self.as_ref().to_glib_none().0);
        }
    }

    fn reset_im_context(&self) {
        unsafe {
            gtk_sys::gtk_entry_reset_im_context(self.as_ref().to_glib_none().0);
        }
    }

    fn set_activates_default(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_entry_set_activates_default(
                self.as_ref().to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    fn set_attributes(&self, attrs: &pango::AttrList) {
        unsafe {
            gtk_sys::gtk_entry_set_attributes(
                self.as_ref().to_glib_none().0,
                attrs.to_glib_none().0,
            );
        }
    }

    fn set_buffer<P: IsA<EntryBuffer>>(&self, buffer: &P) {
        unsafe {
            gtk_sys::gtk_entry_set_buffer(
                self.as_ref().to_glib_none().0,
                buffer.as_ref().to_glib_none().0,
            );
        }
    }

    fn set_completion(&self, completion: Option<&EntryCompletion>) {
        unsafe {
            gtk_sys::gtk_entry_set_completion(
                self.as_ref().to_glib_none().0,
                completion.to_glib_none().0,
            );
        }
    }

    fn set_extra_menu<P: IsA<gio::MenuModel>>(&self, model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_entry_set_extra_menu(
                self.as_ref().to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_has_frame(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_entry_set_has_frame(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_icon_activatable(&self, icon_pos: EntryIconPosition, activatable: bool) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_activatable(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                activatable.to_glib(),
            );
        }
    }

    //fn set_icon_drag_source(&self, icon_pos: EntryIconPosition, provider: /*Ignored*/&gdk::ContentProvider, actions: gdk::DragAction) {
    //    unsafe { TODO: call gtk_sys:gtk_entry_set_icon_drag_source() }
    //}

    fn set_icon_from_gicon<P: IsA<gio::Icon>>(
        &self,
        icon_pos: EntryIconPosition,
        icon: Option<&P>,
    ) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_from_gicon(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                icon.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_icon_from_icon_name(&self, icon_pos: EntryIconPosition, icon_name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_from_icon_name(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                icon_name.to_glib_none().0,
            );
        }
    }

    fn set_icon_from_paintable<P: IsA<gdk::Paintable>>(
        &self,
        icon_pos: EntryIconPosition,
        paintable: Option<&P>,
    ) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_from_paintable(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                paintable.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_icon_sensitive(&self, icon_pos: EntryIconPosition, sensitive: bool) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_sensitive(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                sensitive.to_glib(),
            );
        }
    }

    fn set_icon_tooltip_markup(&self, icon_pos: EntryIconPosition, tooltip: Option<&str>) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_tooltip_markup(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                tooltip.to_glib_none().0,
            );
        }
    }

    fn set_icon_tooltip_text(&self, icon_pos: EntryIconPosition, tooltip: Option<&str>) {
        unsafe {
            gtk_sys::gtk_entry_set_icon_tooltip_text(
                self.as_ref().to_glib_none().0,
                icon_pos.to_glib(),
                tooltip.to_glib_none().0,
            );
        }
    }

    fn set_input_hints(&self, hints: InputHints) {
        unsafe {
            gtk_sys::gtk_entry_set_input_hints(self.as_ref().to_glib_none().0, hints.to_glib());
        }
    }

    fn set_input_purpose(&self, purpose: InputPurpose) {
        unsafe {
            gtk_sys::gtk_entry_set_input_purpose(self.as_ref().to_glib_none().0, purpose.to_glib());
        }
    }

    fn set_invisible_char(&self, ch: Option<char>) {
        unsafe {
            gtk_sys::gtk_entry_set_invisible_char(self.as_ref().to_glib_none().0, ch.to_glib());
        }
    }

    fn set_max_length(&self, max: i32) {
        unsafe {
            gtk_sys::gtk_entry_set_max_length(self.as_ref().to_glib_none().0, max);
        }
    }

    fn set_overwrite_mode(&self, overwrite: bool) {
        unsafe {
            gtk_sys::gtk_entry_set_overwrite_mode(
                self.as_ref().to_glib_none().0,
                overwrite.to_glib(),
            );
        }
    }

    fn set_placeholder_text(&self, text: Option<&str>) {
        unsafe {
            gtk_sys::gtk_entry_set_placeholder_text(
                self.as_ref().to_glib_none().0,
                text.to_glib_none().0,
            );
        }
    }

    fn set_progress_fraction(&self, fraction: f64) {
        unsafe {
            gtk_sys::gtk_entry_set_progress_fraction(self.as_ref().to_glib_none().0, fraction);
        }
    }

    fn set_progress_pulse_step(&self, fraction: f64) {
        unsafe {
            gtk_sys::gtk_entry_set_progress_pulse_step(self.as_ref().to_glib_none().0, fraction);
        }
    }

    fn set_tabs(&self, tabs: Option<&pango::TabArray>) {
        unsafe {
            gtk_sys::gtk_entry_set_tabs(
                self.as_ref().to_glib_none().0,
                mut_override(tabs.to_glib_none().0),
            );
        }
    }

    fn set_visibility(&self, visible: bool) {
        unsafe {
            gtk_sys::gtk_entry_set_visibility(self.as_ref().to_glib_none().0, visible.to_glib());
        }
    }

    fn unset_invisible_char(&self) {
        unsafe {
            gtk_sys::gtk_entry_unset_invisible_char(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_enable_emoji_completion(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"enable-emoji-completion\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `enable-emoji-completion` getter")
                .unwrap()
        }
    }

    fn set_property_enable_emoji_completion(&self, enable_emoji_completion: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"enable-emoji-completion\0".as_ptr() as *const _,
                Value::from(&enable_emoji_completion).to_glib_none().0,
            );
        }
    }

    fn get_property_im_module(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"im-module\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `im-module` getter")
        }
    }

    fn set_property_im_module(&self, im_module: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"im-module\0".as_ptr() as *const _,
                Value::from(im_module).to_glib_none().0,
            );
        }
    }

    fn get_property_invisible_char_set(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"invisible-char-set\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `invisible-char-set` getter")
                .unwrap()
        }
    }

    fn set_property_invisible_char_set(&self, invisible_char_set: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"invisible-char-set\0".as_ptr() as *const _,
                Value::from(&invisible_char_set).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_activatable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-activatable\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-activatable` getter")
                .unwrap()
        }
    }

    fn set_property_primary_icon_activatable(&self, primary_icon_activatable: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-activatable\0".as_ptr() as *const _,
                Value::from(&primary_icon_activatable).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_gicon(&self) -> Option<gio::Icon> {
        unsafe {
            let mut value = Value::from_type(<gio::Icon as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-gicon\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-gicon` getter")
        }
    }

    fn set_property_primary_icon_gicon<P: IsA<gio::Icon> + SetValueOptional>(
        &self,
        primary_icon_gicon: Option<&P>,
    ) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-gicon\0".as_ptr() as *const _,
                Value::from(primary_icon_gicon).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_name(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-name\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-name` getter")
        }
    }

    fn set_property_primary_icon_name(&self, primary_icon_name: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-name\0".as_ptr() as *const _,
                Value::from(primary_icon_name).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_paintable(&self) -> Option<gdk::Paintable> {
        unsafe {
            let mut value = Value::from_type(<gdk::Paintable as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-paintable\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-paintable` getter")
        }
    }

    fn set_property_primary_icon_paintable<P: IsA<gdk::Paintable> + SetValueOptional>(
        &self,
        primary_icon_paintable: Option<&P>,
    ) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-paintable\0".as_ptr() as *const _,
                Value::from(primary_icon_paintable).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_sensitive(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-sensitive\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-sensitive` getter")
                .unwrap()
        }
    }

    fn set_property_primary_icon_sensitive(&self, primary_icon_sensitive: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-sensitive\0".as_ptr() as *const _,
                Value::from(&primary_icon_sensitive).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_storage_type(&self) -> ImageType {
        unsafe {
            let mut value = Value::from_type(<ImageType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-storage-type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-storage-type` getter")
                .unwrap()
        }
    }

    fn get_property_primary_icon_tooltip_markup(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-tooltip-markup\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-tooltip-markup` getter")
        }
    }

    fn set_property_primary_icon_tooltip_markup(&self, primary_icon_tooltip_markup: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-tooltip-markup\0".as_ptr() as *const _,
                Value::from(primary_icon_tooltip_markup).to_glib_none().0,
            );
        }
    }

    fn get_property_primary_icon_tooltip_text(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-tooltip-text\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `primary-icon-tooltip-text` getter")
        }
    }

    fn set_property_primary_icon_tooltip_text(&self, primary_icon_tooltip_text: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"primary-icon-tooltip-text\0".as_ptr() as *const _,
                Value::from(primary_icon_tooltip_text).to_glib_none().0,
            );
        }
    }

    fn get_property_scroll_offset(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"scroll-offset\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `scroll-offset` getter")
                .unwrap()
        }
    }

    fn get_property_secondary_icon_activatable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-activatable\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-activatable` getter")
                .unwrap()
        }
    }

    fn set_property_secondary_icon_activatable(&self, secondary_icon_activatable: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-activatable\0".as_ptr() as *const _,
                Value::from(&secondary_icon_activatable).to_glib_none().0,
            );
        }
    }

    fn get_property_secondary_icon_gicon(&self) -> Option<gio::Icon> {
        unsafe {
            let mut value = Value::from_type(<gio::Icon as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-gicon\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-gicon` getter")
        }
    }

    fn set_property_secondary_icon_gicon<P: IsA<gio::Icon> + SetValueOptional>(
        &self,
        secondary_icon_gicon: Option<&P>,
    ) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-gicon\0".as_ptr() as *const _,
                Value::from(secondary_icon_gicon).to_glib_none().0,
            );
        }
    }

    fn get_property_secondary_icon_name(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-name\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-name` getter")
        }
    }

    fn set_property_secondary_icon_name(&self, secondary_icon_name: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-name\0".as_ptr() as *const _,
                Value::from(secondary_icon_name).to_glib_none().0,
            );
        }
    }

    fn get_property_secondary_icon_paintable(&self) -> Option<gdk::Paintable> {
        unsafe {
            let mut value = Value::from_type(<gdk::Paintable as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-paintable\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-paintable` getter")
        }
    }

    fn set_property_secondary_icon_paintable<P: IsA<gdk::Paintable> + SetValueOptional>(
        &self,
        secondary_icon_paintable: Option<&P>,
    ) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-paintable\0".as_ptr() as *const _,
                Value::from(secondary_icon_paintable).to_glib_none().0,
            );
        }
    }

    fn get_property_secondary_icon_sensitive(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-sensitive\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-sensitive` getter")
                .unwrap()
        }
    }

    fn set_property_secondary_icon_sensitive(&self, secondary_icon_sensitive: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-sensitive\0".as_ptr() as *const _,
                Value::from(&secondary_icon_sensitive).to_glib_none().0,
            );
        }
    }

    fn get_property_secondary_icon_storage_type(&self) -> ImageType {
        unsafe {
            let mut value = Value::from_type(<ImageType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-storage-type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-storage-type` getter")
                .unwrap()
        }
    }

    fn get_property_secondary_icon_tooltip_markup(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-tooltip-markup\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-tooltip-markup` getter")
        }
    }

    fn set_property_secondary_icon_tooltip_markup(
        &self,
        secondary_icon_tooltip_markup: Option<&str>,
    ) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-tooltip-markup\0".as_ptr() as *const _,
                Value::from(secondary_icon_tooltip_markup).to_glib_none().0,
            );
        }
    }

    fn get_property_secondary_icon_tooltip_text(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-tooltip-text\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondary-icon-tooltip-text` getter")
        }
    }

    fn set_property_secondary_icon_tooltip_text(&self, secondary_icon_tooltip_text: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondary-icon-tooltip-text\0".as_ptr() as *const _,
                Value::from(secondary_icon_tooltip_text).to_glib_none().0,
            );
        }
    }

    fn get_property_show_emoji_icon(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"show-emoji-icon\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `show-emoji-icon` getter")
                .unwrap()
        }
    }

    fn set_property_show_emoji_icon(&self, show_emoji_icon: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"show-emoji-icon\0".as_ptr() as *const _,
                Value::from(&show_emoji_icon).to_glib_none().0,
            );
        }
    }

    fn get_property_truncate_multiline(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"truncate-multiline\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `truncate-multiline` getter")
                .unwrap()
        }
    }

    fn set_property_truncate_multiline(&self, truncate_multiline: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"truncate-multiline\0".as_ptr() as *const _,
                Value::from(&truncate_multiline).to_glib_none().0,
            );
        }
    }

    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    activate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_activate(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("activate", &[])
                .unwrap()
        };
    }

    fn connect_icon_press<F: Fn(&Self, EntryIconPosition) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn icon_press_trampoline<P, F: Fn(&P, EntryIconPosition) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            icon_pos: gtk_sys::GtkEntryIconPosition,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Entry::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(icon_pos),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"icon-press\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    icon_press_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_release<F: Fn(&Self, EntryIconPosition) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn icon_release_trampoline<P, F: Fn(&P, EntryIconPosition) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            icon_pos: gtk_sys::GtkEntryIconPosition,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Entry::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(icon_pos),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"icon-release\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    icon_release_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_activates_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_activates_default_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::activates-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_activates_default_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_attributes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_attributes_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::attributes\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_attributes_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_buffer_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::buffer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_buffer_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_completion_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_completion_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::completion\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_completion_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_enable_emoji_completion_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_emoji_completion_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-emoji-completion\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_emoji_completion_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_extra_menu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_extra_menu_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::extra-menu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_extra_menu_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_has_frame_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_frame_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-frame\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_frame_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_im_module_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_im_module_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::im-module\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_im_module_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_input_hints_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_hints_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-hints\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_hints_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_input_purpose_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_purpose_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-purpose\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_purpose_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_invisible_char_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_invisible_char_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::invisible-char\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_invisible_char_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_invisible_char_set_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_invisible_char_set_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::invisible-char-set\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_invisible_char_set_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_max_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_length_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::max-length\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_max_length_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_overwrite_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_overwrite_mode_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::overwrite-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_overwrite_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_placeholder_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_placeholder_text_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::placeholder-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_placeholder_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_activatable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_activatable_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-activatable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_activatable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_gicon_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_gicon_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-gicon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_gicon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_name_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_paintable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_paintable_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-paintable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_paintable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_sensitive_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_sensitive_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-sensitive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_sensitive_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_storage_type_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_storage_type_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-storage-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_storage_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_tooltip_markup_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_tooltip_markup_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-tooltip-markup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_tooltip_markup_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_primary_icon_tooltip_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_icon_tooltip_text_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-icon-tooltip-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_icon_tooltip_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_progress_fraction_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_progress_fraction_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::progress-fraction\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_progress_fraction_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_progress_pulse_step_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_progress_pulse_step_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::progress-pulse-step\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_progress_pulse_step_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_scroll_offset_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_offset_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scroll-offset\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scroll_offset_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_activatable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_activatable_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-activatable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_activatable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_gicon_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_gicon_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-gicon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_gicon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_name_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_paintable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_paintable_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-paintable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_paintable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_sensitive_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_sensitive_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-sensitive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_sensitive_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_storage_type_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_storage_type_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-storage-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_storage_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_tooltip_markup_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_tooltip_markup_trampoline<
            P,
            F: Fn(&P) + 'static,
        >(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-tooltip-markup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_tooltip_markup_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondary_icon_tooltip_text_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_tooltip_text_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon-tooltip-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_tooltip_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_show_emoji_icon_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_emoji_icon_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-emoji-icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_emoji_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_tabs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tabs_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tabs\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tabs_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_text_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_length_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::text-length\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_text_length_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_truncate_multiline_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_truncate_multiline_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::truncate-multiline\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_truncate_multiline_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_visibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visibility_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkEntry,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Entry>,
        {
            let f: &F = &*(f as *const F);
            f(&Entry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::visibility\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_visibility_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Entry {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Entry")
    }
}
