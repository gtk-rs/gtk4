// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct SliceListModel(Object<gtk_sys::GtkSliceListModel, gtk_sys::GtkSliceListModelClass, SliceListModelClass>);

    match fn {
        get_type => || gtk_sys::gtk_slice_list_model_get_type(),
    }
}

impl SliceListModel {
    //pub fn new(model: /*Ignored*/&gio::ListModel, offset: u32, size: u32) -> SliceListModel {
    //    unsafe { TODO: call gtk_sys:gtk_slice_list_model_new() }
    //}

    pub fn new_for_type(item_type: glib::types::Type) -> SliceListModel {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_slice_list_model_new_for_type(
                item_type.to_glib(),
            ))
        }
    }
}

pub const NONE_SLICE_LIST_MODEL: Option<&SliceListModel> = None;

pub trait SliceListModelExt: 'static {
    //fn get_model(&self) -> /*Ignored*/Option<gio::ListModel>;

    fn get_offset(&self) -> u32;

    fn get_size(&self) -> u32;

    //fn set_model(&self, model: /*Ignored*/Option<&gio::ListModel>);

    fn set_offset(&self, offset: u32);

    fn set_size(&self, size: u32);

    fn get_property_item_type(&self) -> glib::types::Type;

    fn connect_property_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SliceListModel>> SliceListModelExt for O {
    //fn get_model(&self) -> /*Ignored*/Option<gio::ListModel> {
    //    unsafe { TODO: call gtk_sys:gtk_slice_list_model_get_model() }
    //}

    fn get_offset(&self) -> u32 {
        unsafe { gtk_sys::gtk_slice_list_model_get_offset(self.as_ref().to_glib_none().0) }
    }

    fn get_size(&self) -> u32 {
        unsafe { gtk_sys::gtk_slice_list_model_get_size(self.as_ref().to_glib_none().0) }
    }

    //fn set_model(&self, model: /*Ignored*/Option<&gio::ListModel>) {
    //    unsafe { TODO: call gtk_sys:gtk_slice_list_model_set_model() }
    //}

    fn set_offset(&self, offset: u32) {
        unsafe {
            gtk_sys::gtk_slice_list_model_set_offset(self.as_ref().to_glib_none().0, offset);
        }
    }

    fn set_size(&self, size: u32) {
        unsafe {
            gtk_sys::gtk_slice_list_model_set_size(self.as_ref().to_glib_none().0, size);
        }
    }

    fn get_property_item_type(&self) -> glib::types::Type {
        unsafe {
            let mut value = Value::from_type(<glib::types::Type as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"item-type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `item-type` getter")
                .unwrap()
        }
    }

    fn connect_property_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSliceListModel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SliceListModel>,
        {
            let f: &F = &*(f as *const F);
            f(&SliceListModel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_model_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_offset_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSliceListModel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SliceListModel>,
        {
            let f: &F = &*(f as *const F);
            f(&SliceListModel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::offset\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_offset_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkSliceListModel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SliceListModel>,
        {
            let f: &F = &*(f as *const F);
            f(&SliceListModel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_size_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SliceListModel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SliceListModel")
    }
}
