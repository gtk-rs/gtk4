// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Bin;
use Buildable;
use Container;
use Popover;
use Widget;

glib_wrapper! {
    pub struct PopoverMenu(Object<gtk_sys::GtkPopoverMenu, PopoverMenuClass>) @extends Popover, Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_popover_menu_get_type(),
    }
}

impl PopoverMenu {
    pub fn from_model<P: IsA<gio::MenuModel>>(model: Option<&P>) -> PopoverMenu {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_popover_menu_new_from_model(
                model.map(|p| p.as_ref()).to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    //pub fn from_model_full<P: IsA<gio::MenuModel>>(model: &P, flags: /*Ignored*/PopoverMenuFlags) -> PopoverMenu {
    //    unsafe { TODO: call gtk_sys:gtk_popover_menu_new_from_model_full() }
    //}

    pub fn get_menu_model(&self) -> Option<gio::MenuModel> {
        unsafe {
            from_glib_none(gtk_sys::gtk_popover_menu_get_menu_model(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_menu_model<P: IsA<gio::MenuModel>>(&self, model: &P) {
        unsafe {
            gtk_sys::gtk_popover_menu_set_menu_model(
                self.to_glib_none().0,
                model.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn get_property_visible_submenu(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"visible-submenu\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `visible-submenu` getter")
        }
    }

    pub fn set_property_visible_submenu(&self, visible_submenu: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"visible-submenu\0".as_ptr() as *const _,
                Value::from(visible_submenu).to_glib_none().0,
            );
        }
    }

    pub fn connect_property_menu_model_notify<F: Fn(&PopoverMenu) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<F: Fn(&PopoverMenu) + 'static>(
            this: *mut gtk_sys::GtkPopoverMenu,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::menu-model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_menu_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_visible_submenu_notify<F: Fn(&PopoverMenu) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_submenu_trampoline<F: Fn(&PopoverMenu) + 'static>(
            this: *mut gtk_sys::GtkPopoverMenu,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::visible-submenu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_visible_submenu_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for PopoverMenu {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PopoverMenu")
    }
}
