// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Adjustment;
use Buildable;
use Container;
use ListBoxRow;
use MovementStep;
use SelectionMode;
use Widget;

glib_wrapper! {
    pub struct ListBox(Object<gtk_sys::GtkListBox, ListBoxClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_list_box_get_type(),
    }
}

impl ListBox {
    pub fn new() -> ListBox {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_list_box_new()).unsafe_cast() }
    }

    pub fn bind_model<P: IsA<gio::ListModel>>(
        &self,
        model: Option<&P>,
        create_widget_func: Option<Box_<dyn Fn(&glib::Object) -> Widget + 'static>>,
    ) {
        let create_widget_func_data: Box_<Option<Box_<dyn Fn(&glib::Object) -> Widget + 'static>>> =
            Box_::new(create_widget_func);
        unsafe extern "C" fn create_widget_func_func<P: IsA<gio::ListModel>>(
            item: *mut gobject_sys::GObject,
            user_data: glib_sys::gpointer,
        ) -> *mut gtk_sys::GtkWidget {
            let item = from_glib_borrow(item);
            let callback: &Option<Box_<dyn Fn(&glib::Object) -> Widget + 'static>> =
                &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&item)
            } else {
                panic!("cannot get closure...")
            };
            res.to_glib_full()
        }
        let create_widget_func = if create_widget_func_data.is_some() {
            Some(create_widget_func_func::<P> as _)
        } else {
            None
        };
        unsafe extern "C" fn user_data_free_func_func<P: IsA<gio::ListModel>>(
            data: glib_sys::gpointer,
        ) {
            let _callback: Box_<Option<Box_<dyn Fn(&glib::Object) -> Widget + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call4 = Some(user_data_free_func_func::<P> as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&glib::Object) -> Widget + 'static>>> =
            create_widget_func_data;
        unsafe {
            gtk_sys::gtk_list_box_bind_model(
                self.to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
                create_widget_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call4,
            );
        }
    }

    pub fn drag_highlight_row<P: IsA<ListBoxRow>>(&self, row: &P) {
        unsafe {
            gtk_sys::gtk_list_box_drag_highlight_row(
                self.to_glib_none().0,
                row.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn drag_unhighlight_row(&self) {
        unsafe {
            gtk_sys::gtk_list_box_drag_unhighlight_row(self.to_glib_none().0);
        }
    }

    pub fn get_activate_on_single_click(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_list_box_get_activate_on_single_click(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_adjustment(&self) -> Option<Adjustment> {
        unsafe { from_glib_none(gtk_sys::gtk_list_box_get_adjustment(self.to_glib_none().0)) }
    }

    pub fn get_row_at_index(&self, index_: i32) -> Option<ListBoxRow> {
        unsafe {
            from_glib_none(gtk_sys::gtk_list_box_get_row_at_index(
                self.to_glib_none().0,
                index_,
            ))
        }
    }

    pub fn get_row_at_y(&self, y: i32) -> Option<ListBoxRow> {
        unsafe { from_glib_none(gtk_sys::gtk_list_box_get_row_at_y(self.to_glib_none().0, y)) }
    }

    pub fn get_selected_row(&self) -> Option<ListBoxRow> {
        unsafe {
            from_glib_none(gtk_sys::gtk_list_box_get_selected_row(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_selected_rows(&self) -> Vec<ListBoxRow> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(gtk_sys::gtk_list_box_get_selected_rows(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_selection_mode(&self) -> SelectionMode {
        unsafe {
            from_glib(gtk_sys::gtk_list_box_get_selection_mode(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_separators(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_list_box_get_show_separators(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn insert<P: IsA<Widget>>(&self, child: &P, position: i32) {
        unsafe {
            gtk_sys::gtk_list_box_insert(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                position,
            );
        }
    }

    pub fn invalidate_filter(&self) {
        unsafe {
            gtk_sys::gtk_list_box_invalidate_filter(self.to_glib_none().0);
        }
    }

    pub fn invalidate_headers(&self) {
        unsafe {
            gtk_sys::gtk_list_box_invalidate_headers(self.to_glib_none().0);
        }
    }

    pub fn invalidate_sort(&self) {
        unsafe {
            gtk_sys::gtk_list_box_invalidate_sort(self.to_glib_none().0);
        }
    }

    pub fn prepend<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_list_box_prepend(self.to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    pub fn select_all(&self) {
        unsafe {
            gtk_sys::gtk_list_box_select_all(self.to_glib_none().0);
        }
    }

    pub fn select_row<P: IsA<ListBoxRow>>(&self, row: Option<&P>) {
        unsafe {
            gtk_sys::gtk_list_box_select_row(
                self.to_glib_none().0,
                row.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn selected_foreach<P: FnMut(&ListBox, &ListBoxRow)>(&self, func: P) {
        let func_data: P = func;
        unsafe extern "C" fn func_func<P: FnMut(&ListBox, &ListBoxRow)>(
            box_: *mut gtk_sys::GtkListBox,
            row: *mut gtk_sys::GtkListBoxRow,
            user_data: glib_sys::gpointer,
        ) {
            let box_ = from_glib_borrow(box_);
            let row = from_glib_borrow(row);
            let callback: *mut P = user_data as *const _ as usize as *mut P;
            (*callback)(&box_, &row);
        }
        let func = Some(func_func::<P> as _);
        let super_callback0: &P = &func_data;
        unsafe {
            gtk_sys::gtk_list_box_selected_foreach(
                self.to_glib_none().0,
                func,
                super_callback0 as *const _ as usize as *mut _,
            );
        }
    }

    pub fn set_activate_on_single_click(&self, single: bool) {
        unsafe {
            gtk_sys::gtk_list_box_set_activate_on_single_click(
                self.to_glib_none().0,
                single.to_glib(),
            );
        }
    }

    pub fn set_adjustment<P: IsA<Adjustment>>(&self, adjustment: Option<&P>) {
        unsafe {
            gtk_sys::gtk_list_box_set_adjustment(
                self.to_glib_none().0,
                adjustment.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_filter_func(
        &self,
        filter_func: Option<Box_<dyn Fn(&ListBoxRow) -> bool + 'static>>,
    ) {
        let filter_func_data: Box_<Option<Box_<dyn Fn(&ListBoxRow) -> bool + 'static>>> =
            Box_::new(filter_func);
        unsafe extern "C" fn filter_func_func(
            row: *mut gtk_sys::GtkListBoxRow,
            user_data: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let row = from_glib_borrow(row);
            let callback: &Option<Box_<dyn Fn(&ListBoxRow) -> bool + 'static>> =
                &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&row)
            } else {
                panic!("cannot get closure...")
            };
            res.to_glib()
        }
        let filter_func = if filter_func_data.is_some() {
            Some(filter_func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&ListBoxRow) -> bool + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&ListBoxRow) -> bool + 'static>>> =
            filter_func_data;
        unsafe {
            gtk_sys::gtk_list_box_set_filter_func(
                self.to_glib_none().0,
                filter_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_header_func(
        &self,
        update_header: Option<Box_<dyn Fn(&ListBoxRow, Option<&ListBoxRow>) + 'static>>,
    ) {
        let update_header_data: Box_<
            Option<Box_<dyn Fn(&ListBoxRow, Option<&ListBoxRow>) + 'static>>,
        > = Box_::new(update_header);
        unsafe extern "C" fn update_header_func(
            row: *mut gtk_sys::GtkListBoxRow,
            before: *mut gtk_sys::GtkListBoxRow,
            user_data: glib_sys::gpointer,
        ) {
            let row = from_glib_borrow(row);
            let before: Borrowed<Option<ListBoxRow>> = from_glib_borrow(before);
            let callback: &Option<Box_<dyn Fn(&ListBoxRow, Option<&ListBoxRow>) + 'static>> =
                &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback(&row, before.as_ref().as_ref())
            } else {
                panic!("cannot get closure...")
            };
        }
        let update_header = if update_header_data.is_some() {
            Some(update_header_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&ListBoxRow, Option<&ListBoxRow>) + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func as _);
        let super_callback0: Box_<
            Option<Box_<dyn Fn(&ListBoxRow, Option<&ListBoxRow>) + 'static>>,
        > = update_header_data;
        unsafe {
            gtk_sys::gtk_list_box_set_header_func(
                self.to_glib_none().0,
                update_header,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_placeholder<P: IsA<Widget>>(&self, placeholder: Option<&P>) {
        unsafe {
            gtk_sys::gtk_list_box_set_placeholder(
                self.to_glib_none().0,
                placeholder.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_selection_mode(&self, mode: SelectionMode) {
        unsafe {
            gtk_sys::gtk_list_box_set_selection_mode(self.to_glib_none().0, mode.to_glib());
        }
    }

    pub fn set_show_separators(&self, show_separators: bool) {
        unsafe {
            gtk_sys::gtk_list_box_set_show_separators(
                self.to_glib_none().0,
                show_separators.to_glib(),
            );
        }
    }

    pub fn set_sort_func(
        &self,
        sort_func: Option<Box_<dyn Fn(&ListBoxRow, &ListBoxRow) -> i32 + 'static>>,
    ) {
        let sort_func_data: Box_<Option<Box_<dyn Fn(&ListBoxRow, &ListBoxRow) -> i32 + 'static>>> =
            Box_::new(sort_func);
        unsafe extern "C" fn sort_func_func(
            row1: *mut gtk_sys::GtkListBoxRow,
            row2: *mut gtk_sys::GtkListBoxRow,
            user_data: glib_sys::gpointer,
        ) -> libc::c_int {
            let row1 = from_glib_borrow(row1);
            let row2 = from_glib_borrow(row2);
            let callback: &Option<Box_<dyn Fn(&ListBoxRow, &ListBoxRow) -> i32 + 'static>> =
                &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&row1, &row2)
            } else {
                panic!("cannot get closure...")
            };
            res
        }
        let sort_func = if sort_func_data.is_some() {
            Some(sort_func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&ListBoxRow, &ListBoxRow) -> i32 + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&ListBoxRow, &ListBoxRow) -> i32 + 'static>>> =
            sort_func_data;
        unsafe {
            gtk_sys::gtk_list_box_set_sort_func(
                self.to_glib_none().0,
                sort_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn unselect_all(&self) {
        unsafe {
            gtk_sys::gtk_list_box_unselect_all(self.to_glib_none().0);
        }
    }

    pub fn unselect_row<P: IsA<ListBoxRow>>(&self, row: &P) {
        unsafe {
            gtk_sys::gtk_list_box_unselect_row(
                self.to_glib_none().0,
                row.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn get_property_accept_unpaired_release(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"accept-unpaired-release\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `accept-unpaired-release` getter")
                .unwrap()
        }
    }

    pub fn set_property_accept_unpaired_release(&self, accept_unpaired_release: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"accept-unpaired-release\0".as_ptr() as *const _,
                Value::from(&accept_unpaired_release).to_glib_none().0,
            );
        }
    }

    pub fn connect_activate_cursor_row<F: Fn(&ListBox) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_cursor_row_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"activate-cursor-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    activate_cursor_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_activate_cursor_row(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("activate-cursor-row", &[])
                .unwrap()
        };
    }

    pub fn connect_move_cursor<F: Fn(&ListBox, MovementStep, i32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn move_cursor_trampoline<
            F: Fn(&ListBox, MovementStep, i32) + 'static,
        >(
            this: *mut gtk_sys::GtkListBox,
            object: gtk_sys::GtkMovementStep,
            p0: libc::c_int,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object), p0)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"move-cursor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    move_cursor_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_move_cursor(&self, object: MovementStep, p0: i32) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("move-cursor", &[&object, &p0])
                .unwrap()
        };
    }

    pub fn connect_row_activated<F: Fn(&ListBox, &ListBoxRow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn row_activated_trampoline<F: Fn(&ListBox, &ListBoxRow) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            row: *mut gtk_sys::GtkListBoxRow,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(row))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"row-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    row_activated_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_row_selected<F: Fn(&ListBox, Option<&ListBoxRow>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn row_selected_trampoline<
            F: Fn(&ListBox, Option<&ListBoxRow>) + 'static,
        >(
            this: *mut gtk_sys::GtkListBox,
            row: *mut gtk_sys::GtkListBoxRow,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                Option::<ListBoxRow>::from_glib_borrow(row)
                    .as_ref()
                    .as_ref(),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"row-selected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    row_selected_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_select_all<F: Fn(&ListBox) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn select_all_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"select-all\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    select_all_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_select_all(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("select-all", &[])
                .unwrap()
        };
    }

    pub fn connect_selected_rows_changed<F: Fn(&ListBox) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn selected_rows_changed_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"selected-rows-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    selected_rows_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_toggle_cursor_row<F: Fn(&ListBox) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn toggle_cursor_row_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"toggle-cursor-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    toggle_cursor_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_toggle_cursor_row(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("toggle-cursor-row", &[])
                .unwrap()
        };
    }

    pub fn connect_unselect_all<F: Fn(&ListBox) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn unselect_all_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"unselect-all\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    unselect_all_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_unselect_all(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("unselect-all", &[])
                .unwrap()
        };
    }

    pub fn connect_property_accept_unpaired_release_notify<F: Fn(&ListBox) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_accept_unpaired_release_trampoline<
            F: Fn(&ListBox) + 'static,
        >(
            this: *mut gtk_sys::GtkListBox,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::accept-unpaired-release\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_accept_unpaired_release_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_activate_on_single_click_notify<F: Fn(&ListBox) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_activate_on_single_click_trampoline<
            F: Fn(&ListBox) + 'static,
        >(
            this: *mut gtk_sys::GtkListBox,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::activate-on-single-click\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_activate_on_single_click_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_selection_mode_notify<F: Fn(&ListBox) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_selection_mode_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::selection-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_selection_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_separators_notify<F: Fn(&ListBox) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_separators_trampoline<F: Fn(&ListBox) + 'static>(
            this: *mut gtk_sys::GtkListBox,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-separators\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_separators_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for ListBox {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for ListBox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ListBox")
    }
}
