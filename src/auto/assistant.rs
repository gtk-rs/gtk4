// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use AssistantPage;
use AssistantPageType;
use Bin;
use Buildable;
use Container;
use Root;
use Widget;
use Window;

glib_wrapper! {
    pub struct Assistant(Object<gtk_sys::GtkAssistant, AssistantClass>) @extends Window, Bin, Container, Widget, @implements Buildable, Root;

    match fn {
        get_type => || gtk_sys::gtk_assistant_get_type(),
    }
}

impl Assistant {
    pub fn new() -> Assistant {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_assistant_new()).unsafe_cast() }
    }

    pub fn add_action_widget<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_assistant_add_action_widget(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn append_page<P: IsA<Widget>>(&self, page: &P) -> i32 {
        unsafe {
            gtk_sys::gtk_assistant_append_page(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
            )
        }
    }

    pub fn commit(&self) {
        unsafe {
            gtk_sys::gtk_assistant_commit(self.to_glib_none().0);
        }
    }

    pub fn get_current_page(&self) -> i32 {
        unsafe { gtk_sys::gtk_assistant_get_current_page(self.to_glib_none().0) }
    }

    pub fn get_n_pages(&self) -> i32 {
        unsafe { gtk_sys::gtk_assistant_get_n_pages(self.to_glib_none().0) }
    }

    pub fn get_nth_page(&self, page_num: i32) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_assistant_get_nth_page(
                self.to_glib_none().0,
                page_num,
            ))
        }
    }

    pub fn get_page<P: IsA<Widget>>(&self, child: &P) -> Option<AssistantPage> {
        unsafe {
            from_glib_none(gtk_sys::gtk_assistant_get_page(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_page_complete<P: IsA<Widget>>(&self, page: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_assistant_get_page_complete(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_page_title<P: IsA<Widget>>(&self, page: &P) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_assistant_get_page_title(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_page_type<P: IsA<Widget>>(&self, page: &P) -> AssistantPageType {
        unsafe {
            from_glib(gtk_sys::gtk_assistant_get_page_type(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_pages(&self) -> Option<gio::ListModel> {
        unsafe { from_glib_full(gtk_sys::gtk_assistant_get_pages(self.to_glib_none().0)) }
    }

    pub fn insert_page<P: IsA<Widget>>(&self, page: &P, position: i32) -> i32 {
        unsafe {
            gtk_sys::gtk_assistant_insert_page(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
                position,
            )
        }
    }

    pub fn next_page(&self) {
        unsafe {
            gtk_sys::gtk_assistant_next_page(self.to_glib_none().0);
        }
    }

    pub fn prepend_page<P: IsA<Widget>>(&self, page: &P) -> i32 {
        unsafe {
            gtk_sys::gtk_assistant_prepend_page(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
            )
        }
    }

    pub fn previous_page(&self) {
        unsafe {
            gtk_sys::gtk_assistant_previous_page(self.to_glib_none().0);
        }
    }

    pub fn remove_action_widget<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_assistant_remove_action_widget(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn remove_page(&self, page_num: i32) {
        unsafe {
            gtk_sys::gtk_assistant_remove_page(self.to_glib_none().0, page_num);
        }
    }

    pub fn set_current_page(&self, page_num: i32) {
        unsafe {
            gtk_sys::gtk_assistant_set_current_page(self.to_glib_none().0, page_num);
        }
    }

    pub fn set_forward_page_func(&self, page_func: Option<Box_<dyn Fn(i32) -> i32 + 'static>>) {
        let page_func_data: Box_<Option<Box_<dyn Fn(i32) -> i32 + 'static>>> = Box_::new(page_func);
        unsafe extern "C" fn page_func_func(
            current_page: libc::c_int,
            data: glib_sys::gpointer,
        ) -> libc::c_int {
            let callback: &Option<Box_<dyn Fn(i32) -> i32 + 'static>> = &*(data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(current_page)
            } else {
                panic!("cannot get closure...")
            };
            res
        }
        let page_func = if page_func_data.is_some() {
            Some(page_func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(i32) -> i32 + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(i32) -> i32 + 'static>>> = page_func_data;
        unsafe {
            gtk_sys::gtk_assistant_set_forward_page_func(
                self.to_glib_none().0,
                page_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_page_complete<P: IsA<Widget>>(&self, page: &P, complete: bool) {
        unsafe {
            gtk_sys::gtk_assistant_set_page_complete(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
                complete.to_glib(),
            );
        }
    }

    pub fn set_page_title<P: IsA<Widget>>(&self, page: &P, title: &str) {
        unsafe {
            gtk_sys::gtk_assistant_set_page_title(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
                title.to_glib_none().0,
            );
        }
    }

    pub fn set_page_type<P: IsA<Widget>>(&self, page: &P, type_: AssistantPageType) {
        unsafe {
            gtk_sys::gtk_assistant_set_page_type(
                self.to_glib_none().0,
                page.as_ref().to_glib_none().0,
                type_.to_glib(),
            );
        }
    }

    pub fn update_buttons_state(&self) {
        unsafe {
            gtk_sys::gtk_assistant_update_buttons_state(self.to_glib_none().0);
        }
    }

    pub fn get_property_use_header_bar(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"use-header-bar\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `use-header-bar` getter")
                .unwrap()
        }
    }

    pub fn connect_apply<F: Fn(&Assistant) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn apply_trampoline<F: Fn(&Assistant) + 'static>(
            this: *mut gtk_sys::GtkAssistant,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"apply\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    apply_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_cancel<F: Fn(&Assistant) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cancel_trampoline<F: Fn(&Assistant) + 'static>(
            this: *mut gtk_sys::GtkAssistant,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"cancel\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    cancel_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_close<F: Fn(&Assistant) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn close_trampoline<F: Fn(&Assistant) + 'static>(
            this: *mut gtk_sys::GtkAssistant,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"close\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    close_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_escape<F: Fn(&Assistant) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn escape_trampoline<F: Fn(&Assistant) + 'static>(
            this: *mut gtk_sys::GtkAssistant,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"escape\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    escape_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_escape(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("escape", &[])
                .unwrap()
        };
    }

    pub fn connect_prepare<F: Fn(&Assistant, &Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn prepare_trampoline<F: Fn(&Assistant, &Widget) + 'static>(
            this: *mut gtk_sys::GtkAssistant,
            page: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(page))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"prepare\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    prepare_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_pages_notify<F: Fn(&Assistant) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_pages_trampoline<F: Fn(&Assistant) + 'static>(
            this: *mut gtk_sys::GtkAssistant,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pages\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pages_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for Assistant {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Assistant {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Assistant")
    }
}
