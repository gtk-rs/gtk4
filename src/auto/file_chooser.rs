// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use FileChooserAction;
use FileFilter;

glib_wrapper! {
    pub struct FileChooser(Interface<gtk_sys::GtkFileChooser>);

    match fn {
        get_type => || gtk_sys::gtk_file_chooser_get_type(),
    }
}

pub const NONE_FILE_CHOOSER: Option<&FileChooser> = None;

pub trait FileChooserExt: 'static {
    fn add_filter(&self, filter: &FileFilter);

    //fn add_shortcut_folder(&self, folder: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool;

    fn get_action(&self) -> FileChooserAction;

    fn get_choice(&self, id: &str) -> Option<GString>;

    fn get_create_folders(&self) -> bool;

    //fn get_current_folder(&self) -> /*Ignored*/Option<gio::File>;

    fn get_current_name(&self) -> Option<GString>;

    //fn get_file(&self) -> /*Ignored*/Option<gio::File>;

    //fn get_files(&self) -> /*Ignored*/Vec<gio::File>;

    fn get_filter(&self) -> Option<FileFilter>;

    fn get_select_multiple(&self) -> bool;

    fn list_filters(&self) -> Vec<FileFilter>;

    //fn list_shortcut_folders(&self) -> /*Ignored*/Vec<gio::File>;

    fn remove_choice(&self, id: &str);

    fn remove_filter(&self, filter: &FileFilter);

    //fn remove_shortcut_folder(&self, folder: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool;

    fn select_all(&self);

    //fn select_file(&self, file: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool;

    fn set_action(&self, action: FileChooserAction);

    fn set_choice(&self, id: &str, option: &str);

    fn set_create_folders(&self, create_folders: bool);

    //fn set_current_folder(&self, file: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool;

    fn set_current_name<P: AsRef<std::path::Path>>(&self, name: P);

    //fn set_file(&self, file: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool;

    fn set_filter(&self, filter: &FileFilter);

    fn set_select_multiple(&self, select_multiple: bool);

    fn unselect_all(&self);

    //fn unselect_file(&self, file: /*Ignored*/&gio::File);

    fn connect_current_folder_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_file_activated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_create_folders_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_filter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_select_multiple_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<FileChooser>> FileChooserExt for O {
    fn add_filter(&self, filter: &FileFilter) {
        unsafe {
            gtk_sys::gtk_file_chooser_add_filter(
                self.as_ref().to_glib_none().0,
                filter.to_glib_full(),
            );
        }
    }

    //fn add_shortcut_folder(&self, folder: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_add_shortcut_folder() }
    //}

    fn get_action(&self) -> FileChooserAction {
        unsafe {
            from_glib(gtk_sys::gtk_file_chooser_get_action(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_choice(&self, id: &str) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_file_chooser_get_choice(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    fn get_create_folders(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_file_chooser_get_create_folders(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn get_current_folder(&self) -> /*Ignored*/Option<gio::File> {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_get_current_folder() }
    //}

    fn get_current_name(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_file_chooser_get_current_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn get_file(&self) -> /*Ignored*/Option<gio::File> {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_get_file() }
    //}

    //fn get_files(&self) -> /*Ignored*/Vec<gio::File> {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_get_files() }
    //}

    fn get_filter(&self) -> Option<FileFilter> {
        unsafe {
            from_glib_none(gtk_sys::gtk_file_chooser_get_filter(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_select_multiple(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_file_chooser_get_select_multiple(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn list_filters(&self) -> Vec<FileFilter> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(gtk_sys::gtk_file_chooser_list_filters(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn list_shortcut_folders(&self) -> /*Ignored*/Vec<gio::File> {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_list_shortcut_folders() }
    //}

    fn remove_choice(&self, id: &str) {
        unsafe {
            gtk_sys::gtk_file_chooser_remove_choice(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            );
        }
    }

    fn remove_filter(&self, filter: &FileFilter) {
        unsafe {
            gtk_sys::gtk_file_chooser_remove_filter(
                self.as_ref().to_glib_none().0,
                filter.to_glib_none().0,
            );
        }
    }

    //fn remove_shortcut_folder(&self, folder: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_remove_shortcut_folder() }
    //}

    fn select_all(&self) {
        unsafe {
            gtk_sys::gtk_file_chooser_select_all(self.as_ref().to_glib_none().0);
        }
    }

    //fn select_file(&self, file: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_select_file() }
    //}

    fn set_action(&self, action: FileChooserAction) {
        unsafe {
            gtk_sys::gtk_file_chooser_set_action(self.as_ref().to_glib_none().0, action.to_glib());
        }
    }

    fn set_choice(&self, id: &str, option: &str) {
        unsafe {
            gtk_sys::gtk_file_chooser_set_choice(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
                option.to_glib_none().0,
            );
        }
    }

    fn set_create_folders(&self, create_folders: bool) {
        unsafe {
            gtk_sys::gtk_file_chooser_set_create_folders(
                self.as_ref().to_glib_none().0,
                create_folders.to_glib(),
            );
        }
    }

    //fn set_current_folder(&self, file: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_set_current_folder() }
    //}

    fn set_current_name<P: AsRef<std::path::Path>>(&self, name: P) {
        unsafe {
            gtk_sys::gtk_file_chooser_set_current_name(
                self.as_ref().to_glib_none().0,
                name.as_ref().to_glib_none().0,
            );
        }
    }

    //fn set_file(&self, file: /*Ignored*/&gio::File, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_set_file() }
    //}

    fn set_filter(&self, filter: &FileFilter) {
        unsafe {
            gtk_sys::gtk_file_chooser_set_filter(
                self.as_ref().to_glib_none().0,
                filter.to_glib_none().0,
            );
        }
    }

    fn set_select_multiple(&self, select_multiple: bool) {
        unsafe {
            gtk_sys::gtk_file_chooser_set_select_multiple(
                self.as_ref().to_glib_none().0,
                select_multiple.to_glib(),
            );
        }
    }

    fn unselect_all(&self) {
        unsafe {
            gtk_sys::gtk_file_chooser_unselect_all(self.as_ref().to_glib_none().0);
        }
    }

    //fn unselect_file(&self, file: /*Ignored*/&gio::File) {
    //    unsafe { TODO: call gtk_sys:gtk_file_chooser_unselect_file() }
    //}

    fn connect_current_folder_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn current_folder_changed_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"current-folder-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    current_folder_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_file_activated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn file_activated_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"file-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    file_activated_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn selection_changed_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"selection-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    selection_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_action_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::action\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_action_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_create_folders_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_create_folders_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::create-folders\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_create_folders_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_filter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_filter_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::filter\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_filter_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_select_multiple_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_select_multiple_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFileChooser,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FileChooser>,
        {
            let f: &F = &*(f as *const F);
            f(&FileChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::select-multiple\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_select_multiple_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FileChooser {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FileChooser")
    }
}
