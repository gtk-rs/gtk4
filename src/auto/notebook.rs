// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use Container;
use DirectionType;
use NotebookPage;
use NotebookTab;
use PackType;
use PositionType;
use Widget;

glib_wrapper! {
    pub struct Notebook(Object<gtk_sys::GtkNotebook, NotebookClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_notebook_get_type(),
    }
}

impl Notebook {
    pub fn new() -> Notebook {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_notebook_new()).unsafe_cast() }
    }

    pub fn detach_tab<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_notebook_detach_tab(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn get_action_widget(&self, pack_type: PackType) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_notebook_get_action_widget(
                self.to_glib_none().0,
                pack_type.to_glib(),
            ))
        }
    }

    pub fn get_group_name(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_notebook_get_group_name(self.to_glib_none().0)) }
    }

    pub fn get_menu_label<P: IsA<Widget>>(&self, child: &P) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_notebook_get_menu_label(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_menu_label_text<P: IsA<Widget>>(&self, child: &P) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_notebook_get_menu_label_text(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_page<P: IsA<Widget>>(&self, child: &P) -> Option<NotebookPage> {
        unsafe {
            from_glib_none(gtk_sys::gtk_notebook_get_page(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_pages(&self) -> Option<gio::ListModel> {
        unsafe { from_glib_full(gtk_sys::gtk_notebook_get_pages(self.to_glib_none().0)) }
    }

    pub fn get_scrollable(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_notebook_get_scrollable(self.to_glib_none().0)) }
    }

    pub fn get_show_border(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_notebook_get_show_border(self.to_glib_none().0)) }
    }

    pub fn get_show_tabs(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_notebook_get_show_tabs(self.to_glib_none().0)) }
    }

    pub fn get_tab_detachable<P: IsA<Widget>>(&self, child: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_notebook_get_tab_detachable(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_tab_label<P: IsA<Widget>>(&self, child: &P) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_notebook_get_tab_label(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_tab_label_text<P: IsA<Widget>>(&self, child: &P) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_notebook_get_tab_label_text(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_tab_pos(&self) -> PositionType {
        unsafe { from_glib(gtk_sys::gtk_notebook_get_tab_pos(self.to_glib_none().0)) }
    }

    pub fn get_tab_reorderable<P: IsA<Widget>>(&self, child: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_notebook_get_tab_reorderable(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn next_page(&self) {
        unsafe {
            gtk_sys::gtk_notebook_next_page(self.to_glib_none().0);
        }
    }

    pub fn popup_disable(&self) {
        unsafe {
            gtk_sys::gtk_notebook_popup_disable(self.to_glib_none().0);
        }
    }

    pub fn popup_enable(&self) {
        unsafe {
            gtk_sys::gtk_notebook_popup_enable(self.to_glib_none().0);
        }
    }

    pub fn prev_page(&self) {
        unsafe {
            gtk_sys::gtk_notebook_prev_page(self.to_glib_none().0);
        }
    }

    pub fn set_action_widget<P: IsA<Widget>>(&self, widget: &P, pack_type: PackType) {
        unsafe {
            gtk_sys::gtk_notebook_set_action_widget(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
                pack_type.to_glib(),
            );
        }
    }

    pub fn set_group_name(&self, group_name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_notebook_set_group_name(
                self.to_glib_none().0,
                group_name.to_glib_none().0,
            );
        }
    }

    pub fn set_menu_label<P: IsA<Widget>, Q: IsA<Widget>>(
        &self,
        child: &P,
        menu_label: Option<&Q>,
    ) {
        unsafe {
            gtk_sys::gtk_notebook_set_menu_label(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                menu_label.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_menu_label_text<P: IsA<Widget>>(&self, child: &P, menu_text: &str) {
        unsafe {
            gtk_sys::gtk_notebook_set_menu_label_text(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                menu_text.to_glib_none().0,
            );
        }
    }

    pub fn set_scrollable(&self, scrollable: bool) {
        unsafe {
            gtk_sys::gtk_notebook_set_scrollable(self.to_glib_none().0, scrollable.to_glib());
        }
    }

    pub fn set_show_border(&self, show_border: bool) {
        unsafe {
            gtk_sys::gtk_notebook_set_show_border(self.to_glib_none().0, show_border.to_glib());
        }
    }

    pub fn set_show_tabs(&self, show_tabs: bool) {
        unsafe {
            gtk_sys::gtk_notebook_set_show_tabs(self.to_glib_none().0, show_tabs.to_glib());
        }
    }

    pub fn set_tab_detachable<P: IsA<Widget>>(&self, child: &P, detachable: bool) {
        unsafe {
            gtk_sys::gtk_notebook_set_tab_detachable(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                detachable.to_glib(),
            );
        }
    }

    pub fn set_tab_label<P: IsA<Widget>, Q: IsA<Widget>>(&self, child: &P, tab_label: Option<&Q>) {
        unsafe {
            gtk_sys::gtk_notebook_set_tab_label(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                tab_label.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_tab_label_text<P: IsA<Widget>>(&self, child: &P, tab_text: &str) {
        unsafe {
            gtk_sys::gtk_notebook_set_tab_label_text(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                tab_text.to_glib_none().0,
            );
        }
    }

    pub fn set_tab_pos(&self, pos: PositionType) {
        unsafe {
            gtk_sys::gtk_notebook_set_tab_pos(self.to_glib_none().0, pos.to_glib());
        }
    }

    pub fn set_tab_reorderable<P: IsA<Widget>>(&self, child: &P, reorderable: bool) {
        unsafe {
            gtk_sys::gtk_notebook_set_tab_reorderable(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                reorderable.to_glib(),
            );
        }
    }

    pub fn get_property_enable_popup(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"enable-popup\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `enable-popup` getter")
                .unwrap()
        }
    }

    pub fn set_property_enable_popup(&self, enable_popup: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"enable-popup\0".as_ptr() as *const _,
                Value::from(&enable_popup).to_glib_none().0,
            );
        }
    }

    pub fn set_property_page(&self, page: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"page\0".as_ptr() as *const _,
                Value::from(&page).to_glib_none().0,
            );
        }
    }

    pub fn connect_change_current_page<F: Fn(&Notebook, i32) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn change_current_page_trampoline<
            F: Fn(&Notebook, i32) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkNotebook,
            object: libc::c_int,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), object).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"change-current-page\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    change_current_page_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_change_current_page(&self, object: i32) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("change-current-page", &[&object])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_change_current_page`")
            .unwrap()
    }

    pub fn connect_create_window<F: Fn(&Notebook, &Widget) -> Notebook + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn create_window_trampoline<
            F: Fn(&Notebook, &Widget) -> Notebook + 'static,
        >(
            this: *mut gtk_sys::GtkNotebook,
            page: *mut gtk_sys::GtkWidget,
            f: glib_sys::gpointer,
        ) -> *mut gtk_sys::GtkNotebook {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(page)) /*Not checked*/
                .to_glib_none()
                .0
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"create-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    create_window_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_focus_tab<F: Fn(&Notebook, NotebookTab) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn focus_tab_trampoline<
            F: Fn(&Notebook, NotebookTab) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkNotebook,
            object: gtk_sys::GtkNotebookTab,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"focus-tab\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    focus_tab_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_focus_tab(&self, object: NotebookTab) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("focus-tab", &[&object])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_focus_tab`")
            .unwrap()
    }

    pub fn connect_move_focus_out<F: Fn(&Notebook, DirectionType) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn move_focus_out_trampoline<
            F: Fn(&Notebook, DirectionType) + 'static,
        >(
            this: *mut gtk_sys::GtkNotebook,
            object: gtk_sys::GtkDirectionType,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"move-focus-out\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    move_focus_out_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_move_focus_out(&self, object: DirectionType) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("move-focus-out", &[&object])
                .unwrap()
        };
    }

    pub fn connect_page_added<F: Fn(&Notebook, &Widget, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn page_added_trampoline<F: Fn(&Notebook, &Widget, u32) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            child: *mut gtk_sys::GtkWidget,
            page_num: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(child), page_num)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"page-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    page_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_page_removed<F: Fn(&Notebook, &Widget, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn page_removed_trampoline<F: Fn(&Notebook, &Widget, u32) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            child: *mut gtk_sys::GtkWidget,
            page_num: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(child), page_num)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"page-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    page_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_page_reordered<F: Fn(&Notebook, &Widget, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn page_reordered_trampoline<F: Fn(&Notebook, &Widget, u32) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            child: *mut gtk_sys::GtkWidget,
            page_num: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(child), page_num)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"page-reordered\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    page_reordered_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_reorder_tab<F: Fn(&Notebook, DirectionType, bool) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn reorder_tab_trampoline<
            F: Fn(&Notebook, DirectionType, bool) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkNotebook,
            object: gtk_sys::GtkDirectionType,
            p0: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object), from_glib(p0)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"reorder-tab\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    reorder_tab_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_reorder_tab(&self, object: DirectionType, p0: bool) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("reorder-tab", &[&object, &p0])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_reorder_tab`")
            .unwrap()
    }

    pub fn connect_select_page<F: Fn(&Notebook, bool) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn select_page_trampoline<F: Fn(&Notebook, bool) -> bool + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            object: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"select-page\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    select_page_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_select_page(&self, object: bool) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("select-page", &[&object])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_select_page`")
            .unwrap()
    }

    pub fn connect_switch_page<F: Fn(&Notebook, &Widget, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn switch_page_trampoline<F: Fn(&Notebook, &Widget, u32) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            page: *mut gtk_sys::GtkWidget,
            page_num: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(page), page_num)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"switch-page\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    switch_page_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_enable_popup_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_popup_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-popup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_popup_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_group_name_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_name_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::group-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_group_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_page_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_page_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::page\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_page_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_pages_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_pages_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pages\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pages_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_scrollable_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_scrollable_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scrollable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scrollable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_border_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_border_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-border\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_border_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_tabs_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_tabs_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-tabs\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_tabs_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_tab_pos_notify<F: Fn(&Notebook) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_tab_pos_trampoline<F: Fn(&Notebook) + 'static>(
            this: *mut gtk_sys::GtkNotebook,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tab-pos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tab_pos_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for Notebook {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Notebook {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Notebook")
    }
}
