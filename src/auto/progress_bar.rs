// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use pango;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use Orientable;
use Widget;

glib_wrapper! {
    pub struct ProgressBar(Object<gtk_sys::GtkProgressBar, ProgressBarClass>) @extends Widget, @implements Buildable, Orientable;

    match fn {
        get_type => || gtk_sys::gtk_progress_bar_get_type(),
    }
}

impl ProgressBar {
    pub fn new() -> ProgressBar {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_progress_bar_new()).unsafe_cast() }
    }

    pub fn get_ellipsize(&self) -> pango::EllipsizeMode {
        unsafe {
            from_glib(gtk_sys::gtk_progress_bar_get_ellipsize(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_fraction(&self) -> f64 {
        unsafe { gtk_sys::gtk_progress_bar_get_fraction(self.to_glib_none().0) }
    }

    pub fn get_inverted(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_progress_bar_get_inverted(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_pulse_step(&self) -> f64 {
        unsafe { gtk_sys::gtk_progress_bar_get_pulse_step(self.to_glib_none().0) }
    }

    pub fn get_show_text(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_progress_bar_get_show_text(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_text(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_progress_bar_get_text(self.to_glib_none().0)) }
    }

    pub fn pulse(&self) {
        unsafe {
            gtk_sys::gtk_progress_bar_pulse(self.to_glib_none().0);
        }
    }

    pub fn set_ellipsize(&self, mode: pango::EllipsizeMode) {
        unsafe {
            gtk_sys::gtk_progress_bar_set_ellipsize(self.to_glib_none().0, mode.to_glib());
        }
    }

    pub fn set_fraction(&self, fraction: f64) {
        unsafe {
            gtk_sys::gtk_progress_bar_set_fraction(self.to_glib_none().0, fraction);
        }
    }

    pub fn set_inverted(&self, inverted: bool) {
        unsafe {
            gtk_sys::gtk_progress_bar_set_inverted(self.to_glib_none().0, inverted.to_glib());
        }
    }

    pub fn set_pulse_step(&self, fraction: f64) {
        unsafe {
            gtk_sys::gtk_progress_bar_set_pulse_step(self.to_glib_none().0, fraction);
        }
    }

    pub fn set_show_text(&self, show_text: bool) {
        unsafe {
            gtk_sys::gtk_progress_bar_set_show_text(self.to_glib_none().0, show_text.to_glib());
        }
    }

    pub fn set_text(&self, text: Option<&str>) {
        unsafe {
            gtk_sys::gtk_progress_bar_set_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }

    pub fn connect_property_ellipsize_notify<F: Fn(&ProgressBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_ellipsize_trampoline<F: Fn(&ProgressBar) + 'static>(
            this: *mut gtk_sys::GtkProgressBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ellipsize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ellipsize_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_fraction_notify<F: Fn(&ProgressBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_fraction_trampoline<F: Fn(&ProgressBar) + 'static>(
            this: *mut gtk_sys::GtkProgressBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fraction\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fraction_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_inverted_notify<F: Fn(&ProgressBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_inverted_trampoline<F: Fn(&ProgressBar) + 'static>(
            this: *mut gtk_sys::GtkProgressBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::inverted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_inverted_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_pulse_step_notify<F: Fn(&ProgressBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_pulse_step_trampoline<F: Fn(&ProgressBar) + 'static>(
            this: *mut gtk_sys::GtkProgressBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pulse-step\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pulse_step_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_text_notify<F: Fn(&ProgressBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_text_trampoline<F: Fn(&ProgressBar) + 'static>(
            this: *mut gtk_sys::GtkProgressBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_text_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_text_notify<F: Fn(&ProgressBar) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_trampoline<F: Fn(&ProgressBar) + 'static>(
            this: *mut gtk_sys::GtkProgressBar,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_text_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for ProgressBar {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for ProgressBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ProgressBar")
    }
}
