// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use Adjustment;
use Bin;
use Buildable;
use Container;
use CornerType;
use DirectionType;
use PolicyType;
use PositionType;
use ScrollType;
use ShadowType;
use Widget;

glib_wrapper! {
    pub struct ScrolledWindow(Object<gtk_sys::GtkScrolledWindow, ScrolledWindowClass>) @extends Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_scrolled_window_get_type(),
    }
}

impl ScrolledWindow {
    pub fn new<P: IsA<Adjustment>, Q: IsA<Adjustment>>(
        hadjustment: Option<&P>,
        vadjustment: Option<&Q>,
    ) -> ScrolledWindow {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_scrolled_window_new(
                hadjustment.map(|p| p.as_ref()).to_glib_none().0,
                vadjustment.map(|p| p.as_ref()).to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_capture_button_press(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_capture_button_press(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_hadjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(gtk_sys::gtk_scrolled_window_get_hadjustment(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_hscrollbar(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_scrolled_window_get_hscrollbar(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_kinetic_scrolling(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_kinetic_scrolling(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_max_content_height(&self) -> i32 {
        unsafe { gtk_sys::gtk_scrolled_window_get_max_content_height(self.to_glib_none().0) }
    }

    pub fn get_max_content_width(&self) -> i32 {
        unsafe { gtk_sys::gtk_scrolled_window_get_max_content_width(self.to_glib_none().0) }
    }

    pub fn get_min_content_height(&self) -> i32 {
        unsafe { gtk_sys::gtk_scrolled_window_get_min_content_height(self.to_glib_none().0) }
    }

    pub fn get_min_content_width(&self) -> i32 {
        unsafe { gtk_sys::gtk_scrolled_window_get_min_content_width(self.to_glib_none().0) }
    }

    pub fn get_overlay_scrolling(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_overlay_scrolling(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_placement(&self) -> CornerType {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_placement(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_policy(&self) -> (PolicyType, PolicyType) {
        unsafe {
            let mut hscrollbar_policy = mem::MaybeUninit::uninit();
            let mut vscrollbar_policy = mem::MaybeUninit::uninit();
            gtk_sys::gtk_scrolled_window_get_policy(
                self.to_glib_none().0,
                hscrollbar_policy.as_mut_ptr(),
                vscrollbar_policy.as_mut_ptr(),
            );
            let hscrollbar_policy = hscrollbar_policy.assume_init();
            let vscrollbar_policy = vscrollbar_policy.assume_init();
            (from_glib(hscrollbar_policy), from_glib(vscrollbar_policy))
        }
    }

    pub fn get_propagate_natural_height(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_propagate_natural_height(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_propagate_natural_width(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_propagate_natural_width(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_shadow_type(&self) -> ShadowType {
        unsafe {
            from_glib(gtk_sys::gtk_scrolled_window_get_shadow_type(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_vadjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(gtk_sys::gtk_scrolled_window_get_vadjustment(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_vscrollbar(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_scrolled_window_get_vscrollbar(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_capture_button_press(&self, capture_button_press: bool) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_capture_button_press(
                self.to_glib_none().0,
                capture_button_press.to_glib(),
            );
        }
    }

    pub fn set_hadjustment<P: IsA<Adjustment>>(&self, hadjustment: Option<&P>) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_hadjustment(
                self.to_glib_none().0,
                hadjustment.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_kinetic_scrolling(&self, kinetic_scrolling: bool) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_kinetic_scrolling(
                self.to_glib_none().0,
                kinetic_scrolling.to_glib(),
            );
        }
    }

    pub fn set_max_content_height(&self, height: i32) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_max_content_height(self.to_glib_none().0, height);
        }
    }

    pub fn set_max_content_width(&self, width: i32) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_max_content_width(self.to_glib_none().0, width);
        }
    }

    pub fn set_min_content_height(&self, height: i32) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_min_content_height(self.to_glib_none().0, height);
        }
    }

    pub fn set_min_content_width(&self, width: i32) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_min_content_width(self.to_glib_none().0, width);
        }
    }

    pub fn set_overlay_scrolling(&self, overlay_scrolling: bool) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_overlay_scrolling(
                self.to_glib_none().0,
                overlay_scrolling.to_glib(),
            );
        }
    }

    pub fn set_placement(&self, window_placement: CornerType) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_placement(
                self.to_glib_none().0,
                window_placement.to_glib(),
            );
        }
    }

    pub fn set_policy(&self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_policy(
                self.to_glib_none().0,
                hscrollbar_policy.to_glib(),
                vscrollbar_policy.to_glib(),
            );
        }
    }

    pub fn set_propagate_natural_height(&self, propagate: bool) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_propagate_natural_height(
                self.to_glib_none().0,
                propagate.to_glib(),
            );
        }
    }

    pub fn set_propagate_natural_width(&self, propagate: bool) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_propagate_natural_width(
                self.to_glib_none().0,
                propagate.to_glib(),
            );
        }
    }

    pub fn set_shadow_type(&self, type_: ShadowType) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_shadow_type(self.to_glib_none().0, type_.to_glib());
        }
    }

    pub fn set_vadjustment<P: IsA<Adjustment>>(&self, vadjustment: Option<&P>) {
        unsafe {
            gtk_sys::gtk_scrolled_window_set_vadjustment(
                self.to_glib_none().0,
                vadjustment.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn unset_placement(&self) {
        unsafe {
            gtk_sys::gtk_scrolled_window_unset_placement(self.to_glib_none().0);
        }
    }

    pub fn get_property_hscrollbar_policy(&self) -> PolicyType {
        unsafe {
            let mut value = Value::from_type(<PolicyType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"hscrollbar-policy\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `hscrollbar-policy` getter")
                .unwrap()
        }
    }

    pub fn set_property_hscrollbar_policy(&self, hscrollbar_policy: PolicyType) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"hscrollbar-policy\0".as_ptr() as *const _,
                Value::from(&hscrollbar_policy).to_glib_none().0,
            );
        }
    }

    pub fn get_property_vscrollbar_policy(&self) -> PolicyType {
        unsafe {
            let mut value = Value::from_type(<PolicyType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"vscrollbar-policy\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `vscrollbar-policy` getter")
                .unwrap()
        }
    }

    pub fn set_property_vscrollbar_policy(&self, vscrollbar_policy: PolicyType) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"vscrollbar-policy\0".as_ptr() as *const _,
                Value::from(&vscrollbar_policy).to_glib_none().0,
            );
        }
    }

    pub fn get_property_window_placement(&self) -> CornerType {
        unsafe {
            let mut value = Value::from_type(<CornerType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"window-placement\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `window-placement` getter")
                .unwrap()
        }
    }

    pub fn set_property_window_placement(&self, window_placement: CornerType) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"window-placement\0".as_ptr() as *const _,
                Value::from(&window_placement).to_glib_none().0,
            );
        }
    }

    pub fn connect_edge_overshot<F: Fn(&ScrolledWindow, PositionType) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn edge_overshot_trampoline<
            F: Fn(&ScrolledWindow, PositionType) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            pos: gtk_sys::GtkPositionType,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(pos))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"edge-overshot\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    edge_overshot_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_edge_reached<F: Fn(&ScrolledWindow, PositionType) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn edge_reached_trampoline<
            F: Fn(&ScrolledWindow, PositionType) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            pos: gtk_sys::GtkPositionType,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(pos))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"edge-reached\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    edge_reached_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_move_focus_out<F: Fn(&ScrolledWindow, DirectionType) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn move_focus_out_trampoline<
            F: Fn(&ScrolledWindow, DirectionType) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            direction_type: gtk_sys::GtkDirectionType,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(direction_type))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"move-focus-out\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    move_focus_out_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_move_focus_out(&self, direction_type: DirectionType) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("move-focus-out", &[&direction_type])
                .unwrap()
        };
    }

    pub fn connect_scroll_child<F: Fn(&ScrolledWindow, ScrollType, bool) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn scroll_child_trampoline<
            F: Fn(&ScrolledWindow, ScrollType, bool) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            scroll: gtk_sys::GtkScrollType,
            horizontal: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                from_glib(scroll),
                from_glib(horizontal),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"scroll-child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    scroll_child_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_scroll_child(&self, scroll: ScrollType, horizontal: bool) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("scroll-child", &[&scroll, &horizontal])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_scroll_child`")
            .unwrap()
    }

    pub fn connect_property_hadjustment_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hadjustment_trampoline<F: Fn(&ScrolledWindow) + 'static>(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hadjustment\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hadjustment_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_hscrollbar_policy_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hscrollbar_policy_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hscrollbar-policy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hscrollbar_policy_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_kinetic_scrolling_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_kinetic_scrolling_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::kinetic-scrolling\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_kinetic_scrolling_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_max_content_height_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_content_height_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::max-content-height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_max_content_height_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_max_content_width_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_content_width_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::max-content-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_max_content_width_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_min_content_height_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_min_content_height_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::min-content-height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_min_content_height_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_min_content_width_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_min_content_width_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::min-content-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_min_content_width_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_overlay_scrolling_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_overlay_scrolling_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::overlay-scrolling\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_overlay_scrolling_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_propagate_natural_height_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_propagate_natural_height_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::propagate-natural-height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_propagate_natural_height_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_propagate_natural_width_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_propagate_natural_width_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::propagate-natural-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_propagate_natural_width_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_shadow_type_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_shadow_type_trampoline<F: Fn(&ScrolledWindow) + 'static>(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::shadow-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_shadow_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_vadjustment_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_vadjustment_trampoline<F: Fn(&ScrolledWindow) + 'static>(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vadjustment\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vadjustment_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_vscrollbar_policy_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_vscrollbar_policy_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vscrollbar-policy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vscrollbar_policy_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_window_placement_notify<F: Fn(&ScrolledWindow) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_placement_trampoline<
            F: Fn(&ScrolledWindow) + 'static,
        >(
            this: *mut gtk_sys::GtkScrolledWindow,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::window-placement\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_window_placement_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ScrolledWindow {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ScrolledWindow")
    }
}
