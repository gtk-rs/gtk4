// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use Bin;
use Buildable;
use Container;
use Widget;

glib_wrapper! {
    pub struct Overlay(Object<gtk_sys::GtkOverlay, OverlayClass>) @extends Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_overlay_get_type(),
    }
}

impl Overlay {
    pub fn new() -> Overlay {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_overlay_new()).unsafe_cast() }
    }

    pub fn add_overlay<P: IsA<Widget>>(&self, widget: &P) {
        unsafe {
            gtk_sys::gtk_overlay_add_overlay(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn get_clip_overlay<P: IsA<Widget>>(&self, widget: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_overlay_get_clip_overlay(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_measure_overlay<P: IsA<Widget>>(&self, widget: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_overlay_get_measure_overlay(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn set_clip_overlay<P: IsA<Widget>>(&self, widget: &P, clip_overlay: bool) {
        unsafe {
            gtk_sys::gtk_overlay_set_clip_overlay(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
                clip_overlay.to_glib(),
            );
        }
    }

    pub fn set_measure_overlay<P: IsA<Widget>>(&self, widget: &P, measure: bool) {
        unsafe {
            gtk_sys::gtk_overlay_set_measure_overlay(
                self.to_glib_none().0,
                widget.as_ref().to_glib_none().0,
                measure.to_glib(),
            );
        }
    }

    //pub fn connect_get_child_position<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Out allocation: Gdk.Rectangle
    //}
}

impl Default for Overlay {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Overlay {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Overlay")
    }
}
