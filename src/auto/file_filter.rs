// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use FileFilterFlags;

glib_wrapper! {
    pub struct FileFilter(Object<gtk_sys::GtkFileFilter, FileFilterClass>) @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_file_filter_get_type(),
    }
}

impl FileFilter {
    pub fn new() -> FileFilter {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(gtk_sys::gtk_file_filter_new()) }
    }

    //pub fn from_gvariant(variant: /*Ignored*/&glib::Variant) -> FileFilter {
    //    unsafe { TODO: call gtk_sys:gtk_file_filter_new_from_gvariant() }
    //}

    //pub fn add_custom(&self, needed: FileFilterFlags, func: /*Unimplemented*/Fn(/*Ignored*/FileFilterInfo) -> bool, data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call gtk_sys:gtk_file_filter_add_custom() }
    //}

    pub fn add_mime_type(&self, mime_type: &str) {
        unsafe {
            gtk_sys::gtk_file_filter_add_mime_type(
                self.to_glib_none().0,
                mime_type.to_glib_none().0,
            );
        }
    }

    pub fn add_pattern(&self, pattern: &str) {
        unsafe {
            gtk_sys::gtk_file_filter_add_pattern(self.to_glib_none().0, pattern.to_glib_none().0);
        }
    }

    pub fn add_pixbuf_formats(&self) {
        unsafe {
            gtk_sys::gtk_file_filter_add_pixbuf_formats(self.to_glib_none().0);
        }
    }

    //pub fn filter(&self, filter_info: /*Ignored*/&FileFilterInfo) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_file_filter_filter() }
    //}

    pub fn get_needed(&self) -> FileFilterFlags {
        unsafe { from_glib(gtk_sys::gtk_file_filter_get_needed(self.to_glib_none().0)) }
    }

    //pub fn to_gvariant(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call gtk_sys:gtk_file_filter_to_gvariant() }
    //}

    pub fn connect_property_name_notify<F: Fn(&FileFilter) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&FileFilter) + 'static>(
            this: *mut gtk_sys::GtkFileFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for FileFilter {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(Clone, Default)]
pub struct FileFilterBuilder {
    name: Option<String>,
}

impl FileFilterBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> FileFilter {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref name) = self.name {
            properties.push(("name", name));
        }
        let ret = glib::Object::new(FileFilter::static_type(), &properties)
            .expect("object new")
            .downcast::<FileFilter>()
            .expect("downcast");
        ret
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }
}

impl fmt::Display for FileFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FileFilter")
    }
}
