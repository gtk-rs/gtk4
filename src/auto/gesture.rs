// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use gobject_sys;
use gtk_sys;
use std::fmt;
use std::mem;
use EventController;
use EventSequenceState;

glib_wrapper! {
    pub struct Gesture(Object<gtk_sys::GtkGesture, gtk_sys::GtkGestureClass, GestureClass>) @extends EventController;

    match fn {
        get_type => || gtk_sys::gtk_gesture_get_type(),
    }
}

pub const NONE_GESTURE: Option<&Gesture> = None;

pub trait GestureExt: 'static {
    //fn get_bounding_box(&self, rect: /*Ignored*/gdk::Rectangle) -> bool;

    fn get_bounding_box_center(&self) -> Option<(f64, f64)>;

    //fn get_device(&self) -> /*Ignored*/Option<gdk::Device>;

    fn get_group(&self) -> Vec<Gesture>;

    //fn get_last_event(&self, sequence: /*Ignored*/Option<&gdk::EventSequence>) -> /*Ignored*/Option<gdk::Event>;

    //fn get_last_updated_sequence(&self) -> /*Ignored*/Option<gdk::EventSequence>;

    //fn get_point(&self, sequence: /*Ignored*/Option<&gdk::EventSequence>) -> Option<(f64, f64)>;

    //fn get_sequence_state(&self, sequence: /*Ignored*/&gdk::EventSequence) -> EventSequenceState;

    //fn get_sequences(&self) -> /*Ignored*/Vec<gdk::EventSequence>;

    fn group<P: IsA<Gesture>>(&self, gesture: &P);

    //fn handles_sequence(&self, sequence: /*Ignored*/Option<&gdk::EventSequence>) -> bool;

    fn is_active(&self) -> bool;

    fn is_grouped_with<P: IsA<Gesture>>(&self, other: &P) -> bool;

    fn is_recognized(&self) -> bool;

    //fn set_sequence_state(&self, sequence: /*Ignored*/&gdk::EventSequence, state: EventSequenceState) -> bool;

    fn set_state(&self, state: EventSequenceState) -> bool;

    fn ungroup(&self);

    fn get_property_n_points(&self) -> u32;

    //fn connect_begin<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_cancel<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_end<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_sequence_state_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_update<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Gesture>> GestureExt for O {
    //fn get_bounding_box(&self, rect: /*Ignored*/gdk::Rectangle) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_bounding_box() }
    //}

    fn get_bounding_box_center(&self) -> Option<(f64, f64)> {
        unsafe {
            let mut x = mem::MaybeUninit::uninit();
            let mut y = mem::MaybeUninit::uninit();
            let ret = from_glib(gtk_sys::gtk_gesture_get_bounding_box_center(
                self.as_ref().to_glib_none().0,
                x.as_mut_ptr(),
                y.as_mut_ptr(),
            ));
            let x = x.assume_init();
            let y = y.assume_init();
            if ret {
                Some((x, y))
            } else {
                None
            }
        }
    }

    //fn get_device(&self) -> /*Ignored*/Option<gdk::Device> {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_device() }
    //}

    fn get_group(&self) -> Vec<Gesture> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(gtk_sys::gtk_gesture_get_group(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn get_last_event(&self, sequence: /*Ignored*/Option<&gdk::EventSequence>) -> /*Ignored*/Option<gdk::Event> {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_last_event() }
    //}

    //fn get_last_updated_sequence(&self) -> /*Ignored*/Option<gdk::EventSequence> {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_last_updated_sequence() }
    //}

    //fn get_point(&self, sequence: /*Ignored*/Option<&gdk::EventSequence>) -> Option<(f64, f64)> {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_point() }
    //}

    //fn get_sequence_state(&self, sequence: /*Ignored*/&gdk::EventSequence) -> EventSequenceState {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_sequence_state() }
    //}

    //fn get_sequences(&self) -> /*Ignored*/Vec<gdk::EventSequence> {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_get_sequences() }
    //}

    fn group<P: IsA<Gesture>>(&self, gesture: &P) {
        unsafe {
            gtk_sys::gtk_gesture_group(
                self.as_ref().to_glib_none().0,
                gesture.as_ref().to_glib_none().0,
            );
        }
    }

    //fn handles_sequence(&self, sequence: /*Ignored*/Option<&gdk::EventSequence>) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_handles_sequence() }
    //}

    fn is_active(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gesture_is_active(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_grouped_with<P: IsA<Gesture>>(&self, other: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gesture_is_grouped_with(
                self.as_ref().to_glib_none().0,
                other.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_recognized(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gesture_is_recognized(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn set_sequence_state(&self, sequence: /*Ignored*/&gdk::EventSequence, state: EventSequenceState) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_gesture_set_sequence_state() }
    //}

    fn set_state(&self, state: EventSequenceState) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gesture_set_state(
                self.as_ref().to_glib_none().0,
                state.to_glib(),
            ))
        }
    }

    fn ungroup(&self) {
        unsafe {
            gtk_sys::gtk_gesture_ungroup(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_n_points(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"n-points\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `n-points` getter")
                .unwrap()
        }
    }

    //fn connect_begin<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored sequence: Gdk.EventSequence
    //}

    //fn connect_cancel<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored sequence: Gdk.EventSequence
    //}

    //fn connect_end<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored sequence: Gdk.EventSequence
    //}

    //fn connect_sequence_state_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored sequence: Gdk.EventSequence
    //}

    //fn connect_update<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored sequence: Gdk.EventSequence
    //}
}

impl fmt::Display for Gesture {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Gesture")
    }
}
