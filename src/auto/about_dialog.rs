// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Bin;
use Buildable;
use Container;
use Dialog;
use License;
use Root;
use Widget;
use Window;

glib_wrapper! {
    pub struct AboutDialog(Object<gtk_sys::GtkAboutDialog, AboutDialogClass>) @extends Dialog, Window, Bin, Container, Widget, @implements Buildable, Root;

    match fn {
        get_type => || gtk_sys::gtk_about_dialog_get_type(),
    }
}

impl AboutDialog {
    pub fn new() -> AboutDialog {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_about_dialog_new()).unsafe_cast() }
    }

    pub fn add_credit_section(&self, section_name: &str, people: &[&str]) {
        unsafe {
            gtk_sys::gtk_about_dialog_add_credit_section(
                self.to_glib_none().0,
                section_name.to_glib_none().0,
                people.to_glib_none().0,
            );
        }
    }

    pub fn get_artists(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_sys::gtk_about_dialog_get_artists(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_authors(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_sys::gtk_about_dialog_get_authors(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_comments(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_comments(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_copyright(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_copyright(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_documenters(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_sys::gtk_about_dialog_get_documenters(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_license(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_about_dialog_get_license(self.to_glib_none().0)) }
    }

    pub fn get_license_type(&self) -> License {
        unsafe {
            from_glib(gtk_sys::gtk_about_dialog_get_license_type(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_logo(&self) -> Option<gdk::Paintable> {
        unsafe { from_glib_none(gtk_sys::gtk_about_dialog_get_logo(self.to_glib_none().0)) }
    }

    pub fn get_logo_icon_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_logo_icon_name(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_program_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_program_name(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_system_information(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_system_information(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_translator_credits(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_translator_credits(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_version(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_about_dialog_get_version(self.to_glib_none().0)) }
    }

    pub fn get_website(&self) -> Option<GString> {
        unsafe { from_glib_none(gtk_sys::gtk_about_dialog_get_website(self.to_glib_none().0)) }
    }

    pub fn get_website_label(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_about_dialog_get_website_label(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_wrap_license(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_about_dialog_get_wrap_license(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_artists(&self, artists: &[&str]) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_artists(self.to_glib_none().0, artists.to_glib_none().0);
        }
    }

    pub fn set_authors(&self, authors: &[&str]) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_authors(self.to_glib_none().0, authors.to_glib_none().0);
        }
    }

    pub fn set_comments(&self, comments: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_comments(
                self.to_glib_none().0,
                comments.to_glib_none().0,
            );
        }
    }

    pub fn set_copyright(&self, copyright: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_copyright(
                self.to_glib_none().0,
                copyright.to_glib_none().0,
            );
        }
    }

    pub fn set_documenters(&self, documenters: &[&str]) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_documenters(
                self.to_glib_none().0,
                documenters.to_glib_none().0,
            );
        }
    }

    pub fn set_license(&self, license: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_license(self.to_glib_none().0, license.to_glib_none().0);
        }
    }

    pub fn set_license_type(&self, license_type: License) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_license_type(
                self.to_glib_none().0,
                license_type.to_glib(),
            );
        }
    }

    pub fn set_logo<P: IsA<gdk::Paintable>>(&self, logo: Option<&P>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_logo(
                self.to_glib_none().0,
                logo.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_logo_icon_name(&self, icon_name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_logo_icon_name(
                self.to_glib_none().0,
                icon_name.to_glib_none().0,
            );
        }
    }

    pub fn set_program_name(&self, name: &str) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_program_name(
                self.to_glib_none().0,
                name.to_glib_none().0,
            );
        }
    }

    pub fn set_system_information(&self, system_information: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_system_information(
                self.to_glib_none().0,
                system_information.to_glib_none().0,
            );
        }
    }

    pub fn set_translator_credits(&self, translator_credits: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_translator_credits(
                self.to_glib_none().0,
                translator_credits.to_glib_none().0,
            );
        }
    }

    pub fn set_version(&self, version: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_version(self.to_glib_none().0, version.to_glib_none().0);
        }
    }

    pub fn set_website(&self, website: Option<&str>) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_website(self.to_glib_none().0, website.to_glib_none().0);
        }
    }

    pub fn set_website_label(&self, website_label: &str) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_website_label(
                self.to_glib_none().0,
                website_label.to_glib_none().0,
            );
        }
    }

    pub fn set_wrap_license(&self, wrap_license: bool) {
        unsafe {
            gtk_sys::gtk_about_dialog_set_wrap_license(
                self.to_glib_none().0,
                wrap_license.to_glib(),
            );
        }
    }

    pub fn connect_activate_link<F: Fn(&AboutDialog, &str) -> glib::signal::Inhibit + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn activate_link_trampoline<
            F: Fn(&AboutDialog, &str) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkAboutDialog,
            uri: *mut libc::c_char,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &GString::from_glib_borrow(uri)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"activate-link\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    activate_link_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_artists_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_artists_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::artists\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_artists_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_authors_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_authors_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::authors\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_authors_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_comments_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_comments_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::comments\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_comments_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_copyright_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_copyright_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::copyright\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_copyright_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_documenters_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_documenters_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::documenters\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_documenters_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_license_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_license_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::license\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_license_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_license_type_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_license_type_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::license-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_license_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_logo_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_logo_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::logo\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_logo_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_logo_icon_name_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_logo_icon_name_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::logo-icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_logo_icon_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_program_name_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_program_name_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::program-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_program_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_system_information_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_system_information_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::system-information\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_system_information_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_translator_credits_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_translator_credits_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::translator-credits\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_translator_credits_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_version_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_version_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_website_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_website_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::website\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_website_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_website_label_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_website_label_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::website-label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_website_label_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wrap_license_notify<F: Fn(&AboutDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wrap_license_trampoline<F: Fn(&AboutDialog) + 'static>(
            this: *mut gtk_sys::GtkAboutDialog,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wrap-license\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wrap_license_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for AboutDialog {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for AboutDialog {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AboutDialog")
    }
}
