// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Buildable;
use CellRenderer;
use Container;
use Editable;
use MovementStep;
use Scrollable;
use Tooltip;
use TreeIter;
use TreeModel;
use TreePath;
use TreeSelection;
use TreeViewColumn;
use TreeViewDropPosition;
use TreeViewGridLines;
use Widget;

glib_wrapper! {
    pub struct TreeView(Object<gtk_sys::GtkTreeView, TreeViewClass>) @extends Container, Widget, @implements Buildable, Scrollable;

    match fn {
        get_type => || gtk_sys::gtk_tree_view_get_type(),
    }
}

impl TreeView {
    pub fn new() -> TreeView {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_tree_view_new()).unsafe_cast() }
    }

    pub fn with_model<P: IsA<TreeModel>>(model: &P) -> TreeView {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_tree_view_new_with_model(
                model.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn append_column(&self, column: &TreeViewColumn) -> i32 {
        unsafe {
            gtk_sys::gtk_tree_view_append_column(self.to_glib_none().0, column.to_glib_none().0)
        }
    }

    pub fn collapse_all(&self) {
        unsafe {
            gtk_sys::gtk_tree_view_collapse_all(self.to_glib_none().0);
        }
    }

    pub fn collapse_row(&self, path: &TreePath) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_collapse_row(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
            ))
        }
    }

    pub fn columns_autosize(&self) {
        unsafe {
            gtk_sys::gtk_tree_view_columns_autosize(self.to_glib_none().0);
        }
    }

    pub fn convert_bin_window_to_tree_coords(&self, bx: i32, by: i32) -> (i32, i32) {
        unsafe {
            let mut tx = mem::MaybeUninit::uninit();
            let mut ty = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_convert_bin_window_to_tree_coords(
                self.to_glib_none().0,
                bx,
                by,
                tx.as_mut_ptr(),
                ty.as_mut_ptr(),
            );
            let tx = tx.assume_init();
            let ty = ty.assume_init();
            (tx, ty)
        }
    }

    pub fn convert_bin_window_to_widget_coords(&self, bx: i32, by: i32) -> (i32, i32) {
        unsafe {
            let mut wx = mem::MaybeUninit::uninit();
            let mut wy = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_convert_bin_window_to_widget_coords(
                self.to_glib_none().0,
                bx,
                by,
                wx.as_mut_ptr(),
                wy.as_mut_ptr(),
            );
            let wx = wx.assume_init();
            let wy = wy.assume_init();
            (wx, wy)
        }
    }

    pub fn convert_tree_to_bin_window_coords(&self, tx: i32, ty: i32) -> (i32, i32) {
        unsafe {
            let mut bx = mem::MaybeUninit::uninit();
            let mut by = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_convert_tree_to_bin_window_coords(
                self.to_glib_none().0,
                tx,
                ty,
                bx.as_mut_ptr(),
                by.as_mut_ptr(),
            );
            let bx = bx.assume_init();
            let by = by.assume_init();
            (bx, by)
        }
    }

    pub fn convert_tree_to_widget_coords(&self, tx: i32, ty: i32) -> (i32, i32) {
        unsafe {
            let mut wx = mem::MaybeUninit::uninit();
            let mut wy = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_convert_tree_to_widget_coords(
                self.to_glib_none().0,
                tx,
                ty,
                wx.as_mut_ptr(),
                wy.as_mut_ptr(),
            );
            let wx = wx.assume_init();
            let wy = wy.assume_init();
            (wx, wy)
        }
    }

    pub fn convert_widget_to_bin_window_coords(&self, wx: i32, wy: i32) -> (i32, i32) {
        unsafe {
            let mut bx = mem::MaybeUninit::uninit();
            let mut by = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_convert_widget_to_bin_window_coords(
                self.to_glib_none().0,
                wx,
                wy,
                bx.as_mut_ptr(),
                by.as_mut_ptr(),
            );
            let bx = bx.assume_init();
            let by = by.assume_init();
            (bx, by)
        }
    }

    pub fn convert_widget_to_tree_coords(&self, wx: i32, wy: i32) -> (i32, i32) {
        unsafe {
            let mut tx = mem::MaybeUninit::uninit();
            let mut ty = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_convert_widget_to_tree_coords(
                self.to_glib_none().0,
                wx,
                wy,
                tx.as_mut_ptr(),
                ty.as_mut_ptr(),
            );
            let tx = tx.assume_init();
            let ty = ty.assume_init();
            (tx, ty)
        }
    }

    pub fn create_row_drag_icon(&self, path: &TreePath) -> Option<gdk::Paintable> {
        unsafe {
            from_glib_full(gtk_sys::gtk_tree_view_create_row_drag_icon(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
            ))
        }
    }

    pub fn enable_model_drag_dest(&self, formats: &gdk::ContentFormats, actions: gdk::DragAction) {
        unsafe {
            gtk_sys::gtk_tree_view_enable_model_drag_dest(
                self.to_glib_none().0,
                formats.to_glib_none().0,
                actions.to_glib(),
            );
        }
    }

    pub fn enable_model_drag_source(
        &self,
        start_button_mask: gdk::ModifierType,
        formats: &gdk::ContentFormats,
        actions: gdk::DragAction,
    ) {
        unsafe {
            gtk_sys::gtk_tree_view_enable_model_drag_source(
                self.to_glib_none().0,
                start_button_mask.to_glib(),
                formats.to_glib_none().0,
                actions.to_glib(),
            );
        }
    }

    pub fn expand_all(&self) {
        unsafe {
            gtk_sys::gtk_tree_view_expand_all(self.to_glib_none().0);
        }
    }

    pub fn expand_row(&self, path: &TreePath, open_all: bool) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_expand_row(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                open_all.to_glib(),
            ))
        }
    }

    pub fn expand_to_path(&self, path: &TreePath) {
        unsafe {
            gtk_sys::gtk_tree_view_expand_to_path(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
            );
        }
    }

    pub fn get_activate_on_single_click(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_activate_on_single_click(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_background_area(
        &self,
        path: Option<&TreePath>,
        column: Option<&TreeViewColumn>,
    ) -> gdk::Rectangle {
        unsafe {
            let mut rect = gdk::Rectangle::uninitialized();
            gtk_sys::gtk_tree_view_get_background_area(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                column.to_glib_none().0,
                rect.to_glib_none_mut().0,
            );
            rect
        }
    }

    pub fn get_cell_area(
        &self,
        path: Option<&TreePath>,
        column: Option<&TreeViewColumn>,
    ) -> gdk::Rectangle {
        unsafe {
            let mut rect = gdk::Rectangle::uninitialized();
            gtk_sys::gtk_tree_view_get_cell_area(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                column.to_glib_none().0,
                rect.to_glib_none_mut().0,
            );
            rect
        }
    }

    pub fn get_column(&self, n: i32) -> Option<TreeViewColumn> {
        unsafe { from_glib_none(gtk_sys::gtk_tree_view_get_column(self.to_glib_none().0, n)) }
    }

    pub fn get_columns(&self) -> Vec<TreeViewColumn> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(gtk_sys::gtk_tree_view_get_columns(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_cursor(&self) -> (Option<TreePath>, Option<TreeViewColumn>) {
        unsafe {
            let mut path = ptr::null_mut();
            let mut focus_column = ptr::null_mut();
            gtk_sys::gtk_tree_view_get_cursor(self.to_glib_none().0, &mut path, &mut focus_column);
            (from_glib_full(path), from_glib_none(focus_column))
        }
    }

    pub fn get_dest_row_at_pos(
        &self,
        drag_x: i32,
        drag_y: i32,
    ) -> Option<(Option<TreePath>, TreeViewDropPosition)> {
        unsafe {
            let mut path = ptr::null_mut();
            let mut pos = mem::MaybeUninit::uninit();
            let ret = from_glib(gtk_sys::gtk_tree_view_get_dest_row_at_pos(
                self.to_glib_none().0,
                drag_x,
                drag_y,
                &mut path,
                pos.as_mut_ptr(),
            ));
            let pos = pos.assume_init();
            if ret {
                Some((from_glib_full(path), from_glib(pos)))
            } else {
                None
            }
        }
    }

    pub fn get_drag_dest_row(&self) -> (Option<TreePath>, TreeViewDropPosition) {
        unsafe {
            let mut path = ptr::null_mut();
            let mut pos = mem::MaybeUninit::uninit();
            gtk_sys::gtk_tree_view_get_drag_dest_row(
                self.to_glib_none().0,
                &mut path,
                pos.as_mut_ptr(),
            );
            let pos = pos.assume_init();
            (from_glib_full(path), from_glib(pos))
        }
    }

    pub fn get_enable_search(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_enable_search(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_enable_tree_lines(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_enable_tree_lines(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_expander_column(&self) -> Option<TreeViewColumn> {
        unsafe {
            from_glib_none(gtk_sys::gtk_tree_view_get_expander_column(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_fixed_height_mode(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_fixed_height_mode(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_grid_lines(&self) -> TreeViewGridLines {
        unsafe { from_glib(gtk_sys::gtk_tree_view_get_grid_lines(self.to_glib_none().0)) }
    }

    pub fn get_headers_clickable(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_headers_clickable(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_headers_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_headers_visible(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_hover_expand(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_hover_expand(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_hover_selection(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_hover_selection(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_level_indentation(&self) -> i32 {
        unsafe { gtk_sys::gtk_tree_view_get_level_indentation(self.to_glib_none().0) }
    }

    pub fn get_model(&self) -> Option<TreeModel> {
        unsafe { from_glib_none(gtk_sys::gtk_tree_view_get_model(self.to_glib_none().0)) }
    }

    pub fn get_n_columns(&self) -> u32 {
        unsafe { gtk_sys::gtk_tree_view_get_n_columns(self.to_glib_none().0) }
    }

    pub fn get_path_at_pos(
        &self,
        x: i32,
        y: i32,
    ) -> Option<(Option<TreePath>, Option<TreeViewColumn>, i32, i32)> {
        unsafe {
            let mut path = ptr::null_mut();
            let mut column = ptr::null_mut();
            let mut cell_x = mem::MaybeUninit::uninit();
            let mut cell_y = mem::MaybeUninit::uninit();
            let ret = from_glib(gtk_sys::gtk_tree_view_get_path_at_pos(
                self.to_glib_none().0,
                x,
                y,
                &mut path,
                &mut column,
                cell_x.as_mut_ptr(),
                cell_y.as_mut_ptr(),
            ));
            let cell_x = cell_x.assume_init();
            let cell_y = cell_y.assume_init();
            if ret {
                Some((from_glib_full(path), from_glib_none(column), cell_x, cell_y))
            } else {
                None
            }
        }
    }

    pub fn get_reorderable(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_reorderable(
                self.to_glib_none().0,
            ))
        }
    }

    //pub fn get_row_separator_func(&self) -> Option<Box_<dyn Fn(&TreeModel, &TreeIter) -> bool + 'static>> {
    //    unsafe { TODO: call gtk_sys:gtk_tree_view_get_row_separator_func() }
    //}

    pub fn get_rubber_banding(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_rubber_banding(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_search_column(&self) -> i32 {
        unsafe { gtk_sys::gtk_tree_view_get_search_column(self.to_glib_none().0) }
    }

    pub fn get_search_entry(&self) -> Option<Editable> {
        unsafe {
            from_glib_none(gtk_sys::gtk_tree_view_get_search_entry(
                self.to_glib_none().0,
            ))
        }
    }

    //pub fn get_search_equal_func(&self) -> Option<Box_<dyn Fn(&TreeModel, i32, &str, &TreeIter) -> bool + 'static>> {
    //    unsafe { TODO: call gtk_sys:gtk_tree_view_get_search_equal_func() }
    //}

    pub fn get_selection(&self) -> TreeSelection {
        unsafe { from_glib_none(gtk_sys::gtk_tree_view_get_selection(self.to_glib_none().0)) }
    }

    pub fn get_show_expanders(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_get_show_expanders(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_tooltip_column(&self) -> i32 {
        unsafe { gtk_sys::gtk_tree_view_get_tooltip_column(self.to_glib_none().0) }
    }

    pub fn get_tooltip_context(
        &self,
        x: &mut i32,
        y: &mut i32,
        keyboard_tip: bool,
    ) -> Option<(Option<TreeModel>, TreePath, TreeIter)> {
        unsafe {
            let mut model = ptr::null_mut();
            let mut path = ptr::null_mut();
            let mut iter = TreeIter::uninitialized();
            let ret = from_glib(gtk_sys::gtk_tree_view_get_tooltip_context(
                self.to_glib_none().0,
                x,
                y,
                keyboard_tip.to_glib(),
                &mut model,
                &mut path,
                iter.to_glib_none_mut().0,
            ));
            if ret {
                Some((from_glib_none(model), from_glib_full(path), iter))
            } else {
                None
            }
        }
    }

    pub fn get_visible_range(&self) -> Option<(TreePath, TreePath)> {
        unsafe {
            let mut start_path = ptr::null_mut();
            let mut end_path = ptr::null_mut();
            let ret = from_glib(gtk_sys::gtk_tree_view_get_visible_range(
                self.to_glib_none().0,
                &mut start_path,
                &mut end_path,
            ));
            if ret {
                Some((from_glib_full(start_path), from_glib_full(end_path)))
            } else {
                None
            }
        }
    }

    pub fn get_visible_rect(&self) -> gdk::Rectangle {
        unsafe {
            let mut visible_rect = gdk::Rectangle::uninitialized();
            gtk_sys::gtk_tree_view_get_visible_rect(
                self.to_glib_none().0,
                visible_rect.to_glib_none_mut().0,
            );
            visible_rect
        }
    }

    pub fn insert_column(&self, column: &TreeViewColumn, position: i32) -> i32 {
        unsafe {
            gtk_sys::gtk_tree_view_insert_column(
                self.to_glib_none().0,
                column.to_glib_none().0,
                position,
            )
        }
    }

    //pub fn insert_column_with_attributes<P: IsA<CellRenderer>>(&self, position: i32, title: &str, cell: &P, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> i32 {
    //    unsafe { TODO: call gtk_sys:gtk_tree_view_insert_column_with_attributes() }
    //}

    pub fn insert_column_with_data_func<
        P: IsA<CellRenderer>,
        Q: Fn(&TreeViewColumn, &CellRenderer, &TreeModel, &TreeIter) + 'static,
    >(
        &self,
        position: i32,
        title: &str,
        cell: &P,
        func: Q,
    ) -> i32 {
        let func_data: Box_<Q> = Box_::new(func);
        unsafe extern "C" fn func_func<
            P: IsA<CellRenderer>,
            Q: Fn(&TreeViewColumn, &CellRenderer, &TreeModel, &TreeIter) + 'static,
        >(
            tree_column: *mut gtk_sys::GtkTreeViewColumn,
            cell: *mut gtk_sys::GtkCellRenderer,
            tree_model: *mut gtk_sys::GtkTreeModel,
            iter: *mut gtk_sys::GtkTreeIter,
            data: glib_sys::gpointer,
        ) {
            let tree_column = from_glib_borrow(tree_column);
            let cell = from_glib_borrow(cell);
            let tree_model = from_glib_borrow(tree_model);
            let iter = from_glib_borrow(iter);
            let callback: &Q = &*(data as *mut _);
            (*callback)(&tree_column, &cell, &tree_model, &iter);
        }
        let func = Some(func_func::<P, Q> as _);
        unsafe extern "C" fn dnotify_func<
            P: IsA<CellRenderer>,
            Q: Fn(&TreeViewColumn, &CellRenderer, &TreeModel, &TreeIter) + 'static,
        >(
            data: glib_sys::gpointer,
        ) {
            let _callback: Box_<Q> = Box_::from_raw(data as *mut _);
        }
        let destroy_call6 = Some(dnotify_func::<P, Q> as _);
        let super_callback0: Box_<Q> = func_data;
        unsafe {
            gtk_sys::gtk_tree_view_insert_column_with_data_func(
                self.to_glib_none().0,
                position,
                title.to_glib_none().0,
                cell.as_ref().to_glib_none().0,
                func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call6,
            )
        }
    }

    pub fn is_blank_at_pos(
        &self,
        x: i32,
        y: i32,
    ) -> Option<(Option<TreePath>, Option<TreeViewColumn>, i32, i32)> {
        unsafe {
            let mut path = ptr::null_mut();
            let mut column = ptr::null_mut();
            let mut cell_x = mem::MaybeUninit::uninit();
            let mut cell_y = mem::MaybeUninit::uninit();
            let ret = from_glib(gtk_sys::gtk_tree_view_is_blank_at_pos(
                self.to_glib_none().0,
                x,
                y,
                &mut path,
                &mut column,
                cell_x.as_mut_ptr(),
                cell_y.as_mut_ptr(),
            ));
            let cell_x = cell_x.assume_init();
            let cell_y = cell_y.assume_init();
            if ret {
                Some((from_glib_full(path), from_glib_none(column), cell_x, cell_y))
            } else {
                None
            }
        }
    }

    pub fn is_rubber_banding_active(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_is_rubber_banding_active(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn map_expanded_rows<P: FnMut(&TreeView, &TreePath)>(&self, func: P) {
        let func_data: P = func;
        unsafe extern "C" fn func_func<P: FnMut(&TreeView, &TreePath)>(
            tree_view: *mut gtk_sys::GtkTreeView,
            path: *mut gtk_sys::GtkTreePath,
            user_data: glib_sys::gpointer,
        ) {
            let tree_view = from_glib_borrow(tree_view);
            let path = from_glib_borrow(path);
            let callback: *mut P = user_data as *const _ as usize as *mut P;
            (*callback)(&tree_view, &path);
        }
        let func = Some(func_func::<P> as _);
        let super_callback0: &P = &func_data;
        unsafe {
            gtk_sys::gtk_tree_view_map_expanded_rows(
                self.to_glib_none().0,
                func,
                super_callback0 as *const _ as usize as *mut _,
            );
        }
    }

    pub fn move_column_after(&self, column: &TreeViewColumn, base_column: Option<&TreeViewColumn>) {
        unsafe {
            gtk_sys::gtk_tree_view_move_column_after(
                self.to_glib_none().0,
                column.to_glib_none().0,
                base_column.to_glib_none().0,
            );
        }
    }

    pub fn remove_column(&self, column: &TreeViewColumn) -> i32 {
        unsafe {
            gtk_sys::gtk_tree_view_remove_column(self.to_glib_none().0, column.to_glib_none().0)
        }
    }

    pub fn row_activated(&self, path: &TreePath, column: &TreeViewColumn) {
        unsafe {
            gtk_sys::gtk_tree_view_row_activated(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                column.to_glib_none().0,
            );
        }
    }

    pub fn row_expanded(&self, path: &TreePath) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_tree_view_row_expanded(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
            ))
        }
    }

    pub fn scroll_to_cell(
        &self,
        path: Option<&TreePath>,
        column: Option<&TreeViewColumn>,
        use_align: bool,
        row_align: f32,
        col_align: f32,
    ) {
        unsafe {
            gtk_sys::gtk_tree_view_scroll_to_cell(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                column.to_glib_none().0,
                use_align.to_glib(),
                row_align,
                col_align,
            );
        }
    }

    pub fn scroll_to_point(&self, tree_x: i32, tree_y: i32) {
        unsafe {
            gtk_sys::gtk_tree_view_scroll_to_point(self.to_glib_none().0, tree_x, tree_y);
        }
    }

    pub fn set_activate_on_single_click(&self, single: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_activate_on_single_click(
                self.to_glib_none().0,
                single.to_glib(),
            );
        }
    }

    pub fn set_column_drag_function(
        &self,
        func: Option<
            Box_<
                dyn Fn(&TreeView, &TreeViewColumn, &TreeViewColumn, &TreeViewColumn) -> bool
                    + 'static,
            >,
        >,
    ) {
        let func_data: Box_<
            Option<
                Box_<
                    dyn Fn(&TreeView, &TreeViewColumn, &TreeViewColumn, &TreeViewColumn) -> bool
                        + 'static,
                >,
            >,
        > = Box_::new(func);
        unsafe extern "C" fn func_func(
            tree_view: *mut gtk_sys::GtkTreeView,
            column: *mut gtk_sys::GtkTreeViewColumn,
            prev_column: *mut gtk_sys::GtkTreeViewColumn,
            next_column: *mut gtk_sys::GtkTreeViewColumn,
            data: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let tree_view = from_glib_borrow(tree_view);
            let column = from_glib_borrow(column);
            let prev_column = from_glib_borrow(prev_column);
            let next_column = from_glib_borrow(next_column);
            let callback: &Option<
                Box_<
                    dyn Fn(&TreeView, &TreeViewColumn, &TreeViewColumn, &TreeViewColumn) -> bool
                        + 'static,
                >,
            > = &*(data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&tree_view, &column, &prev_column, &next_column)
            } else {
                panic!("cannot get closure...")
            };
            res.to_glib()
        }
        let func = if func_data.is_some() {
            Some(func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<
                Option<
                    Box_<
                        dyn Fn(&TreeView, &TreeViewColumn, &TreeViewColumn, &TreeViewColumn) -> bool
                            + 'static,
                    >,
                >,
            > = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func as _);
        let super_callback0: Box_<
            Option<
                Box_<
                    dyn Fn(&TreeView, &TreeViewColumn, &TreeViewColumn, &TreeViewColumn) -> bool
                        + 'static,
                >,
            >,
        > = func_data;
        unsafe {
            gtk_sys::gtk_tree_view_set_column_drag_function(
                self.to_glib_none().0,
                func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_cursor(
        &self,
        path: &TreePath,
        focus_column: Option<&TreeViewColumn>,
        start_editing: bool,
    ) {
        unsafe {
            gtk_sys::gtk_tree_view_set_cursor(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                focus_column.to_glib_none().0,
                start_editing.to_glib(),
            );
        }
    }

    pub fn set_cursor_on_cell<P: IsA<CellRenderer>>(
        &self,
        path: &TreePath,
        focus_column: Option<&TreeViewColumn>,
        focus_cell: Option<&P>,
        start_editing: bool,
    ) {
        unsafe {
            gtk_sys::gtk_tree_view_set_cursor_on_cell(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                focus_column.to_glib_none().0,
                focus_cell.map(|p| p.as_ref()).to_glib_none().0,
                start_editing.to_glib(),
            );
        }
    }

    pub fn set_drag_dest_row(&self, path: Option<&TreePath>, pos: TreeViewDropPosition) {
        unsafe {
            gtk_sys::gtk_tree_view_set_drag_dest_row(
                self.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                pos.to_glib(),
            );
        }
    }

    pub fn set_enable_search(&self, enable_search: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_enable_search(
                self.to_glib_none().0,
                enable_search.to_glib(),
            );
        }
    }

    pub fn set_enable_tree_lines(&self, enabled: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_enable_tree_lines(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn set_expander_column(&self, column: Option<&TreeViewColumn>) {
        unsafe {
            gtk_sys::gtk_tree_view_set_expander_column(
                self.to_glib_none().0,
                column.to_glib_none().0,
            );
        }
    }

    pub fn set_fixed_height_mode(&self, enable: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_fixed_height_mode(self.to_glib_none().0, enable.to_glib());
        }
    }

    pub fn set_grid_lines(&self, grid_lines: TreeViewGridLines) {
        unsafe {
            gtk_sys::gtk_tree_view_set_grid_lines(self.to_glib_none().0, grid_lines.to_glib());
        }
    }

    pub fn set_headers_clickable(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_headers_clickable(self.to_glib_none().0, setting.to_glib());
        }
    }

    pub fn set_headers_visible(&self, headers_visible: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_headers_visible(
                self.to_glib_none().0,
                headers_visible.to_glib(),
            );
        }
    }

    pub fn set_hover_expand(&self, expand: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_hover_expand(self.to_glib_none().0, expand.to_glib());
        }
    }

    pub fn set_hover_selection(&self, hover: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_hover_selection(self.to_glib_none().0, hover.to_glib());
        }
    }

    pub fn set_level_indentation(&self, indentation: i32) {
        unsafe {
            gtk_sys::gtk_tree_view_set_level_indentation(self.to_glib_none().0, indentation);
        }
    }

    pub fn set_model<P: IsA<TreeModel>>(&self, model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_tree_view_set_model(
                self.to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_reorderable(&self, reorderable: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_reorderable(self.to_glib_none().0, reorderable.to_glib());
        }
    }

    pub fn set_row_separator_func(
        &self,
        func: Option<Box_<dyn Fn(&TreeModel, &TreeIter) -> bool + 'static>>,
    ) {
        let func_data: Box_<Option<Box_<dyn Fn(&TreeModel, &TreeIter) -> bool + 'static>>> =
            Box_::new(func);
        unsafe extern "C" fn func_func(
            model: *mut gtk_sys::GtkTreeModel,
            iter: *mut gtk_sys::GtkTreeIter,
            data: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let model = from_glib_borrow(model);
            let iter = from_glib_borrow(iter);
            let callback: &Option<Box_<dyn Fn(&TreeModel, &TreeIter) -> bool + 'static>> =
                &*(data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&model, &iter)
            } else {
                panic!("cannot get closure...")
            };
            res.to_glib()
        }
        let func = if func_data.is_some() {
            Some(func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&TreeModel, &TreeIter) -> bool + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&TreeModel, &TreeIter) -> bool + 'static>>> =
            func_data;
        unsafe {
            gtk_sys::gtk_tree_view_set_row_separator_func(
                self.to_glib_none().0,
                func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_rubber_banding(&self, enable: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_rubber_banding(self.to_glib_none().0, enable.to_glib());
        }
    }

    pub fn set_search_column(&self, column: i32) {
        unsafe {
            gtk_sys::gtk_tree_view_set_search_column(self.to_glib_none().0, column);
        }
    }

    pub fn set_search_entry<P: IsA<Editable>>(&self, entry: Option<&P>) {
        unsafe {
            gtk_sys::gtk_tree_view_set_search_entry(
                self.to_glib_none().0,
                entry.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_search_equal_func<P: Fn(&TreeModel, i32, &str, &TreeIter) -> bool + 'static>(
        &self,
        search_equal_func: P,
    ) {
        let search_equal_func_data: Box_<P> = Box_::new(search_equal_func);
        unsafe extern "C" fn search_equal_func_func<
            P: Fn(&TreeModel, i32, &str, &TreeIter) -> bool + 'static,
        >(
            model: *mut gtk_sys::GtkTreeModel,
            column: libc::c_int,
            key: *const libc::c_char,
            iter: *mut gtk_sys::GtkTreeIter,
            search_data: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let model = from_glib_borrow(model);
            let key: Borrowed<GString> = from_glib_borrow(key);
            let iter = from_glib_borrow(iter);
            let callback: &P = &*(search_data as *mut _);
            let res = (*callback)(&model, column, key.as_str(), &iter);
            res.to_glib()
        }
        let search_equal_func = Some(search_equal_func_func::<P> as _);
        unsafe extern "C" fn search_destroy_func<
            P: Fn(&TreeModel, i32, &str, &TreeIter) -> bool + 'static,
        >(
            data: glib_sys::gpointer,
        ) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(search_destroy_func::<P> as _);
        let super_callback0: Box_<P> = search_equal_func_data;
        unsafe {
            gtk_sys::gtk_tree_view_set_search_equal_func(
                self.to_glib_none().0,
                search_equal_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    pub fn set_show_expanders(&self, enabled: bool) {
        unsafe {
            gtk_sys::gtk_tree_view_set_show_expanders(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn set_tooltip_cell<P: IsA<CellRenderer>>(
        &self,
        tooltip: &Tooltip,
        path: Option<&TreePath>,
        column: Option<&TreeViewColumn>,
        cell: Option<&P>,
    ) {
        unsafe {
            gtk_sys::gtk_tree_view_set_tooltip_cell(
                self.to_glib_none().0,
                tooltip.to_glib_none().0,
                mut_override(path.to_glib_none().0),
                column.to_glib_none().0,
                cell.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_tooltip_column(&self, column: i32) {
        unsafe {
            gtk_sys::gtk_tree_view_set_tooltip_column(self.to_glib_none().0, column);
        }
    }

    pub fn set_tooltip_row(&self, tooltip: &Tooltip, path: &TreePath) {
        unsafe {
            gtk_sys::gtk_tree_view_set_tooltip_row(
                self.to_glib_none().0,
                tooltip.to_glib_none().0,
                mut_override(path.to_glib_none().0),
            );
        }
    }

    pub fn unset_rows_drag_dest(&self) {
        unsafe {
            gtk_sys::gtk_tree_view_unset_rows_drag_dest(self.to_glib_none().0);
        }
    }

    pub fn unset_rows_drag_source(&self) {
        unsafe {
            gtk_sys::gtk_tree_view_unset_rows_drag_source(self.to_glib_none().0);
        }
    }

    pub fn get_property_enable_grid_lines(&self) -> TreeViewGridLines {
        unsafe {
            let mut value = Value::from_type(<TreeViewGridLines as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"enable-grid-lines\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `enable-grid-lines` getter")
                .unwrap()
        }
    }

    pub fn set_property_enable_grid_lines(&self, enable_grid_lines: TreeViewGridLines) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"enable-grid-lines\0".as_ptr() as *const _,
                Value::from(&enable_grid_lines).to_glib_none().0,
            );
        }
    }

    pub fn connect_columns_changed<F: Fn(&TreeView) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn columns_changed_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"columns-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    columns_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_cursor_changed<F: Fn(&TreeView) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_changed_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"cursor-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    cursor_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_expand_collapse_cursor_row<
        F: Fn(&TreeView, bool, bool, bool) -> bool + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn expand_collapse_cursor_row_trampoline<
            F: Fn(&TreeView, bool, bool, bool) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            object: glib_sys::gboolean,
            p0: glib_sys::gboolean,
            p1: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                from_glib(object),
                from_glib(p0),
                from_glib(p1),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"expand-collapse-cursor-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    expand_collapse_cursor_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_expand_collapse_cursor_row(&self, object: bool, p0: bool, p1: bool) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("expand-collapse-cursor-row", &[&object, &p0, &p1])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_expand_collapse_cursor_row`")
            .unwrap()
    }

    pub fn connect_move_cursor<F: Fn(&TreeView, MovementStep, i32) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn move_cursor_trampoline<
            F: Fn(&TreeView, MovementStep, i32) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            step: gtk_sys::GtkMovementStep,
            direction: libc::c_int,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(step), direction).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"move-cursor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    move_cursor_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_move_cursor(&self, step: MovementStep, direction: i32) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("move-cursor", &[&step, &direction])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_move_cursor`")
            .unwrap()
    }

    pub fn connect_row_activated<F: Fn(&TreeView, &TreePath, &TreeViewColumn) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn row_activated_trampoline<
            F: Fn(&TreeView, &TreePath, &TreeViewColumn) + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            path: *mut gtk_sys::GtkTreePath,
            column: *mut gtk_sys::GtkTreeViewColumn,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(path),
                &from_glib_borrow(column),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"row-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    row_activated_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_row_activated(&self, path: &TreePath, column: &TreeViewColumn) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("row-activated", &[&path, &column])
                .unwrap()
        };
    }

    pub fn connect_row_collapsed<F: Fn(&TreeView, &TreeIter, &TreePath) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn row_collapsed_trampoline<
            F: Fn(&TreeView, &TreeIter, &TreePath) + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            iter: *mut gtk_sys::GtkTreeIter,
            path: *mut gtk_sys::GtkTreePath,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(iter),
                &from_glib_borrow(path),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"row-collapsed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    row_collapsed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_row_expanded<F: Fn(&TreeView, &TreeIter, &TreePath) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn row_expanded_trampoline<
            F: Fn(&TreeView, &TreeIter, &TreePath) + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            iter: *mut gtk_sys::GtkTreeIter,
            path: *mut gtk_sys::GtkTreePath,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(iter),
                &from_glib_borrow(path),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"row-expanded\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    row_expanded_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_select_all<F: Fn(&TreeView) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn select_all_trampoline<F: Fn(&TreeView) -> bool + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"select-all\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    select_all_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_select_all(&self) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("select-all", &[])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_select_all`")
            .unwrap()
    }

    pub fn connect_select_cursor_parent<F: Fn(&TreeView) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn select_cursor_parent_trampoline<F: Fn(&TreeView) -> bool + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"select-cursor-parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    select_cursor_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_select_cursor_parent(&self) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("select-cursor-parent", &[])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_select_cursor_parent`")
            .unwrap()
    }

    pub fn connect_select_cursor_row<F: Fn(&TreeView, bool) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn select_cursor_row_trampoline<
            F: Fn(&TreeView, bool) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            object: glib_sys::gboolean,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"select-cursor-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    select_cursor_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_select_cursor_row(&self, object: bool) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("select-cursor-row", &[&object])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_select_cursor_row`")
            .unwrap()
    }

    pub fn connect_start_interactive_search<F: Fn(&TreeView) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn start_interactive_search_trampoline<
            F: Fn(&TreeView) -> bool + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"start-interactive-search\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    start_interactive_search_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_start_interactive_search(&self) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("start-interactive-search", &[])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_start_interactive_search`")
            .unwrap()
    }

    pub fn connect_test_collapse_row<
        F: Fn(&TreeView, &TreeIter, &TreePath) -> glib::signal::Inhibit + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn test_collapse_row_trampoline<
            F: Fn(&TreeView, &TreeIter, &TreePath) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            iter: *mut gtk_sys::GtkTreeIter,
            path: *mut gtk_sys::GtkTreePath,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(iter),
                &from_glib_borrow(path),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"test-collapse-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    test_collapse_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_test_expand_row<
        F: Fn(&TreeView, &TreeIter, &TreePath) -> glib::signal::Inhibit + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn test_expand_row_trampoline<
            F: Fn(&TreeView, &TreeIter, &TreePath) -> glib::signal::Inhibit + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            iter: *mut gtk_sys::GtkTreeIter,
            path: *mut gtk_sys::GtkTreePath,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(iter),
                &from_glib_borrow(path),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"test-expand-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    test_expand_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_toggle_cursor_row<F: Fn(&TreeView) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn toggle_cursor_row_trampoline<F: Fn(&TreeView) -> bool + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"toggle-cursor-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    toggle_cursor_row_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_toggle_cursor_row(&self) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("toggle-cursor-row", &[])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_toggle_cursor_row`")
            .unwrap()
    }

    pub fn connect_unselect_all<F: Fn(&TreeView) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn unselect_all_trampoline<F: Fn(&TreeView) -> bool + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"unselect-all\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    unselect_all_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn emit_unselect_all(&self) -> bool {
        let res = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("unselect-all", &[])
                .unwrap()
        };
        res.unwrap()
            .get()
            .expect("Return Value for `emit_unselect_all`")
            .unwrap()
    }

    pub fn connect_property_activate_on_single_click_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_activate_on_single_click_trampoline<
            F: Fn(&TreeView) + 'static,
        >(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::activate-on-single-click\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_activate_on_single_click_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_enable_grid_lines_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_grid_lines_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-grid-lines\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_grid_lines_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_enable_search_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_search_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-search\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_search_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_enable_tree_lines_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_tree_lines_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-tree-lines\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_tree_lines_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_expander_column_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_expander_column_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::expander-column\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_expander_column_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_fixed_height_mode_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_fixed_height_mode_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fixed-height-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fixed_height_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_headers_clickable_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_headers_clickable_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::headers-clickable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_headers_clickable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_headers_visible_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_headers_visible_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::headers-visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_headers_visible_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_hover_expand_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hover_expand_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hover-expand\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hover_expand_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_hover_selection_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hover_selection_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hover-selection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hover_selection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_level_indentation_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_level_indentation_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::level-indentation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_level_indentation_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_model_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_reorderable_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_reorderable_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::reorderable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_reorderable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_rubber_banding_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_rubber_banding_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rubber-banding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rubber_banding_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_search_column_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_search_column_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::search-column\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_search_column_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_expanders_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_expanders_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-expanders\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_expanders_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_tooltip_column_notify<F: Fn(&TreeView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_column_trampoline<F: Fn(&TreeView) + 'static>(
            this: *mut gtk_sys::GtkTreeView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tooltip-column\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tooltip_column_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for TreeView {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for TreeView {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TreeView")
    }
}
