// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use Dialog;
use FileChooser;
use FileChooserAction;
use Widget;

glib_wrapper! {
    pub struct FileChooserButton(Object<gtk_sys::GtkFileChooserButton, FileChooserButtonClass>) @extends Widget, @implements Buildable, FileChooser;

    match fn {
        get_type => || gtk_sys::gtk_file_chooser_button_get_type(),
    }
}

impl FileChooserButton {
    pub fn new(title: &str, action: FileChooserAction) -> FileChooserButton {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_file_chooser_button_new(
                title.to_glib_none().0,
                action.to_glib(),
            ))
            .unsafe_cast()
        }
    }

    pub fn with_dialog<P: IsA<Dialog>>(dialog: &P) -> FileChooserButton {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_file_chooser_button_new_with_dialog(
                dialog.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_file_chooser_button_get_title(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_width_chars(&self) -> i32 {
        unsafe { gtk_sys::gtk_file_chooser_button_get_width_chars(self.to_glib_none().0) }
    }

    pub fn set_title(&self, title: &str) {
        unsafe {
            gtk_sys::gtk_file_chooser_button_set_title(
                self.to_glib_none().0,
                title.to_glib_none().0,
            );
        }
    }

    pub fn set_width_chars(&self, n_chars: i32) {
        unsafe {
            gtk_sys::gtk_file_chooser_button_set_width_chars(self.to_glib_none().0, n_chars);
        }
    }

    pub fn connect_file_set<F: Fn(&FileChooserButton) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn file_set_trampoline<F: Fn(&FileChooserButton) + 'static>(
            this: *mut gtk_sys::GtkFileChooserButton,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"file-set\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    file_set_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_title_notify<F: Fn(&FileChooserButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<F: Fn(&FileChooserButton) + 'static>(
            this: *mut gtk_sys::GtkFileChooserButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_title_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_width_chars_notify<F: Fn(&FileChooserButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_chars_trampoline<F: Fn(&FileChooserButton) + 'static>(
            this: *mut gtk_sys::GtkFileChooserButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::width-chars\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_width_chars_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FileChooserButton {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FileChooserButton")
    }
}
