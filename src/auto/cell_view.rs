// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Buildable;
use CellArea;
use CellAreaContext;
use CellLayout;
use Orientable;
use TreeModel;
use TreePath;
use Widget;

glib_wrapper! {
    pub struct CellView(Object<gtk_sys::GtkCellView, CellViewClass>) @extends Widget, @implements Buildable, CellLayout, Orientable;

    match fn {
        get_type => || gtk_sys::gtk_cell_view_get_type(),
    }
}

impl CellView {
    pub fn new() -> CellView {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_cell_view_new()).unsafe_cast() }
    }

    pub fn with_context<P: IsA<CellArea>, Q: IsA<CellAreaContext>>(
        area: &P,
        context: &Q,
    ) -> CellView {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_cell_view_new_with_context(
                area.as_ref().to_glib_none().0,
                context.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn with_markup(markup: &str) -> CellView {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_cell_view_new_with_markup(
                markup.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn with_text(text: &str) -> CellView {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_cell_view_new_with_text(text.to_glib_none().0))
                .unsafe_cast()
        }
    }

    pub fn with_texture<P: IsA<gdk::Texture>>(texture: &P) -> CellView {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_cell_view_new_with_texture(
                texture.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_displayed_row(&self) -> Option<TreePath> {
        unsafe {
            from_glib_full(gtk_sys::gtk_cell_view_get_displayed_row(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_draw_sensitive(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_cell_view_get_draw_sensitive(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_fit_model(&self) -> bool {
        unsafe { from_glib(gtk_sys::gtk_cell_view_get_fit_model(self.to_glib_none().0)) }
    }

    pub fn get_model(&self) -> Option<TreeModel> {
        unsafe { from_glib_none(gtk_sys::gtk_cell_view_get_model(self.to_glib_none().0)) }
    }

    pub fn set_displayed_row(&self, path: &mut TreePath) {
        unsafe {
            gtk_sys::gtk_cell_view_set_displayed_row(
                self.to_glib_none().0,
                path.to_glib_none_mut().0,
            );
        }
    }

    pub fn set_draw_sensitive(&self, draw_sensitive: bool) {
        unsafe {
            gtk_sys::gtk_cell_view_set_draw_sensitive(
                self.to_glib_none().0,
                draw_sensitive.to_glib(),
            );
        }
    }

    pub fn set_fit_model(&self, fit_model: bool) {
        unsafe {
            gtk_sys::gtk_cell_view_set_fit_model(self.to_glib_none().0, fit_model.to_glib());
        }
    }

    pub fn set_model<P: IsA<TreeModel>>(&self, model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_cell_view_set_model(
                self.to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn get_property_cell_area(&self) -> Option<CellArea> {
        unsafe {
            let mut value = Value::from_type(<CellArea as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"cell-area\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `cell-area` getter")
        }
    }

    pub fn get_property_cell_area_context(&self) -> Option<CellAreaContext> {
        unsafe {
            let mut value = Value::from_type(<CellAreaContext as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"cell-area-context\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `cell-area-context` getter")
        }
    }

    pub fn connect_property_draw_sensitive_notify<F: Fn(&CellView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_draw_sensitive_trampoline<F: Fn(&CellView) + 'static>(
            this: *mut gtk_sys::GtkCellView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::draw-sensitive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_draw_sensitive_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_fit_model_notify<F: Fn(&CellView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_fit_model_trampoline<F: Fn(&CellView) + 'static>(
            this: *mut gtk_sys::GtkCellView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fit-model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fit_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_model_notify<F: Fn(&CellView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<F: Fn(&CellView) + 'static>(
            this: *mut gtk_sys::GtkCellView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for CellView {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for CellView {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CellView")
    }
}
