// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use AppChooser;
use Buildable;
use Widget;

glib_wrapper! {
    pub struct AppChooserButton(Object<gtk_sys::GtkAppChooserButton, AppChooserButtonClass>) @extends Widget, @implements Buildable, AppChooser;

    match fn {
        get_type => || gtk_sys::gtk_app_chooser_button_get_type(),
    }
}

impl AppChooserButton {
    pub fn new(content_type: &str) -> AppChooserButton {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_app_chooser_button_new(
                content_type.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn append_custom_item<P: IsA<gio::Icon>>(&self, name: &str, label: &str, icon: &P) {
        unsafe {
            gtk_sys::gtk_app_chooser_button_append_custom_item(
                self.to_glib_none().0,
                name.to_glib_none().0,
                label.to_glib_none().0,
                icon.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn append_separator(&self) {
        unsafe {
            gtk_sys::gtk_app_chooser_button_append_separator(self.to_glib_none().0);
        }
    }

    pub fn get_heading(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_app_chooser_button_get_heading(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_default_item(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_button_get_show_default_item(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_show_dialog_item(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_app_chooser_button_get_show_dialog_item(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_active_custom_item(&self, name: &str) {
        unsafe {
            gtk_sys::gtk_app_chooser_button_set_active_custom_item(
                self.to_glib_none().0,
                name.to_glib_none().0,
            );
        }
    }

    pub fn set_heading(&self, heading: &str) {
        unsafe {
            gtk_sys::gtk_app_chooser_button_set_heading(
                self.to_glib_none().0,
                heading.to_glib_none().0,
            );
        }
    }

    pub fn set_show_default_item(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_button_set_show_default_item(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn set_show_dialog_item(&self, setting: bool) {
        unsafe {
            gtk_sys::gtk_app_chooser_button_set_show_dialog_item(
                self.to_glib_none().0,
                setting.to_glib(),
            );
        }
    }

    pub fn connect_changed<F: Fn(&AppChooserButton) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&AppChooserButton) + 'static>(
            this: *mut gtk_sys::GtkAppChooserButton,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_custom_item_activated<F: Fn(&AppChooserButton, &str) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn custom_item_activated_trampoline<
            F: Fn(&AppChooserButton, &str) + 'static,
        >(
            this: *mut gtk_sys::GtkAppChooserButton,
            item_name: *mut libc::c_char,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &GString::from_glib_borrow(item_name),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"custom-item-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    custom_item_activated_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_heading_notify<F: Fn(&AppChooserButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_heading_trampoline<F: Fn(&AppChooserButton) + 'static>(
            this: *mut gtk_sys::GtkAppChooserButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::heading\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_heading_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_default_item_notify<F: Fn(&AppChooserButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_default_item_trampoline<
            F: Fn(&AppChooserButton) + 'static,
        >(
            this: *mut gtk_sys::GtkAppChooserButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-default-item\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_default_item_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_show_dialog_item_notify<F: Fn(&AppChooserButton) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_dialog_item_trampoline<
            F: Fn(&AppChooserButton) + 'static,
        >(
            this: *mut gtk_sys::GtkAppChooserButton,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-dialog-item\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_dialog_item_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AppChooserButton {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AppChooserButton")
    }
}
