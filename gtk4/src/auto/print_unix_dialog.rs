// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Accessible;
use crate::Buildable;
use crate::ConstraintTarget;
use crate::Dialog;
use crate::Native;
use crate::PageSetup;
use crate::PrintCapabilities;
use crate::PrintSettings;
use crate::Printer;
use crate::Root;
use crate::ShortcutManager;
use crate::Widget;
use crate::Window;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct PrintUnixDialog(Object<ffi::GtkPrintUnixDialog>) @extends Dialog, Window, Widget, @implements Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager;

    match fn {
        get_type => || ffi::gtk_print_unix_dialog_get_type(),
    }
}

impl PrintUnixDialog {
    #[doc(alias = "gtk_print_unix_dialog_new")]
    pub fn new<P: IsA<Window>>(title: Option<&str>, parent: Option<&P>) -> PrintUnixDialog {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_print_unix_dialog_new(
                title.to_glib_none().0,
                parent.map(|p| p.as_ref()).to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_add_custom_tab")]
    pub fn add_custom_tab<P: IsA<Widget>, Q: IsA<Widget>>(&self, child: &P, tab_label: &Q) {
        unsafe {
            ffi::gtk_print_unix_dialog_add_custom_tab(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                tab_label.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_current_page")]
    pub fn get_current_page(&self) -> i32 {
        unsafe { ffi::gtk_print_unix_dialog_get_current_page(self.to_glib_none().0) }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_embed_page_setup")]
    pub fn get_embed_page_setup(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_print_unix_dialog_get_embed_page_setup(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_has_selection")]
    pub fn get_has_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_print_unix_dialog_get_has_selection(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_manual_capabilities")]
    pub fn get_manual_capabilities(&self) -> PrintCapabilities {
        unsafe {
            from_glib(ffi::gtk_print_unix_dialog_get_manual_capabilities(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_page_setup")]
    pub fn get_page_setup(&self) -> PageSetup {
        unsafe {
            from_glib_none(ffi::gtk_print_unix_dialog_get_page_setup(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_page_setup_set")]
    pub fn get_page_setup_set(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_print_unix_dialog_get_page_setup_set(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_selected_printer")]
    pub fn get_selected_printer(&self) -> Printer {
        unsafe {
            from_glib_none(ffi::gtk_print_unix_dialog_get_selected_printer(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_settings")]
    pub fn get_settings(&self) -> PrintSettings {
        unsafe {
            from_glib_full(ffi::gtk_print_unix_dialog_get_settings(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_get_support_selection")]
    pub fn get_support_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_print_unix_dialog_get_support_selection(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_current_page")]
    pub fn set_current_page(&self, current_page: i32) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_current_page(self.to_glib_none().0, current_page);
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_embed_page_setup")]
    pub fn set_embed_page_setup(&self, embed: bool) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_embed_page_setup(self.to_glib_none().0, embed.to_glib());
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_has_selection")]
    pub fn set_has_selection(&self, has_selection: bool) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_has_selection(
                self.to_glib_none().0,
                has_selection.to_glib(),
            );
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_manual_capabilities")]
    pub fn set_manual_capabilities(&self, capabilities: PrintCapabilities) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_manual_capabilities(
                self.to_glib_none().0,
                capabilities.to_glib(),
            );
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_page_setup")]
    pub fn set_page_setup(&self, page_setup: &PageSetup) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_page_setup(
                self.to_glib_none().0,
                page_setup.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_settings")]
    pub fn set_settings(&self, settings: Option<&PrintSettings>) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_settings(
                self.to_glib_none().0,
                settings.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gtk_print_unix_dialog_set_support_selection")]
    pub fn set_support_selection(&self, support_selection: bool) {
        unsafe {
            ffi::gtk_print_unix_dialog_set_support_selection(
                self.to_glib_none().0,
                support_selection.to_glib(),
            );
        }
    }

    pub fn get_property_print_settings(&self) -> Option<PrintSettings> {
        unsafe {
            let mut value = glib::Value::from_type(<PrintSettings as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"print-settings\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `print-settings` getter")
        }
    }

    pub fn set_property_print_settings(&self, print_settings: Option<&PrintSettings>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"print-settings\0".as_ptr() as *const _,
                glib::Value::from(print_settings).to_glib_none().0,
            );
        }
    }

    pub fn connect_property_current_page_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_page_trampoline<F: Fn(&PrintUnixDialog) + 'static>(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-page\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_page_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_embed_page_setup_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_embed_page_setup_trampoline<
            F: Fn(&PrintUnixDialog) + 'static,
        >(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::embed-page-setup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_embed_page_setup_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_has_selection_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_selection_trampoline<F: Fn(&PrintUnixDialog) + 'static>(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-selection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_selection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_manual_capabilities_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_manual_capabilities_trampoline<
            F: Fn(&PrintUnixDialog) + 'static,
        >(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::manual-capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_manual_capabilities_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_page_setup_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_page_setup_trampoline<F: Fn(&PrintUnixDialog) + 'static>(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::page-setup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_page_setup_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_print_settings_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_print_settings_trampoline<F: Fn(&PrintUnixDialog) + 'static>(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::print-settings\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_print_settings_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_selected_printer_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_selected_printer_trampoline<
            F: Fn(&PrintUnixDialog) + 'static,
        >(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::selected-printer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_selected_printer_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_support_selection_notify<F: Fn(&PrintUnixDialog) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_support_selection_trampoline<
            F: Fn(&PrintUnixDialog) + 'static,
        >(
            this: *mut ffi::GtkPrintUnixDialog,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::support-selection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_support_selection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for PrintUnixDialog {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("PrintUnixDialog")
    }
}
