// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Sorter;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::glib_wrapper! {
    pub struct StringSorter(Object<ffi::GtkStringSorter, ffi::GtkStringSorterClass>) @extends Sorter;

    match fn {
        get_type => || ffi::gtk_string_sorter_get_type(),
    }
}

impl StringSorter {
    //#[doc(alias = "gtk_string_sorter_new")]
    //pub fn new(expression: /*Ignored*/Option<&Expression>) -> StringSorter {
    //    unsafe { TODO: call ffi:gtk_string_sorter_new() }
    //}

    //#[doc(alias = "gtk_string_sorter_get_expression")]
    //pub fn get_expression(&self) -> /*Ignored*/Option<Expression> {
    //    unsafe { TODO: call ffi:gtk_string_sorter_get_expression() }
    //}

    #[doc(alias = "gtk_string_sorter_get_ignore_case")]
    pub fn get_ignore_case(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_string_sorter_get_ignore_case(
                self.to_glib_none().0,
            ))
        }
    }

    //#[doc(alias = "gtk_string_sorter_set_expression")]
    //pub fn set_expression(&self, expression: /*Ignored*/Option<&Expression>) {
    //    unsafe { TODO: call ffi:gtk_string_sorter_set_expression() }
    //}

    #[doc(alias = "gtk_string_sorter_set_ignore_case")]
    pub fn set_ignore_case(&self, ignore_case: bool) {
        unsafe {
            ffi::gtk_string_sorter_set_ignore_case(self.to_glib_none().0, ignore_case.to_glib());
        }
    }

    pub fn connect_property_expression_notify<F: Fn(&StringSorter) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_expression_trampoline<F: Fn(&StringSorter) + 'static>(
            this: *mut ffi::GtkStringSorter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::expression\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_expression_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_ignore_case_notify<F: Fn(&StringSorter) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_ignore_case_trampoline<F: Fn(&StringSorter) + 'static>(
            this: *mut ffi::GtkStringSorter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ignore-case\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ignore_case_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[derive(Clone, Default)]
pub struct StringSorterBuilder {
    //expression: /*Unknown type*/,
    ignore_case: Option<bool>,
}

impl StringSorterBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> StringSorter {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref ignore_case) = self.ignore_case {
            properties.push(("ignore-case", ignore_case));
        }
        let ret = glib::Object::new::<StringSorter>(&properties).expect("object new");
        ret
    }

    pub fn ignore_case(mut self, ignore_case: bool) -> Self {
        self.ignore_case = Some(ignore_case);
        self
    }
}

impl fmt::Display for StringSorter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StringSorter")
    }
}
